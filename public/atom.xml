<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2013-04-22T22:05:49+02:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iteratee: can I have that in a sentence?]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/22/iteratee-can-i-have-that-in-a-sentence/"/>
    <updated>2013-04-22T13:08:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/22/iteratee-can-i-have-that-in-a-sentence</id>
    <content type="html"><![CDATA[<p>A couple of weeks back I was trying to wrap my head around <strong><a href="http://www.playframework.com/documentation/2.0.4/Iteratees">Iteratees</a></strong> so I read what I could find on Google. Afterwards, I had a very high level idea about Enumerators producing or emitting a stream of information and Iteratees consuming that information, potentially with aggregate state. At the same time, the Iteratee was supposed to be immutable. Okay, so I have this immutable thing which aggregates state. That did not seem right.</p>

<!-- more -->


<p>I had to see it in action in order to understand how this Iteratee thing works. So I was looking for a stream of information that I could use. I found it in the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong>. A stream of Tweets can be interesting, even outright entertaining, having chosen the right topic(s), and Tweets being tweeted right now when watching the visualization is something that seems easy to relate to. I also wanted to try out a supervised actor hierarchy in this project, so I decided to download the original profile images from Twitter for every single Tweet, downconvert them using a couple of actors doing image manipulation and storing an 80x80px PNG thumbnail in <strong><a href="http://www.mongodb.org">MongoDB</a></strong>. This supervised image manipulation will be the topic of another post though.</p>

<p>On the client side I wanted something flashy that makes it obvious that live information from the real world is flowing through the system and reasoned about. I had recently taken an interest in <strong><a href="http://d3js.org">D3.js</a></strong> and I had seen the <strong><a href="https://github.com/jasondavies/d3-cloud">d3-cloud</a></strong> wordcloud implementation by Jason Davies, which is nice to look at, so I wondered if it would be difficult to drive it from data streaming to the client over a <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connection. The UI at this point was not supposed to be particularly useful, it was really only for the effect. I am fully aware that a wordcloud is not the best way for showing the frequency of words, and having it regenerate every 5 seconds makes it even less useful perceptually since whatever you look at will be gone before you can even fully focus on the smaller items. That being said, I was interested in how Iteratees work. The <strong><a href="http://d3js.org">D3.js</a></strong> I use for this project is very basic on my end, I will focus on doing more useful things with D3 later on.</p>

<p>So I started working on this reactive web application called <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>. In this article I will go through the parts of the application that are relevant for trying to understand Iteratees. I will do this iteratively in the same order in which my own understanding evolved.</p>

<p>Let&#8217;s look at my initial high-level architectural drawing (warning, it is inaccurate, read on to find out why):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/BirdWatch.svg" width="800" height="300" title="image" alt="images"></p>

<p>At first, this seems to make sense. The WS object acts as our Enumerator, taking chunks of Array[Byte] it receives through the open HTTP connection to Twitter and passing them along into an Iteratee:</p>

<figure class='code'><figcaption><span>WS-Client</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="s">&quot;https://stream.twitter.com/1.1/statuses/filter.json?track=&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">topics</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;%2C&quot;</span><span class="o">).</span><span class="n">replace</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">,</span> <span class="s">&quot;%20&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">withTimeout</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sign</span><span class="o">(</span><span class="nc">OAuthCalculator</span><span class="o">(</span><span class="n">consumerKey</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">tweetIteratee</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Iteratee then performs some action (JSON parsing, Tweet reading, sending the Tweet to the ImageConversion actor) for each chunk, without accumulating intermediate state.</p>

<figure class='code'><figcaption><span>tweetIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Iteratee for processing each chunk from Twitter stream of Tweets. Parses Json chunks </span>
</span><span class='line'><span class="cm">* as Tweet instances and publishes them to eventStream. */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span> <span class="n">chunk</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">chunk</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">ActorStage</span><span class="o">.</span><span class="n">imgSupervisor</span> <span class="o">!</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">wordsChars</span><span class="o">(</span><span class="n">stripImageUrl</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsError</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This at first seduced me into believing that the Iteratee for sending the tweets was one particular object that performed these repeated actions as specified in the foreach part. But that is actually not the case. The Iteratee is immutable and every time we pass information to an Iteratee in a step, a new one is created in return. This does not seem terribly useful as long as we only want to perform a foreach without accumulated state. But bear with me.</p>

<p>Let&#8217;s have a look at the next Enumerator / Iteratee couple in the application, then this will make much more sense.</p>

<p>For the wordcount, which feeds both the wordcloud and the bar chart, we analyze a rolling window of tweets. For this, we need to keep state over say the last 1000 tweets as is the case here.</p>

<p>Let&#8217;s have a look at the implementation of the tweetListIteratee first:</p>

<figure class='code'><figcaption><span>tweetListIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates Iteratee which holds a List[Tweet] of length up to n as its state in each step,  </span>
</span><span class='line'><span class="cm"> *  based on the provided tweetList. The newest element is found in the head of the list.</span>
</span><span class='line'><span class="cm"> *  Allows passing in a &quot;side-effecting&quot; function f, e.g. for testing or pushing data to </span>
</span><span class='line'><span class="cm"> *  WebSocket or EventStream. Having f return unit instead of modifying the accumulator </span>
</span><span class='line'><span class="cm"> *  guarantees that f cannot alter the accumulator newAcc in unintended ways.</span>
</span><span class='line'><span class="cm"> *  Attach to Channel[Tweet] for better decoupling within application.</span>
</span><span class='line'><span class="cm"> *  @param    f &quot;side-effecting&quot; function (List[Tweet] =&gt; Unit)</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to use as the accumulator</span>
</span><span class='line'><span class="cm"> *  @param    n max length of list to keep as iteratee state</span>
</span><span class='line'><span class="cm"> *  @return   Iteratee[Tweet, List[Tweet]], accumulating tweetList from tweetChannel</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">,</span> <span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span>
</span><span class='line'>  <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="o">(</span><span class="n">tweetList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">xs</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">newTweetList</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">::</span> <span class="n">xs</span><span class="o">)</span> <span class="n">take</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">f</span><span class="o">(</span><span class="n">newTweetList</span><span class="o">)</span>
</span><span class='line'>      <span class="n">newTweetList</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here we have constructed an Iteratee which takes as parameters a function f which takes a List[Tweet] and returns Unit, a TweetList which will be our accumulator and n, which is the maximum size of the list in the accumulator or in other words the maximum size of our rolling window that we will reason about. Function f is by definition side-effecting as it returns Unit, so the only effect it can have is outside the tweetListIteratee. Normally we should probably shy away from side-effects, but here I would argue that this is a good thing. Any function passed in here could be defined to have side-effects, but the Unit return type guarantees that f will not be able to mess with the accumulator, it cannot have any effects on it, unlike functions transforming the accumulator. The side-effect f is used for is pushing immutable information into the WebSocket connection. In fact, there is no mutable state in scope for this function anyways that it could mess with.</p>

<p>Let&#8217;s look at that function we substitute for f before we wire the Iteratee into an Enumerator:</p>

<figure class='code'><figcaption><span>interceptTweetList</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** &quot;side-effecting&quot; function to do something with the accumulator without possibly mutating it</span>
</span><span class='line'><span class="cm"> * e.g. push some computation to a WebSocket enumerator or to log file</span>
</span><span class='line'><span class="cm"> * @param    tweetList accumulator inside the Iteratee</span>
</span><span class='line'><span class="cm"> * @return   Unit, cannot interfere with the accumulator inside the Iteratee </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">interceptTweetList</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">charCountMean</span><span class="o">,</span> <span class="n">charCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">charCount</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">wordCount</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetState</span> <span class="k">=</span> <span class="nc">TweetState</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="o">,</span> <span class="mi">250</span><span class="o">),</span> <span class="n">charCountMean</span><span class="o">,</span>
</span><span class='line'>    <span class="n">charCountStdDev</span><span class="o">,</span> <span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">,</span> <span class="n">tweetList</span><span class="o">.</span><span class="n">size</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">wsOutChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">stringify</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">tweetState</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function above calculates mean and standard deviation for character count and word count within the tweets inside the rolling window, which by now is the old state from the previous Iteratee plus the latest Tweet pushed into the Iteratee appended at the head of the list (limited to size n if larger):</p>

<figure class='code'><figcaption><span>stdDev</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/Calc.scala'>Calc.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Calculate standard deviation from TraversableOnce[Int]</span>
</span><span class='line'><span class="cm"> *  @param    xs collection of Int</span>
</span><span class='line'><span class="cm"> *  @return   (mean: Double, stdDev: Double)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">stdDev</span><span class="o">(</span><span class="n">xs</span><span class="k">:</span> <span class="kt">TraversableOnce</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="o">(</span><span class="kt">Double</span><span class="o">,</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">n</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">total</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">x</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">mean</span> <span class="k">=</span> <span class="n">total</span> <span class="o">/</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stdDev</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">}</span> <span class="o">/</span> <span class="n">n</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">mean</span><span class="o">,</span> <span class="n">stdDev</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and also the word frequency map:</p>

<figure class='code'><figcaption><span>countTweetWords & topN</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Counts words in List[Tweet], returning Map[String, Int] with wordMap filtered by </span>
</span><span class='line'><span class="cm"> *  regular expression and not containing any word from the stopWords set</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to count words in</span>
</span><span class='line'><span class="cm"> *  @return   Map[String, Int] with word counts</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">tweetList</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">tweet</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">splitTweet</span><span class="o">(</span><span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="o">).</span><span class="n">filter</span><span class="o">{</span> <span class="n">w</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">stopWords</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">w</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">wordMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">word</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">wordMap</span> <span class="o">+</span> <span class="o">((</span><span class="n">word</span><span class="o">,</span> <span class="n">wordMap</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Generates ListMap with Top n most popular words in a tweetList</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet]</span>
</span><span class='line'><span class="cm"> *  @param    n number highest ranking words to return</span>
</span><span class='line'><span class="cm"> *  @return   sorted ListMap with top n words in descending order of count </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">wordMap</span> <span class="k">=</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="o">)</span>
</span><span class='line'>  <span class="nc">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">](</span><span class="n">removeShortWords</span><span class="o">(</span><span class="n">wordMap</span><span class="o">).</span><span class="n">toList</span><span class="o">.</span><span class="n">sortBy</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">_2</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="o">)</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These calculations probably warrant a separate (and much shorter) article. For now let&#8217;s just assume they do what the description states. The results of these computations is then pushed into the WebSocket channel towards the browser as JSON (embedded in an immutable instance of Case Class <strong><a href="https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/models/Tweet.scala">TweetState</a></strong>). That step actually involves another Enumerator / Iteratee couple, but more about that later.</p>

<p>Let us now hook the Iteratee up with an Enumerator that will drive it before dealing with the issue that the Iteratee is immutable and cannot be changed. <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.PushEnumerator">PushEnumerator</a></strong> is deprecated as of Play 2.10, we are supposed to use <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.Concurrent$">Concurrent.broadcast</a></strong> instead.</p>

<figure class='code'><figcaption><span>Enumerator for tweetIteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates enumerator and channel for Tweets through Concurrent factory object */</span>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">enumerator</span><span class="o">,</span> <span class="n">tweetChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Iteratee processing Tweets from tweetChannel, accumulating a rolling window of tweets */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetListIteratee</span> <span class="k">=</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">interceptTweetList</span><span class="o">,</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">](),</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'><span class="n">enumerator</span> <span class="o">|&gt;&gt;&gt;</span> <span class="n">tweetListIteratee</span> <span class="c1">// attach tweetListIteratee to enumerator</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Actor for subscribing to eventStream. Pushes received tweets into TweetChannel for</span>
</span><span class='line'><span class="cm"> * consumption through iteratee (and potentially other consumers, decoupled)  */</span>
</span><span class='line'><span class="k">val</span> <span class="n">subscriber</span> <span class="k">=</span> <span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=&gt;</span> <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}))</span>
</span><span class='line'><span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">eventStream</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">subscriber</span><span class="o">,</span> <span class="n">classOf</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="c1">// subscribe to incoming tweets</span>
</span></code></pre></td></tr></table></div></figure>


<p>We call Concurrent.broadcast[Tweet], which returns a tuple of an Enumerator (named accordingly) that we will attach our Iteratee to (using the |>>> operator) and a channel that we can use to push Tweets into. These Tweets will then be consumed by the tweetListIteratee attached to the enumerator. We will get those Tweets from the <strong><a href="http://doc.akka.io/docs/akka/2.1.2/scala/event-bus.html">Akka EventBus</a></strong> by creating an actor which listens events of type Tweet on the EventBus and pushes them. We will look at the EventBus in more detail in the article dealing with the ImageProcessing actor hierarchy. For now it should be sufficient to know that we have a source of Tweets and push each individual occcurence of a Tweet event into the tweetChannel, thus creating our own open-ended stream.</p>

<p>At a high level, what we are trying to do is this:</p>

<p>Something does not seem right here. How can we repeatedly pass information to an immutable object which aggregates state? Turns out we can&#8217;t. There is no one Iteratee receiving and processing information, instead every step of the Iteratee returns a new Iteratee, with the new state.</p>

<p>Okay, that makes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/19/hello-world/"/>
    <updated>2013-04-19T21:19:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/19/hello-world</id>
    <content type="html"><![CDATA[<p><strong>Who am I?</strong>
My name is Matthias and I had my first computer before I had my first bike. I&#8217;ve spent most of my career working in IT project management and systems engineering, having run my own company for over a decade. I was doing well financially, but really wasn&#8217;t satisfying my own curiosity. Who wants to spend their time chasing bugs in systems they didn&#8217;t have any part in creating. I don’t.</p>

<p>After some wandering, I discovered what a delight it can be to write these amazing little things called &#8216;programs&#8217; that come to existence almost completely through the workings of the mind. A couple of years ago, I finally decided that it was time for a major change. I knew I really wanted to be spend my time and energy in the creative process of developing applications that elegantly solve problems, so I made the move, and I haven&#8217;t looked back since.</p>

<!-- more -->


<p><strong>Why am I blogging?</strong>
I am fascinated by the idea of reasoning over live data streams. There are quite a few things that I still need to learn in order to turn my ideas into working code. I find that I learn particularly well when explaining things to others, so writing this blog seems like an awesome idea.</p>

<p>Recently I started to work on a reactive web project for my portfolio, written in <a href="http://www.scala-lang.org">Scala</a> using the <a href="http://www.playframework.com">Play Framework</a>. It presented an ideal opportunity to make this project open source and use it as the first thing to write about. This has been tremendous fun and really exciting so far. I put that project called BirdWatch on <a href="https://github.com/matthiasn/BirdWatch">GitHub</a>, installed a demo on a <a href="http://birdwatch.matthiasnehlsen.com">web server</a> and showed it to a handful of people, not thinking that it was anywhere near being published in a broader sense.</p>

<p>Then it got mentioned on Twitter, retweeted 16 times and before I knew it, I had visitors from 272 cities in 48 countries on that web server. I know because out of curiosity I wrote a little logging routine that does GeoIP-lookup for every IP-address visiting that server on the fly, but that is the topic for a future post, potentially with a live visualization for the curious website owner.</p>

<p><strong>What will I be blogging about?</strong>
I will be blogging about functional programming, reactive data processing and data visualization. I am particularly interested in observable data from the real world moving through information systems, ideally for visualizations that are both useful and pleasant to look at.</p>

<p>For the time being, you can expect me to use <a href="http://www.scala-lang.org">Scala</a>, <a href="http://www.playframework.com">Play</a> and <a href="http://akka.io">Akka</a> on the server side, a beautiful technology stack that allows solving concurrent problems in surprisingly short amounts of time. For the client side I am just getting started with <a href="http://d3js.org">D3.js</a>, a JavaScript library for data-driven DOM manipulation. It allows for absolutely stunning visualizations, even though I am nowhere near that as of yet.</p>

<p>You can also expect me to continue getting live prototypes up and running for the things I write about, just like the one for <a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a>. I find code that is not executed to be a wasted effort, and there is no better proof for any code than running it. I already learned a lot regarding the architecture of BirdWatch and there are a few things that I would do differently in the future, but that is also a topic for a future post.</p>

<p><strong>How can you leave feedback?</strong>
I am starting this blog because I am hoping to learn a lot in the process, particularly from interaction with you, the reader. So please comment on the blog posts, correct me where I am wrong, and let me know where you think a more elegant solution could be found.</p>

<p>Most importantly, ask if there is anything that you find difficult to understand. My goal in all of this is to explain things as clearly as possible, so please let me know when I&#8217;ve failed to do that. Ask questions in the comments section if you think that others might benefit from the answers as well. Of course, you can also always contact me by email, though that may take longer for a response.</p>

<p>You can also follow me on Twitter <a href="https://twitter.com/_MNehlsen">@_MNehlsen</a>. I just launched my feed, so you&#8217;ll get to be among the first to follow me, and it will make keeping track of when I published a new post much easier for you, as well as other things I find interesting in general.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
</feed>
