<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2015-01-09T13:14:53+01:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Progress with “Building a System in #Clojure”: Hairball Removal]]></title>
    <link href="http://matthiasnehlsen.com/blog/2015/01/09/Hairball-Removal/"/>
    <updated>2015-01-09T12:05:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2015/01/09/Hairball-Removal</id>
    <content type="html"><![CDATA[<p>I’ve been struggling with finishing the next chapter of <strong>&#8220;Building a System in Clojure”</strong>. I tried to explain and draw the client-side architecture, but instead I’ve been procrastinating <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> around the conceptual drawings for days and now I realize why. The current architecture of the web client just plain <strong>sucks</strong>.</p>

<!-- more -->


<p>Which makes me think that procrastination is quite possibly more useful than its grim reputation suggests. Sure, I could have just forced myself to draw the current architecture while oppressing critical thought. The real message, though, was that I had a more than valid reason not to be excited. Anyway, I digress. Yesterday, I finally tried to draw it and the task made me feel uneasy in my stomach. Let’s just say that unsightly hairball had to go.</p>

<p>So instead, I grabbed a pencil and carefully drew the blueprint <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> for the architecture I desire. That’s done; it looks well groomed to me, and I’m excited about the refactoring ahead.</p>

<p>If you are a reader of the book, you can download the current version, see what I mean when I say it’s gruesome and compare that with the redesign when it’s finished. Consider that a feature of becoming a reader early on in the writing process.</p>

<p>That’s it; I’m back to a fun coding session. Thanks for reading.</p>

<p>Happy 2015,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I had some fun animating fireworks by manipulating SVG in ClojureScript instead. Maybe I’ll make an article out of that one day.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>By the way, it was terrific to stow the laptop away safely and use paper and pencil instead. You should give it a try.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Holidays and Thanks for Reading]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/23/Happy-Holidays/"/>
    <updated>2014-12-23T15:15:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/23/Happy-Holidays</id>
    <content type="html"><![CDATA[<p>Last week, I published the very first version of my <strong><a href="https://leanpub.com/building-a-system-in-clojure">&#8220;Building a System in Clojure&#8221;</a></strong> book. I’m thrilled by the amount of interest it has already generated and I’ll do my best to live up to your expectations.</p>

<!-- more -->


<p>Today, after a few hundred readers signed up for free, I have removed the free option. There are more than enough readers now to give valuable feedback on the early versions of the book.
Yesterday and today I have published new versions, with the latest one being roughly 25 pages longer than the initial version. The content is growing fast and a good part of the reason why is that I <strong>really like the authoring process</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>I will publish another version <strong>tomorrow</strong> that aims at covering the entire server-side code in writing and will probably also contain some additional drawings to make things clearer.</p>

<p>So, you will have something to read over the holidays<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Please let me know if any passage needs clarification.</p>

<p><strong>Thank you</strong> for reading this blog and a <strong>special</strong> thank you if you read my book. I had a plenty of fun this year and I learned a lot. I will take the next week off, so I’ll see you back here in 2015.</p>

<p>Happy Holidays,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I am using <strong><a href="https://leanpub.com">leanpub.com</a></strong> to publish the book and I love the authoring workflow, it has been nothing but pleasure so far. Writing in Markdown is so much better than constantly having to wrangle with Word files. I will probably write more about that later, but already a <strong>big shout-out to guys at Leanpub</strong> for offering a great service.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>But only after you spend enough time with your loved ones.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm writing a book about Building a System in Clojure]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/19/Clojure-Book/"/>
    <updated>2014-12-19T16:15:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/19/Clojure-Book</id>
    <content type="html"><![CDATA[<p>I thought about where to take my series about <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">Building a System in Clojure</a></strong> next and realized that I don&#8217;t like the format of a <strong>blog series</strong> all that much. Instead, the format of a <strong>book</strong> seems like a better choice; one where you, the potential reader, are invited to provide feedback from the very first moment of the writing process. I have already started that process and for now I have transferred the existing articles from the series into the book without much further editing. Over the next couple of weeks, I will be working on making the content more consistent with the book format. The book is available for free on <strong><a href="https://leanpub.com/building-a-system-in-clojure">leanpub.com</a></strong>. Iff (if and only if) you find the content to be of value, you can pay a suggested price, but that&#8217;s entirely up to you and something you can decide on later.</p>

<!-- more -->


<p>The book format will allow me to write a consistent narrative around the flow of data through a system, where we will follow the journey of data from a streaming source to a user interface that updates changes according to new data from the streaming source immediately, or rather within a few hundred microseconds.</p>

<p>As a sample application, we will use tweets streaming live from the Twitter Streaming API. In case you haven&#8217;t seen it yet, this is how the application looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/birdwatch-pure.jpg" title="New Design with Pure CSS" alt="New Design with Pure CSS"></p>

<p>There&#8217;s also a <strong><a href="http://birdwatch2.matthiasnehlsen.com/">live version</a></strong> of this application. I have ideas for additional sample applications, but they may or may not come into existence, depending on how much time I will have for this book project.</p>

<p>The process of writing this book will take place while exploring the problem space, not afterwards. All designs and implementations are fluid at this point and I will be happy to discuss all aspects of the system in this <strong><a href="https://groups.google.com/forum/#!forum/building-a-system-in-clojure/">Google Group</a></strong> and adapt and rewrite aspects when better solutions arise in these discussions. You are also welcome to join the development process: do reach out when you have a suggestion on how to get involved. The project needs tests, better inline documentation, code reviews, and quite possibly better design and code.</p>

<p>Regarding the book writing process, first and foremost I would love questions for clarification so the content will come out as approachable as possible. If you find a typo, please correct it and submit a <strong><a href="https://github.com/matthiasn/clojure-system-book">pull request</a></strong> right away.</p>

<p>I am looking forward to the weeks to come. It&#8217;s much better to be able to put some work in here and there on whatever I&#8217;m interested in that day instead of writing monolithic blog posts that aim at conclusively covering an aspect of the application, usually way before I have any conclusive understanding.</p>

<p>Would you do me a favor? <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Please sign up as a reader (for free and with no commitment whatsoever) right away if you think you might at all be interested in what we&#8217;ll cover in this book. I would very much like to know how much interest there might be and I promise I will try to do what I can to make the time spent on reading this book or contributing to it worth your while.</p>

<p>Cheers and Happy Holidays,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>As a little christmas present, if you will.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Clojure eXchange, next steps in BirdWatch, Clojure and me]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/12/Weekly/"/>
    <updated>2014-12-12T14:20:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/12/Weekly</id>
    <content type="html"><![CDATA[<p>Last week was great. I had just come back from my trip to the United States the week before, where I attended the <strong><a href="http://clojure-conj.org">Conj</a></strong> and got to hang out with dear friends in both Washington DC and New York City. I used to live in DC in 2009 and 2010, and it was really good to be back. Last Friday, I had a talk at <strong><a href="https://skillsmatter.com/conferences/1956-clojure-exchange-2014">Clojure eXchange</a></strong> in London about my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application and my journey to Clojure. I think there should be a recording somewhere, but I haven’t checked it out just yet. The day before that, I had parted from <strong><a href="http://www.scala-lang.org">Scala</a></strong> with a <strong><a href="http://matthiasnehlsen.com/blog/2014/12/04/Farewell-Scala/">farewell letter</a></strong> here on this blog. It took me by surprise how much attention this little letter received <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, considering that it was really only between Scala and me.</p>

<!-- more -->


<p>I am glad that relationship is over. Let me just make it clear that I don’t hate Scala. I built some interesting stuff with it in the past. But it is just not as much fun as <strong><a href="http://clojure.org">Clojure</a></strong> is and that’s extremely important to me. I became a programmer after 10 years of project and operations management in healthcare IT <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, all the while running my own company and managing employees. I did that until it was no longer a challenge. Then I thought, hey, building software myself should be plenty of fun and shouldn’t be all that difficult if done right. But none of the technologies I have worked with so far (C#, Java, JavaScript, Scala) had sparked the excitement that I was looking for. Well, that has definitely changed with Clojure.</p>

<p>I do not have any major new results to report on the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> front this week as I was mostly busy with other stuff (such as taxes and actual work). But I did change the design and kicked out <strong><a href="http://getbootstrap.com">Bootstrap</a></strong> in favor of <strong><a href="http://purecss.io">Pure CSS</a></strong>, which not only looks good by default but is also tiny in comparison to Bootstrap. Here’s a peek of how the new design looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/birdwatch-pure.jpg" title="New Design with Pure CSS" alt="New Design with Pure CSS"></p>

<p>Much better, I find. You can also check out a <strong><a href="http://birdwatch2.matthiasnehlsen.com/">live version</a></strong>. I had really developed a distaste for the old Bootstrap look over the course of the year. Next I want to replace <strong><a href="http://d3js.org/">D3</a></strong>, at least for the bar chart generation. I’d much rather manipulate the <strong><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a></strong> in <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and build the charts myself. Is this going to save me time? Probably not, but this is a toy project, so what does saving time in that context even mean? I am interested in manipulating graphical elements directly from ClojureScript and that’s what matters. I have made good progress so far, but nothing that I’d want to present just yet, maybe next week.</p>

<p>Also, I was able to put some more thought into server-side aggregation. But again, nothing for this week, please check back soon.</p>

<p>Oh, before I forget, I will present at the <strong><a href="http://www.meetup.com/ClojureUserGroupHH/events/218689956/">Clojure Meetup in Hamburg</a></strong> next week on Thursday. Please come and say hi if you&#8217;re anywhere near Hamburg.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Thanks to Hacker News, there were like an extra <strong>30K</strong> pageviews on my blog during the first 36 hours after publishing the farewell note. I should publicly part more often, I guess.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Okay, I did write some software myself at that time, but my involvement with software development was was mostly overseeing development done by others.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A farewell note to a programming language]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/12/04/Farewell-Scala/"/>
    <updated>2014-12-04T14:55:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/12/04/Farewell-Scala</id>
    <content type="html"><![CDATA[<p>Dear Scala,</p>

<p>Do you remember how we first met, back in 2012? I thought your functional approach was fresh, and different. For a while I believed we were made for each other. A first project was a success; on my own I was comfortable with the good parts of you. But as soon as I started working in teams writing Scala, your immense syntax started drowning me. At first, I took it as a compliment that you tried to please me by offering me to work the way I liked. But then I noticed that it wasn’t something you did for me in particular. Instead, you try to be everybody’s darling by offering every software development paradigm known to man.</p>

<!-- more -->


<p>I found that to be particularly gruesome when working with seasoned Java developers. Yeah, sure, they have been doing OOP for a long time, for whatever that’s worth. But that doesn’t mean that it’s a good idea to recreate Java in Scala with just a little bit less of boilerplate. In well over a year of working in Scala teams there hasn’t been a single day where I felt that there was a shared mindset about how to develop a system or even approach a problem.</p>

<p>All this is not to say that one can’t develop powerful systems with you; there’s plenty of proof otherwise, but my heart is no longer in it and I am not even sure it ever was.</p>

<p>Last year I wrote this little application called <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> in <strong><a href="http://www.scala-lang.org/">Scala</a></strong> and <strong><a href="https://www.playframework.com">Play Framework</a></strong>, initially only to have something to show when interviewing for jobs. But then the whole thing developed a life of its own. It was like a cute little stray dog that all of a sudden showed up on your porch. You don’t really know what to do with it but it sure looks hungry, so you feed it; it decides to stick around and before you know it, you find yourself making regular appointments at a dog spa. You know, that kind of story. It’s cute though, I’m not complaining.</p>

<p>But I never felt compelled to put much work in the server side implementation, in part because I already spent my workdays writing Scala. Also, while the server side implementation looks deceptively simple, it is actually hard to understand in depth because it uses the <strong><a href="https://www.playframework.com/documentation/2.2.x/Iteratees">Iteratee library</a></strong>. I find this library difficult to understand, even more difficult to explain to other people, and next to impossible to grasp the source code of. As a matter of due diligence, I prefer to rely only on library code that I have read and understood well. In this case, I could not fix even the smallest bug, and that’s a huge red flag.</p>

<p>So I spent more time working on different clients. Initially, there was the AngularJS/JavaScript version, then another version with ReactJS/JavaScript and even another one with ReactJS/ScalaJS.</p>

<p>All the while I was flirting with <strong><a href="http://clojure.org/">Clojure</a></strong>, so it was a logical next step for me to write a client with <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and <strong><a href="https://github.com/swannodette/om">Om</a></strong>. I quickly abandoned that one, not because I didn’t like it, but because I liked the ClojureScript experience so much that I wanted to abandon you altogether, dear Scala, in favor of an all-Clojure version.</p>

<p>So here it is. I have met another programming language, and for the first time I feel like I’ve met a soul mate, as far as programming languages go <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Sorry about that, but I have to follow my heart.</p>

<p>But why am I writing this all of a sudden, you might ask? Good question. The other day yet another recruiter approached me about a Scala project, which happens more often than I even care to look up whom the project is for. But this time it was different. I felt the need to make a clean break. Considering my career, I decided that you, Scala, would not be a part of it, no matter how high the demand or how impressive the daily rate for freelance gigs.</p>

<p>I will be happier with projects in Clojure. Which brings me to an unfortunate observation I made at the Conj. I was a little surprised about the number of people I spoke to that wished they could code Clojure to pay their rent <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>To sum up things, dear Scala, it is definitely over between the two of us. I don’t need to take a break; I have found a better match. That doesn’t mean anyone else should follow my example blindly, though. But what it may get people thinking about is that whatever the language they are currently using, if they’re not happy, they may want to look for a better fit for themselves. I don’t know about other people’s life, but mine is too short for working with something that I don’t love.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The whole LISP / S-expression / homoiconicity thing seems very compatible with the operating system of my brain, and I also feel that constraint is bliss. There aren’t nearly as many ways to write idiomatic Clojure as there are ways to write a Scala program.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It must be possible to start a lucrative business around software written in Clojure, in particular when I consider how much more productive I personally am when I write Clojure compared to Scala. If you know of any opportunities where my skillset could be an asset, please let me know. Ideally, I’d favor multiple short-term projects over one long project. These short projects could start with an analysis of a problem or an existing system, a prototype for something new and then checking back on it from time to time. If that sounds like something you may need, please contact me offline. My email is on my GitHub repo.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspect - println no more]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/11/14/Inspect/"/>
    <updated>2014-11-14T17:30:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/11/14/Inspect</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong>: I realized how much I <strong>disliked</strong> the process of <strong>logging data structures</strong> to the console and then trying to find them and repeatedly commenting out and uncommenting <strong>println</strong> statements. So I decided to <strong>fix that</strong>.</p>

<!-- more -->


<p>Last Friday, I was thinking about how to approach the next task in the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application. I came up with the idea to do <strong>aggregations</strong> on data from ElasticSearch on the server side and then send the aggregate on the wire over <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSockets</a></strong> to a <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> client. In order to build up the aggregate data structures, I would need to inspect what I was building during development. But I didn&#8217;t have a good way to do that.</p>

<p>Sure, <strong>println</strong> statements can be useful when reasoning about parts of an application. Just leaving them in there is <strong>not feasible</strong> though, particularly when running the application under any kind of load. Finding a logged item on the console can easily be like trying to find a needle in a haystack. For example in BirdWatch, my current configuration receives around <strong>50 tweets per second</strong>. I am also using this configuration for the development process. Do I want to log this relatively large tweet data structure every time, 50 times a second? <strong>Certainly not</strong>, as that would make it difficult to find everything else. Occasionally, though, I want to see one of those or any other kind of data structure used in the system.</p>

<p>So what do we usually do? I constantly found myself commenting out and uncommenting <strong>println/log</strong> statements and then restarting the application. That&#8217;s not fun at all and a <strong>huge waste of time</strong>.</p>

<p>Here&#8217;s my idea of how to do it <strong>better</strong>: what if we can leave all those log statements in there and send them to a subsystem that can easily be integrated into <strong>any existing Clojure application</strong> and takes care of the presentation? This subsystem as a <strong>default doesn&#8217;t do anything</strong> with the logged data, which makes it very cheap to process even higher loads<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. The subsystem then exposes a <strong>web application</strong> that allows clients to see the <strong>next n</strong> of a certain event type (or combinations thereof). Here&#8217;s how that looks like, I have already implemented it:</p>

<p><a href="http://inspect.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/inspect.jpg" /></a></p>

<p>When you connect a new client, as a default you currently get the <strong>next 10</strong> of every message type known to the system. On the left, there is a table that shows how many items per each type are left. On the right of the table, there are buttons that toggle if the respective data type is to be shown or not. The <strong>next</strong> button will increment the number for each selected type by whatever is in the field.</p>

<p>You can click on the image for a live version. In this simple example, there are a couple of message types:</p>

<ul>
<li><strong>:interval-put/every-millisecond</strong> - emitted every millisecond by a go-loop</li>
<li><strong>:interval-put/every-second</strong> - emitted every second by a go-loop</li>
<li><strong>:interval-put/every-five-seconds</strong> - emitted every five seconds by a go-loop</li>
<li><strong>:interval-put/every-ten-seconds</strong> - emitted every ten seconds by a go-loop</li>
<li><strong>:interval-put/every-minute</strong> - emitted every minute by a go-loop</li>
<li><strong>:ws/event-in</strong> - emitted when there&#8217;s an incoming message on a WebSocket connection (such as a new connection)</li>
</ul>


<p>Using the <strong>inspect</strong> library is super simple. All you need to do is add <strong>inspect</strong> to the dependencies in your project.clj:</p>

<pre><code>[com.matthiasnehlsen/inspect "0.1.1"]
</code></pre>

<p>Then, you probably want to import it where you need it:</p>

<pre><code>[com.matthiasnehlsen.inspect :as inspect :refer [inspect]]
</code></pre>

<p>Next, you want to start it once, from anywhere:</p>

<pre><code>(inspect/start)
</code></pre>

<p>That&#8217;s all; you can now use it, for example:</p>

<pre><code>(inspect :interval-put/every-second {:msg "every second"})
</code></pre>

<p>There is no need to make the event types known to inspect, other than just passing namespaced keywords. Inspect will then learn the event types itself.</p>

<p>Here is the full example application (minus the namespace definition, optional port configuration and REPL reload; click on the link on the upper right of the code block for the entire file):</p>

<figure class='code'><figcaption><span>inspect sample application</span><a href='https://github.com/matthiasn/inspect/blob/65feac4f2bddc9711c7e5798020c3f0b993407a0/example/src/example/core.clj'>core.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">interval-put-loop</span>
</span><span class='line'>  <span class="s">&quot;put msg on chan every interval milliseonds&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">interval</span> <span class="nv">msg-type</span> <span class="nv">msg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="p">(</span><span class="nf">timeout</span> <span class="nv">interval</span><span class="p">))</span> <span class="p">(</span><span class="nf">inspect</span> <span class="nv">msg-type</span> <span class="nv">msg</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span>     <span class="mi">1</span> <span class="ss">:interval-put/every-millisecond</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every millisecond&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span>  <span class="mi">1000</span> <span class="ss">:interval-put/every-second</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every second&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span>  <span class="mi">5000</span> <span class="ss">:interval-put/every-five-seconds</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every five seconds&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span> <span class="mi">10000</span> <span class="ss">:interval-put/every-ten-seconds</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every ten seconds&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">interval-put-loop</span> <span class="mi">60000</span> <span class="ss">:interval-put/every-minute</span> <span class="p">{</span><span class="ss">:msg</span> <span class="s">&quot;every minute&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/save</span> <span class="s">&quot;example.pid&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/delete-on-shutdown!</span> <span class="s">&quot;example.pid&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Application started, PID&quot;</span> <span class="p">(</span><span class="nf">pid/current</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">inspect/start</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inspect internals</h2>

<p>The inspect library internally makes use of the <strong><a href="https://github.com/stuartsierra/component">component library</a></strong>, <strong><a href="https://github.com/ptaoussanis/sente">Sente</a></strong> for the WebSockets connection and <strong><a href="https://github.com/reagent-project/reagent">Reagent</a></strong> for building a reactive UI on top of <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong>. I won&#8217;t go into details today, but I probably will soon.</p>

<h2>Conclusion</h2>

<p>Okay, this is it for today. This project is less than a week old and I am still in the middle of exploring the problem space. In particular, I want to start using it everywhere in my BirdWatch project so that I can get a better idea of how I want to interact with the UI. I think inspect, among other things, makes for a useful <strong>executable documentation</strong> of a system, where you can easily find out how the data in your system looks like. I would have loved to have that in the past when I was new to a project.</p>

<p>Despite this project being so young, there is no reason why you couldn&#8217;t <strong>try it</strong> already. Maybe you have ideas on what you&#8217;d like to see in there. There&#8217;s a good chance I can implement other good ideas over the upcoming weekend. Either discuss here in the comments or open an issue on <strong><a href="https://github.com/matthiasn/inspect">GitHub</a></strong>.</p>

<p>Over the next weeks, I will show how to use the above inside a real application. Also, I might write an article about how <strong>inspect</strong> works internally. Of course the code is on <strong><a href="https://github.com/matthiasn/inspect">GitHub</a></strong>. It&#8217;s pretty short; the entire thing including the UI is only around <strong>300 lines</strong> of Clojure and ClojureScript code.</p>

<p>Curious what&#8217;s next? You can subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> or <strong><a href="https://twitter.com/matthiasnehlsen">follow me on Twitter</a></strong> and I will let you know when the next article is out.</p>

<p>Cheers and have a great weekend,<br>
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In the default case when no client wants messages, the extra burden should be minimal. There shouldn’t even be significant GC pressure as the evaluated immutable data structures exist already and are structurally shared. In the example application, I am hitting the system with over 1,000 messages per second and the extra load to match the messages with connected clients is about 3-5% (out of a total of 800% on my Retina MacBook). But this would have to be verified before you use it in production, obviously.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure Part 4 - Inter-process communication with Redis]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/11/07/Building-Systems-in-Clojure-4/"/>
    <updated>2014-11-07T14:32:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/11/07/Building-Systems-in-Clojure-4</id>
    <content type="html"><![CDATA[<p><strong><a href="http://matthiasnehlsen.com/blog/2014/10/30/Building-Systems-in-Clojure-3/">Last week</a></strong>, I drew a picture of how I wanted to break apart a monolithic application and instead run different parts of the application in separate processes / separate JVMs. The idea was to have a single client for the connection to the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong> and the persistence of the received Tweets in <strong><a href="http://www.elasticsearch.com">ElasticSearch</a></strong>, plus multiple machines to serve WebSocket connections to the client. For the communication between the processes, I picked <strong><a href="http://redis.io/topics/pubsub">Redis Pub/Sub</a></strong> because its model of communication appears to suit the requirements really well. As cute as the drawing may be, I prefer code (plus drawing), so I took the previous monolith apart over the weekend and put <strong><a href="http://redis.io">Redis</a></strong> in between for communication. It worked really well and here&#8217;s how.</p>

<!-- more -->


<p>Okay, it wasn&#8217;t a total surprise to see how well it worked. After all, I started using the <strong><a href="https://github.com/stuartsierra/component">Component library</a></strong> together with <strong><a href="https://github.com/clojure/core.async">core.async</a></strong> for exactly this reason a few weeks ago. I wanted the freedom to only ever having to put stuff on conveyor belts and not having to think about how a thing got where it needs to go, or even where it needs to go at all.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/redesign2.png" title="Redesigned Architecture - InterOp" alt="Redesigned Architecture - InterOp"></p>

<h2>Redis Pub/Sub with Carmine</h2>

<p>I chose <strong>Pub/Sub</strong> over a queue because I wanted to <strong><a href="http://en.wikipedia.org/wiki/Fan-out">fan-out</a></strong> messages to multiple clients. Any connected processes are only supposed to be fed with data during their uptime, with no need to store anything for when they aren&#8217;t connected. For interfacing with <strong>Redis</strong> from Clojure, I then chose <strong><a href="https://twitter.com/ptaoussanis">Peter Taoussanis</a></strong>&#8217;s <strong><a href="https://github.com/ptaoussanis/carmine">carmine</a></strong> client and it turned out to be a great choice.</p>

<p>Let&#8217;s look at some code. First of all, I am using a <strong>component</strong> that provides a <strong>send channel</strong> and a <strong>receive channel</strong>. It can be reused on either side of the Pub/Sub connection (or for bidirectional communication, of course):</p>

<figure class='code'><figcaption><span>Interop Channels Component</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/component.clj'>component.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Interop-Channels</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Interop Channels Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:send</span> <span class="p">(</span><span class="nf">chan</span><span class="p">)</span> <span class="ss">:receive</span> <span class="p">(</span><span class="nf">chan</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span>  <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stop Interop Channels Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:send</span> <span class="nv">nil</span> <span class="ss">:receive</span> <span class="nv">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This channels component can now be wired into other components. Here&#8217;s the component on the publisher side:</p>

<figure class='code'><figcaption><span>Publishing Interop Component</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/component.clj'>component.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Interop</span> <span class="p">[</span><span class="nv">conf</span> <span class="nv">channels</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">conn</span> <span class="p">{</span><span class="ss">:pool</span> <span class="p">{}</span> <span class="ss">:spec</span> <span class="p">{</span><span class="ss">:host</span> <span class="p">(</span><span class="ss">:redis-host</span> <span class="nv">conf</span><span class="p">)</span> <span class="ss">:port</span> <span class="p">(</span><span class="ss">:redis-port</span> <span class="nv">conf</span><span class="p">)}}]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">red/run-send-loop</span> <span class="p">(</span><span class="ss">:send</span> <span class="nv">channels</span><span class="p">)</span> <span class="nv">conn</span> <span class="s">&quot;matches&quot;</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">conn</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span>  <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stopping Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we are creating a configuration map and start a send loop with this configuration for the <strong>&#8220;matches&#8221;</strong> topic. Here&#8217;s that loop:</p>

<figure class='code'><figcaption><span>Send Loop</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/redis.clj'>redis.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-send-loop</span>
</span><span class='line'>  <span class="s">&quot;loop for sending items by publishing them on a Redis pub topic&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">send-chan</span> <span class="nv">conn</span> <span class="nv">topic</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">msg</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">send-chan</span><span class="p">)]</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">car/wcar</span> <span class="nv">conn</span> <span class="p">(</span><span class="nf">car/publish</span> <span class="nv">topic</span> <span class="nv">msg</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">recur</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <strong>go-loop</strong> consumes all messages that come in on <strong>send-chan</strong> channel and publishes them on <strong>topic</strong> for the specified configuration <strong>conn</strong>.</p>

<p>Here&#8217;s the other side of the communication with the component subscribing to the same topic. The channels component stays the same. The component itself looks a little different:</p>

<figure class='code'><figcaption><span>Subscribing Interop Component</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/MainApp/src/clj/birdwatch/interop/component.clj'>component.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Interop</span> <span class="p">[</span><span class="nv">conf</span> <span class="nv">channels</span> <span class="nv">listener</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">conn</span> <span class="p">{</span><span class="ss">:pool</span> <span class="p">{}</span> <span class="ss">:spec</span> <span class="p">{</span><span class="ss">:host</span> <span class="p">(</span><span class="ss">:redis-host</span> <span class="nv">conf</span><span class="p">)</span> <span class="ss">:port</span> <span class="p">(</span><span class="ss">:redis-port</span> <span class="nv">conf</span><span class="p">)}}</span>
</span><span class='line'>               <span class="nv">listener</span> <span class="p">(</span><span class="nf">red/subscribe-topic</span> <span class="p">(</span><span class="ss">:receive</span> <span class="nv">channels</span><span class="p">)</span> <span class="nv">conn</span> <span class="s">&quot;matches&quot;</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">conn</span> <span class="ss">:listener</span> <span class="nv">listener</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span>  <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stopping Interop Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">red/unsubscribe</span> <span class="nv">listener</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">red/close</span> <span class="nv">listener</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">nil</span> <span class="ss">:listener</span> <span class="nv">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like for the publisher side, there&#8217;s the configuration map. Next, we subscribe to a topic and hold on to the returned listener so that we can unsubscribe from the topic and shut it down later when the component is shut down<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<figure class='code'><figcaption><span>Subscription-related Functions</span><a href='https://github.com/matthiasn/BirdWatch/blob/4ce6d8ff70359df9f98421c12984d24d0f311f6f/Clojure-Websockets/TwitterClient/src/clj/birdwatch_tc/interop/redis.clj'>redis.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">msg-handler-fn</span>
</span><span class='line'>  <span class="s">&quot;create handler function for messages from Redis Pub/Sub&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">receive-chan</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">msg-type</span> <span class="nv">topic</span> <span class="nv">payload</span><span class="p">]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="nv">msg-type</span> <span class="s">&quot;message&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">put!</span> <span class="nv">receive-chan</span> <span class="nv">payload</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">subscribe-topic</span>
</span><span class='line'>  <span class="s">&quot;subscribe to topic, put items on specified channel&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">receive-chan</span> <span class="nv">conn</span> <span class="nv">topic</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">car/with-new-pubsub-listener</span>
</span><span class='line'>    <span class="p">(</span><span class="ss">:spec</span> <span class="nv">conn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;matches&quot;</span> <span class="p">(</span><span class="nf">msg-handler-fn</span> <span class="nv">receive-chan</span><span class="p">)}</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">car/subscribe</span> <span class="nv">topic</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">unsubscribe</span>
</span><span class='line'>  <span class="s">&quot;unsubscribe listener from all topics&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">listener</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">car/with-open-listener</span> <span class="nv">listener</span> <span class="p">(</span><span class="nf">car/unsubscribe</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">close</span>
</span><span class='line'>  <span class="s">&quot;close listener&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">listener</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">car/close-listener</span> <span class="nv">listener</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Performance of Redis</h2>

<p>Redis does a lot with very little CPU utilization. In a non-scientific test, I fired up 50 JVMs (on four machines) subscribing to the topic on which the TwitterClient publishes tweets with matched percolation queries. Then I changed the tracked term from the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong> to <strong>&#8220;love&#8221;</strong>, which reliably maxes out the rate of tweets permitted. Typically, with this term I see around 60 to 70 tweets per second. With 50 connected processes, 3000 to 3500 tweets were delivered per second overall, yet the CPU utilization of Redis idled somewhere between 1.7% and 2.3%.</p>

<h2>Conclusion</h2>

<p>I&#8217;m glad I got around to the process separation last weekend. It was fun to do and gives me confidence to proceed with the design I have in mind. Very little had to change in order to break the application apart, thanks to <strong>Component</strong> and <strong>core.async</strong>. In one of my next articles, I will describe the <strong>Docker</strong> configuration for running a <strong>TwitterClient</strong> container, a couple of containers with the client-serving JVMs connecting over <strong>Redis</strong>, a container with <strong>Redis</strong> itself and another container with <strong>nginx</strong> for load-balancing, plus a few containers for running an <strong>ElasticSearch</strong> cluster. Subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> or <strong><a href="https://twitter.com/matthiasnehlsen">follow me on Twitter</a></strong> if you want to be informed once the next article is out. The code of the fully functioning application is on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>. Let me know if you run into any issues when trying it out.</p>

<p>Cheers and have a great weekend,
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The beauty of the component library is that during development, we can stop a component and restart it after reloading the code. This takes much less time than completely reloading the application. Watch <strong><a href="https://www.youtube.com/watch?v=13cmHf_kt-Q">Stuart Sierra&rsquo;s talk</a></strong> for more information on the component library. I also created a <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Sierra_Stuart/Components.md">transcript of this talk</a></strong> if you prefer reading.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure Part 3 - Redesign]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/30/Building-Systems-in-Clojure-3/"/>
    <updated>2014-10-30T19:06:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/30/Building-Systems-in-Clojure-3</id>
    <content type="html"><![CDATA[<p>I recently did a lot of transcript proofreading concerning enlightening talk for my <strong><a href="https://github.com/matthiasn/talk-transcripts">talk-transcripts project</a></strong>. The most recent one was <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/DesignCompositionPerformance.md">Design, Composition and Performance</a></strong>, the tenth transcript of a talk by <strong><a href="https://twitter.com/richhickey">Rich Hickey</a></strong>. That one in particular got me thinking that there are quite a few ideas I want to adopt in <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>, the application about which I started writing this series of articles. That calls for some <strong>redesign</strong>, so it’s probably time to make up my mind what exactly it is that I am trying to solve with this application.</p>

<!-- more -->


<p>So here’s the idea:</p>

<ul>
<li>We have a stream of information and we are interested in a subset of that information, which we can match on via <strong>full-text search</strong> and <strong>ranges</strong>. The searches are anything that <strong><a href="http://www.elasticsearch.com">ElasticSearch</a></strong> / <strong><a href="http://lucene.apache.org">Lucene</a></strong> can match on.</li>
<li>Furthermore, we are interested in <strong>live results</strong> plus a certain period of time back into the <strong>recent</strong> past. For now, we are using tweets from the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong>, but the source could be anything, such as other social media data. Sensor data could also be really interesting. Live means new matches are added to the displayed results within about a second.</li>
<li>The results are supposed to be shown in a browser, including on <strong>mobile devices</strong>. The number of items reasoned about should <strong>not be limited by</strong> the available <strong>memory</strong> of the browser<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li>My immediate goal is to be able to reason about the <strong>last one million tweets</strong> for a certain topic. Also, it should be possible to serve <strong>many concurrent ad-hoc queries</strong>, like hundreds or more different ones.</li>
</ul>


<p>I am not quite sure yet how all these requirements can be brought together, but I am going to find out and I am inviting you to join me and discuss all aspects of the application with me.</p>

<p>What comes to mind immediately when regurgitating the requirements above is <strong><a href="https://storm.apache.org">Storm</a></strong> and the <strong><a href="http://lambda-architecture.net">Lambda Architecture</a></strong>. First I thought, great, such a search could be realized as a <strong>bolt</strong> in Storm. But then I realized, and please correct me if I’m wrong, that topologies are fixed once they are running. This limits the flexibility to add and tear down additional live searches. I am afraid that keeping a few stand-by bolts to assign to queries dynamically would not be flexible enough.</p>

<p>So instead I suggest doing the <strong>final aggregation</strong> (the reduce phase) on the browser side in a <strong>ClojureScript</strong> application. On the server side, partial results are aggregated for shorter time periods. These partial results can be generated in a cluster of nodes whilst the client is fed with live data immediately. Let&#8217;s have a look at a drawing before I walk you through the individual steps:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/redesign.png" title="Redesigned Architecture" alt="Redesigned Architecture"></p>

<p>The redesign also involves splitting the application into two or three different applications. Let&#8217;s go through the interactions of the entire system step by step:</p>

<ol>
<li><p>Tweets are received from the Twitter Streaming API in chunks of (oftentimes incomplete) JSON. A <strong>stateful transducer</strong> is used to reassemble the JSON and parse chunks into Clojure maps. This aspect of the application has already been described in <strong><a href="http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2/">this recent article</a></strong> and will not be affected by the redesign.</p></li>
<li><p>Tweets are stored in <strong><a href="http://www.elasticsearch.com">ElasticSearch</a></strong> in their respective index. If the received tweet contains a retweet, the retweet status will be used to update an existing item (e.g. the RT count).</p></li>
<li><p>The newly received tweet is presented to ElasticSearch&#8217;s <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html">percolation index</a></strong> in order to find clients interested in this tweet. It is kind of a reverse matching where the new item is matched against <strong>existing searches</strong>.</p></li>
<li><p>Together with information on matched queries the tweet is published using <strong><a href="http://redis.io/topics/pubsub">Redis&#8217;s Pub/Sub</a></strong> feature. Potentially, the search ID of the matches could be used to publish to different topics<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. This constitutes the border of the first Clojure application.</p></li>
<li><p>The second Clojure application, which serves the client-side ClojureScript application as well, receives a new search via a <strong>WebSocket</strong> connection.</p></li>
<li><p>It then <strong>registers</strong> the query in ElasticSearch&#8217;s <strong>percolation</strong> index.</p></li>
<li><p>Next, the socket connection <strong>subscribes</strong> to the search ID&#8217;s topic in Redis&#8217;s <strong>Pub/Sub</strong> feature.</p></li>
<li><p>From now on matches to the client&#8217;s search will be delivered immediately to the client-side ClojureScript application.</p></li>
<li><p>This next step may or may not live in the same JVM - I haven&#8217;t decided yet. So the idea is to <strong>aggregate data on the server side</strong> and only deliver the aggregated data structures back to the client side. For example, this could be a few hundred aggregates over increments of five minutes each. These increments can easily be made addressable (and cacheable): let&#8217;s say it is 1:17pm. Then, we have a last and incomplete increment from 1:15pm that will be added upon in the browser whereas all previous ones are complete and fixed. By treating the complete ones as <strong>immutable</strong>, we can cache them and forego unnecessary and expensive requests to ElasticSearch. Since these immutable previous chunks can be addressed individually, it may make sense to deliver them through REST endpoints instead of via the WebSocket connection (the dashed line)<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p></li>
<li><p>We&#8217;ve already established that previous chunks can be cached. <strong><a href="http://redis.io">Redis</a></strong> seems like a great match utilizing the <strong><a href="http://redis.io/commands/expire">EXPIRE feature</a></strong>. So Redis would be queried for the presence of a certain chunk first. If it exists, it will be delivered right away. If not, ElasticSearch will be queried and the result will be delivered and stored in Redis for the next couple of hours or so in order to avoid unnecessary load on the ElasticSearch cluster.</p></li>
<li><p>Finally, the aggregate is delivered to the client. This could either be through the WebSocket connection or through <strong><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a></strong> (the dashed line).</p></li>
</ol>


<h2>Conclusion</h2>

<p>So far, this is just an idea of where the application might go. I can&#8217;t wait to get started with implementing the changes; this should be a lot of fun. Completely <strong>decoupling</strong> the processes between a Twitter client and the client-serving part allows restarting the latter <strong>without disconnecting</strong> from the Streaming API. The decoupling also is much better for <strong>scaling</strong>. There&#8217;s only one connection to the Streaming API at any one time, but there&#8217;s no reason why it shouldn&#8217;t be possible to serve more clients than any one JVM/box could handle.</p>

<p>I feel confident that this will work, but I&#8217;d also <strong>love to hear from you</strong> if you think any of this is a bad idea (or any kind of comment you may have). In particular, I&#8217;d also like to hear about ideas of how to separate the application. Should this be by way of separate Leiningen projects or separate profiles in one project? Or should this be some kind of a polymorphic monolith that will only know its particular behavior via runtime configuration? I see the polymorphic monolith as an anti-pattern though, so probably not. Right now I favor completely separate projects as that makes it easier to reason about the boundaries of each application.</p>

<p>If you wonder about the next steps in the design of this application, you can subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> or <strong><a href="https://twitter.com/matthiasnehlsen">follow me on Twitter</a></strong> and I will let you know when the next article is out.</p>

<p>Cheers and have a great weekend,<br>
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Right now with all tweets loaded onto the client, the maximum for a desktop browser is somewhere in the range of a <strong>few tens of thousands</strong> of tweets before the application slows down noticably.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I&rsquo;m undecided about this one. On one hand, it is strikingly simple to have a topic per search ID, which is a hash of the query itself. But on the other hand, this likely involves <strong>book-keeping</strong> of the subscriptions on the consuming side, where the subscription would have to be removed once the client disconnects. Maybe it is simpler to just serialize a set of IDs with the tweet and publish that on a single topic.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Using REST makes the communication somewhat more complex, but I still think it would make sense to move this aspect of the application into separate JVM. The <strong>GC characteristics</strong> of aggregating large amounts of data in spikes are vastly different from the (near-) realtime aspects of the WebSocket delivery of new tweets. For the aggregation, it would not matter much for the user experience if there was a <strong>stop-the-world</strong> garbage collection pause of even a few seconds, but I don&rsquo;t want that to happen for the streaming data.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Talk Transcripts, Clojure Architecture, OS X Yosemite]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/23/weekly-update/"/>
    <updated>2014-10-23T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/23/weekly-update</id>
    <content type="html"><![CDATA[<p>As I have no other article to publish this week, I thought a weekly update would be in order. Last week I wrote about <strong><a href="http://matthiasnehlsen.com/blog/2014/10/15/talk-transcripts/">making relevant and interesting talks more accessible</a></strong>. In the course of that project, I had <strong>eleven</strong> talks transcribed so far, four more than when I announced the project last week. Not only have I received great feedback about how appreciated this is, I have also learned a lot myself while proofreading the transcripts.</p>

<!-- more -->


<p>With all the stuff that I have learned and that I am still learning (with a few more talks in the pipeline), there are a couple of things that I want to rethink regarding the architecture of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch application</a></strong> before I continue with describing the architecture further. So let me think first before I publish the next article on the application&#8217;s architecture. No worries, I expect to have the next one out next week, or the week after that the lastest.</p>

<h2>Thoughts from Guy Steele&#8217;s talk on Parallel Programming</h2>

<p>The talk that got me thinking the most about the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch application</a></strong>&#8217;s architecture is Guy Steele&#8217;s talk about <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Steele_Guy/ParallelProg.md">Parallel Programming</a></strong>. Not only does he give a great explanation of the differences between parallelism and concurrency, he also gives great insights into the use of accumulators. So what, according to him, is concurrency? <strong>Concurrency</strong> is when multiple entities, such as users or processes, compete for scarce resources. In that case, we want efficient ways of utilizing the scarce resources (CPU, memory bandwidth, network, I/O in general) so that more of the entities can be served simultaneously time on the same box or number of boxes.</p>

<p><strong>Parallelism</strong>, on the other hand, is when there are vast resources and we want to allocate as many of them as possible to the same number of entities. For example we could have a CPU-bound operation, a single user and 8, 12 or however many cores. If the operation is single-threaded, we won&#8217;t be able to utilize the resources well at all.</p>

<p>We could, of course, split up the computation so that it runs on all the cores (maybe even on hundreds of boxes and thousands of cores), but that&#8217;s easier said than done. Which brings me to accumulators. The <strong><a href="http://en.wikipedia.org/wiki/Accumulator_(computing)">accumulator</a></strong>, as the name suggests, is where intermediate results are stored while a computation is ongoing. As Guy points out, this has served us extremely well for as long as we didn&#8217;t have to think about parallelism. If the computation happens serially in a single thread, the accumulator is great, but what do we do when we want to spawn 20 threads on a 32-core machine, or 1000 thread on 100 machines? If each of them had to work with the same accumulator, things would become messy and the accumulator would become the source of contention, with all kinds of ugly coordination and locking. That doesn&#8217;t scale at all.</p>

<p>Guy suggests using <strong>divide-and-conquer</strong> instead so that each process in a parallelized approach only creates a partial result which will be combined with other partial results later. He argues for <strong>MapReduce in the small</strong> in addition to MapReduce in the large. I think this makes a lot of sense. That way, the partial results are created in the map phase on a number of threads (potentially on many machines) and the reduction is where the partial results are combined into a final result.</p>

<p>I had been thinking along these lines for a while already when thought about moving parts of the computation in BirdWatch for previous tweets (wordcount, retweet count, reach,&#8230;) to the server side as the current approach uses way more network bandwidth than strictly necessary. I was mostly thinking about it in terms of <strong>mergeability between partial results</strong>, which implies that the merge operation between two partial results is both <strong>associative</strong> and <strong>commutative</strong>.</p>

<p>To explain <strong>associative</strong>, let&#8217;s say we have partial results A, B, C, D and we can merge them in any way we want, for example (A + B) + C + D or A + (B+ (C + D)) or whatever. As another example, let&#8217;s say you have a script with 100 pages in 10 stacks. It doesn&#8217;t matter in which way we build intermediate piles as long as we only merge neighboring piles so that the pile with the higher page count goes under the one with the lower page count.</p>

<p><strong>Commutative</strong> means that order does not matter. For example, these are all the same: 11 + 5 + 16 + 10 and 10 + 16 + 5 + 11 are the same - both add up to 42.</p>

<p>After listening to Guy Steele&#8217;s talk and proof-reading the <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Steele_Guy/ParallelProg.md">transcript</a></strong>, I don&#8217;t want to push the redesign any further but instead tackle it right away. I think it should be possible to divide the aggregation tasks in BirdWatch in smaller chunks that can then be combined in an associative and commutative way on the client (in ClojureScript), and I have an idea of how to do that. But let me get back into the hammock<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and ponder that idea some more. I&#8217;ll certainly let you know what I come up with.</p>

<h2>Update to OS X Yosemite</h2>

<p>Last weekend I updated my production laptop to Yosemite. Of course, I did a full backup with <strong><a href="http://bombich.com">Carbon Copy Cloner</a></strong> first and I also made sure that my old backup laptop was still working before I embarked on the update adventure, just in case. That turned out to be a good idea.</p>

<p>The system upgrade did not cause any actual trouble, all went smoothly and I also think that the new design looks great. <strong>BUT IT TOOK FOREVER</strong>. The time estimation was so off, it was worse than the worst Windows installation experiences ever. Overall it probably took <strong>six or seven hours</strong>. Apparently, this had to do with <strong><a href="http://brew.sh">homebrew</a></strong>, check out <strong><a href="http://blog.pythonaro.com/2014/10/read-this-before-you-upgrade-to-osx.html">this article</a></strong> for more information<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>Luckily I had read about the upgrade taking longer in a forum somewhere, so I wasn&#8217;t too worried and just let the installer do its thing. If you plan on doing the upgrade, I think it will be worth it, but <strong>only</strong> do it when you don&#8217;t need your machine for a while, like overnight (or you follow the instructions in the article above). All works nicely on my machine now as well, even without doing anything special, just with the consequence of giving me a free afternoon because of not being able to get any work done.</p>

<p>Also, you can press <strong>CMD-l</strong> to get a console output, which I found much more reassuring than having the installer tell me it&#8217;ll need another 2 minutes that turn into 2 hours.</p>

<h2>Conclusion</h2>

<p>Okay, that&#8217;s it for today. There are some additions to the <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure Resources</a></strong> project and I have also added links to the talk transcripts in there. Please check out the <strong><a href="https://github.com/matthiasn/talk-transcripts">talk-transcripts</a></strong> if you haven&#8217;t done so already. I would love to hear from you if any of these transcripts helped you at all and made the content more accessible than it would have been otherwise.</p>

<p>Until next week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you&rsquo;ve never listened to Rich Hickey&rsquo;s talk about <strong>Hammock-driven development</strong>, you really should. Now there&rsquo;s also a <strong><a href="https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/HammockDrivenDev.md">transcript for that talk</a></strong>. You find the link to the video recording alongside the transcript.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Thanks to <strong><a href="https://twitter.com/RobStuttaford">@RobStuttaford</a></strong> for pointing this out.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk Transcripts: Rich Hickey, David Nolen & more]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/15/talk-transcripts/"/>
    <updated>2014-10-15T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/15/talk-transcripts</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> I wanted to study the content of some talks in written form but there were no transcripts available. However, I believe that the valuable and relevant content of these talks should be accessible to everyone, including those for whom &#8216;sit back and listen&#8217; might not be the most viable option. To make that a reality, I had transcripts made. So far, I have compiled five talks by <strong>Rich Hickey</strong>, one talk by <strong>David Nolen</strong> and another talk by <strong>Guy Steele</strong>. The transcripts are <strong><a href="https://github.com/matthiasn/talk-transcripts">available on GitHub</a></strong>.</p>

<!-- more -->


<h2>Background</h2>

<p>For my <strong><a href="http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2/">previous article</a></strong>, I listened to Rich Hickey&#8217;s <strong><a href="https://www.youtube.com/watch?v=6mTbuzafcII">talk about Transducers</a></strong> a few times and each time I discovered something new, which made me wonder about my perception. After thinking about it for a little while, I noticed a pattern.</p>

<p>My retention rate when reading thoroughly (that is, with a marker and a pen on real paper) is MUCH higher than when listening to a talk. Listening to a talk repeatedly is like skimming a text repeatedly, it just does not yield the same result as reading thoroughly. My theory is that talks are pretty much always too fast or too slow at any given point in time. Something is either all new with background information mentioned that I would want to read about first or I already know what is being talked about. The danger for me lies in the latter. My mind tends to wander off, particularly when watching the recording of a talk, and my thoughts tend to be so engaging that I miss crucial information in the talk.</p>

<p>There&#8217;s really not a lot the presenter can do about that. Listening to a talk is valuable in its own right as it conveys emotion and can be quite entertaining and enlightening. I just feel it is not ideal when a lot of crucial information is only made available through a talk.</p>

<p>But there&#8217;s one thing that would help me immensely: a <strong>transcript</strong> of the talk. With that, I’d watch the talk once and then mark the sections in the transcript I want to read up upon, probably with a good old marker. That way, it should be next to impossible to miss something. In my case at least, my marker hardly ever misses anything, and whenever my thoughts go elsewhere, it is very easy to mark where I stopped in the document and go back there later.</p>

<p>But transcripts of the talks I was interested in just weren&#8217;t available. Which makes me wonder what you do when you&#8217;re a software engineer AND deaf. In the <strong><a href="https://www.youtube.com/watch?v=6mTbuzafcII">Transducers talk</a></strong> in particular, there was plenty of information that I hadn&#8217;t come across anywhere else. I don&#8217;t think we as a community should exclude people just because of their inability to hear. In other words, in think these transcripts should really be available.</p>

<p>Now, I like solutions rather than problems so I hired freelancers to transcribe some talks for me. I then did the proofreading and put the transcripts on <strong><a href="https://github.com/matthiasn/talk-transcripts">GitHub</a></strong>. From a financial standpoint, I thought that I&#8217;d do an experiment: I was prepared to spend up as much for transcripts as I typically spend on a conference. With seven talks already transcribed, I still spent 50% less than I would have been willing to spend. Moreover, because I proofread the transcripts, I have already learned more than what I’d say I learn at the average conference. So for me this is a huge win already, and it would make me happy if the outcome of this project benefitted others too.</p>

<p>Cheers,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure 2 - Transducers]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2/"/>
    <updated>2014-10-06T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/06/Building-Systems-in-Clojure-2</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> This article covers the usage of <strong>Transducers</strong> in Clojure, spiced up with some <strong>core.async</strong>. Here&#8217;s an animation that shows the information flow of the <strong>composed transducer</strong> that we are going to build in this article:</p>

<script language="javascript" type="text/javascript">
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    obj.style.width = obj.contentWindow.document.body.scrollWidth + 'px';
  }
</script>


<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/clj-system2/index.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>




<br/>


<br/>


<p>If any of that is of interest to you at all (or if you want to see more animations like the one above), you may want to <strong>read</strong> the following article.</p>

<!-- more -->


<p>Hello and welcome back to this series of articles about building a system in <strong><a href="http://clojure.org/">Clojure</a></strong>. The other week, we had a first look at dependency injection using the <strong><a href="https://github.com/stuartsierra/component">component library</a></strong> combined with a hint of channel decoupling power. You may want to read <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">that article first</a></strong> if you haven’t done so already.</p>

<p>In this installment, we will look into the first component, the <strong>twitter client</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It seems like the natural component to start with as it is our application’s point of entry for Twitter’s <strong><a href="https://dev.twitter.com/streaming/overview">streaming data</a></strong>. We will have to discuss the lifecycle of the component at some point, but that can also happen next week. Today, we will look at transducers, a <strong><a href="http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming">recent addition</a></strong> to Clojure. First of all, though, we will look at the problem at hand, without any language- or library-specific implementation details.</p>

<h2>Twitter Client</h2>

<p>Let’s start in <strong><a href="https://www.youtube.com/watch?v=f84n5oFoZBc">hammock mode</a></strong>, without code. What is the problem we are trying to solve? It all starts with the tweet stream from the Twitter API. Very briefly, the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> allows us to subscribe to a (near) real time stream of tweets that contain one or more terms out of a set of terms. In the live instance under <strong><a href="http://birdwatch2.matthiasnehlsen.com/#*">http://birdwatch2.matthiasnehlsen.com</a></strong> these terms at the moment happen to be &#8220;Ferguson&#8221;, &#8220;ISIS&#8221;, and &#8220;Ebola&#8221; - I am interested in all these topics. As long as that subscription does not hit a hard ceiling of <strong>1%</strong> of all the tweets flowing through twitter’s system, we can be sure that we will retrieve all of them. Otherwise the stream will be throttled to a maximum of <strong>1%</strong> of what is tweeted at any moment in time. <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Here is how that stream looks like when each chunk is simply printed to the console:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/streaming-api.gif" title="animated gif of streaming API output" alt="animated gif of streaming API output"></p>

<p>For reasons unbeknownst to me, tweets stopped respecting the chunk borders for the last half year. Instead, tweets occasionally span two or three chunks. This makes processing the tweets a little more complicated than we might wish for. One tweet per chunk is straightforward:</p>

<pre><code>Receive chunk -&gt; parse JSON into map -&gt; put on conveyor belt (channel)
</code></pre>

<p>That looks like functional programming, right? No state to be kept anywhere, just functions producing results that are passed into other functions. But as desirable as that sounds, it does not align with reality. Instead, we need logical reasoning and state. What is the instruction we would give a sentient being? Imagine an intelligent agent standing between two conveyor belts. Imagine that agent being you. Here we go:</p>

<p>“On your left side, there’s a conveyor belt that keeps delivering hundred dollar bills. Put all of them on the other conveyor belt. Some of them come out cut into multiple pieces. These fragments are in correct order. Scotch tape is over there.”</p>

<p>I think we would all know what to do. There is a space where you park fragments of not-yet-complete bills / tweets. Then, with every new fragment, you inspect if the bill is complete and if so, put it back together and pass it on. Let’s try that in code. First, we will need to introduce <strong>transducers</strong> though.</p>

<h2>Transducers</h2>

<blockquote><p>Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts, and they&#8217;re coming to Clojure core and core.async.</p><footer><strong>Rich Hickey</strong> <cite><a href='http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming'>Cognitect Blog, August 6, 2014</a></cite></footer></blockquote>


<p>In a way, a transducer is the <strong>essence</strong> of a computation over data, without being bound to any kind of collection or data structure. Above, before we had to concern ourselves with the incomplete fragments, there was one step of the computation that we could <strong>model as a transducer</strong>: the part where we wanted to parse JSON into a map data structure.</p>

<p>Imagine we wanted to transform a vector of JSON strings into a vector of such parsed maps. We could simply do this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the above is bound to the data structure, in this case a vector. That should not have to be the case, though. Rich Hickey provides a good example in his <strong><a href="https://www.youtube.com/watch?v=6mTbuzafcII">transducers talk</a></strong>, likening the above to having to tell the guys processing luggage at the airport the same instructions twice, once for trolleys and again for conveyor belts, where in reality that should not matter.</p>

<p>We could, for example, not only run the mapping function over every item in a vector but also reuse the same function on every item in a channel, stream or whatever.</p>

<p>With Clojure 1.7, we can now create such a transducing function by simply leaving out the data structure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">xform</span> <span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can apply this transducing function to different kinds of data structures that are transducible processes. For example, we could transform all entries from a vector into another vector, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="nv">xform</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or into a sequence, like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">sequence</span> <span class="nv">xform</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>It may not look terribly useful so far. But this can also be applied to a channel. Say, we want to create a channel that accepts JSON strings and transforms each message into a Clojure map. Simple:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">chan</span> <span class="mi">1</span> <span class="nv">xform</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above creates a channel with a buffer size of one that applies the transducer to every element.</p>

<p>But this does not help in our initial case here, where we know that some of the chunks are not complete but instead have to be glued together with the next one or two pieces. For that, we will need some kind of <strong>state</strong>. In the example above, that would be the space where we place fragments of a hundred dollar bill. But what if we want to see this aggregation process as a <strong>black box</strong>? Then, the aggregation cannot really have outside state. Also, as Rich Hickey mentioned in his StrangeLoop talk, there is no space in the machinery to keep state. What if one such transducer could have local state even if that is contained and not accessible from the outside? It turns out this is where stateful transducers can help.</p>

<p>Here’s how that looks like in code:</p>

<figure class='code'><figcaption><span>stateful streaming-buffer transducer</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">streaming-buffer</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">buff</span> <span class="p">(</span><span class="nf">atom</span> <span class="s">&quot;&quot;</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">fn</span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span> <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">json-lines</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">str </span><span class="o">@</span><span class="nv">buff</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">insert-newline</span><span class="p">)</span> <span class="p">(</span><span class="nf">str/split-lines</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">to-process</span> <span class="p">(</span><span class="nb">butlast </span><span class="nv">json-lines</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">reset!</span> <span class="nv">buff</span> <span class="p">(</span><span class="nb">last </span><span class="nv">json-lines</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="k">if </span><span class="nv">to-process</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">step</span> <span class="nv">r</span> <span class="nv">to-process</span><span class="p">)</span> <span class="nv">r</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go through this line by line. We have a (private) function named <strong>streaming-buffer</strong> that does not take any arguments. It returns a function that accepts the step function. This step function is the function that will be applied to every step from then on. This function then first creates the local state as an atom<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> which we will use as a buffer to store incomplete tweet fragments. It is worth noting that we don&#8217;t have to use <strong>atoms</strong> here if we want to squeeze out the last bit of performance, but I find it easier not to introduce yet another concept unless absoletely necessary<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. Next, this function returns another function which accepts two parameters, r for result and x for the current data item (in this case the - potentially incomplete - chunk).</p>

<p>In the first line of the let binding, we use the <strong><a href="http://clojuredocs.org/clojure.core/-%3E">-> (thread-first)</a></strong> macro. This macro makes the code more legible by simply passing the result of each function call as the first argument of the next function. Here, specifically, we <strong>1)</strong> concatenate the buffer with the new chunk, <strong>2)</strong> add newlines where missing<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, and <strong>3)</strong> split the string into a sequence on the line breaks.</p>

<p>Now, we cannot immediately process all those items in the resulting sequence. We know that all are complete except for the last one as otherwise there would not have been a subsequent tweet. But the last one may not be complete. Accordingly, we derive</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">butlast </span><span class="nv">json-lines</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>under the name <strong>to-process</strong>. Then, we reset the buffer to whatever is in that last string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">buff</span> <span class="p">(</span><span class="nb">last </span><span class="nv">json-lines</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we have <strong>reduce</strong> call the <strong>step</strong> function for every item in <strong>to-process</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">if </span><span class="nv">to-process</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">step</span> <span class="nv">r</span> <span class="nv">to-process</span><span class="p">)</span> <span class="nv">r</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way, only complete JSON strings are pushed down to the next operation, whereas intermediate JSON string fragments are kept locally and not passed on until certainly complete. That&#8217;s all that was needed to make the tweets whole again. Next, we compose this with the JSON parsing transducer we have already met above so that this <strong>streaming-buffer</strong> transducer runs first and passes its result to the <strong>JSON parser</strong>.</p>

<p>Let&#8217;s create a vector of JSON fragments and try it out. We have already established that transducers can be used on different data structures, it therefore should work equally well on a vector. Here&#8217;s the vector for the test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;&quot;</span> <span class="s">&quot;:1}\n{\&quot;bar\&quot;:&quot;</span> <span class="s">&quot;42}&quot;</span> <span class="s">&quot;{\&quot;baz\&quot;:42}&quot;</span> <span class="s">&quot;{\&quot;bla\&quot;:42}&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can check on the REPL if this will produce three complete JSON strings. It is expected here that the last one is lost because we would only check its completeness once there is a following tweet<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>. Once the collection to process is empty, the <strong>arity-1</strong> (single argument) function is called one last time, which really only returns the aggregate at that point:</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"foo\"" ":1}\n{\"bar\":" "42}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (into [] (streaming-buffer) chunks)
["{\"foo\":1}" "{\"bar\":42}" "{\"baz\":42}"]
</code></pre>

<p>What somewhat confused me at first is what the step function actually was. Let&#8217;s find out by printing it when the arity-1 function is called. We can modify the fourth line of <strong>stream-buffer</strong> like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>      <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">step</span><span class="p">)</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we run the same as above on the REPL, we can see what the step function actually is:</p>

<pre><code>birdwatch.twitterclient.processing=&gt; (into [] (streaming-buffer) chunks)
#&lt;core$conj_BANG_ clojure.core$conj_BANG_@5fd837a&gt;
["{\"foo\":1}" "{\"bar\":42}" "{\"baz\":42}"]
</code></pre>

<p>Interestingly, the step function is <strong>conj!</strong> which according to the <strong><a href="https://github.com/clojure/clojure/blob/clojure-1.7.0-alpha2/src/clj/clojure/core.clj#L3208">source</a></strong> adds <strong>x</strong> to a <strong>transient collection</strong><sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>.</p>

<p>The step function is different when we use the transducer on a channel, but more about that when we use it in that scenario.</p>

<p>There&#8217;s more to do before we can <strong>compose all transducers</strong> and attach them to the appropriate channel. Specifically, we can receive valid JSON from Twitter, which is not a tweet. This happens, for example, when we get a notification that we lag behind in consuming the stream. In that case we only want to pass on the parsed map if it is likely that it was a tweet and otherwise log it as an error. There is one <strong>key</strong> that all tweets have in common, which does not seem to appear in any status messages from Twitter: <strong>:text</strong>. We can thus use that key as the <strong>predicate</strong> for recognizing a tweet:</p>

<figure class='code'><figcaption><span>tweet? predicate function</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">tweet?</span> <span class="p">[</span><span class="nv">data</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Checks if data is a tweet. If so, pass on, otherwise log error.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">text</span> <span class="p">(</span><span class="ss">:text</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when-not </span><span class="nv">text</span> <span class="p">(</span><span class="nf">log/error</span> <span class="s">&quot;error-msg&quot;</span> <span class="nv">data</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">text</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we also want to log the count of tweets received since the application started. Let&#8217;s do this only for full thousands. We will need some kind of counter to keep track of the count. Let&#8217;s create another <strong>stateful transducer</strong>:</p>

<figure class='code'><figcaption><span>stateful count transducer</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">log-count</span> <span class="p">[</span><span class="nv">last-received</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Stateful transducer, counts processed items and updating last-received atom. Logs progress every 1000 items.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cnt</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">fn </span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span> <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">swap!</span> <span class="nv">cnt</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="o">@</span><span class="nv">cnt</span> <span class="mi">1000</span><span class="p">))</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;processed&quot;</span> <span class="o">@</span><span class="nv">cnt</span> <span class="s">&quot;since startup&quot;</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">reset!</span> <span class="nv">last-received</span> <span class="p">(</span><span class="nf">t/now</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span> <span class="nv">x</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This transducer is comparable to the one we saw earlier, except that the local atom now holds the count. Initially, the counter is incremented and then, when the counter is divisible by 1000, the count is logged. In addition, this function also resets the <strong>last-received</strong> timestamp. Of course, this could be factored out into a separate function, but I think this will do.</p>

<p>Now, we can compose all these steps:</p>

<figure class='code'><figcaption><span>composed transducer</span><a href='https://github.com/matthiasn/BirdWatch/blob/f39a5692e4733784124d0f0930202d4270762d77/Clojure-Websockets/src/clj/birdwatch/twitterclient/processing.clj'>processing.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">process-chunk</span> <span class="p">[</span><span class="nv">last-received</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Creates composite transducer for processing tweet chunks. Last-received atom passed in for updates.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">comp</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">streaming-buffer</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">filter </span><span class="nv">tweet?</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">log-count</span> <span class="nv">last-received</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above creates a composed function that takes the timestamp atom provided by the TwitterClient component as an argument. We can now use this <strong>transducing function</strong> and apply it to different data structures. Here, we use it to create a channel that takes tweet chunk fragments and delivers parsed tweets on the other side of the conveyor belt.</p>

<p>Let&#8217;s try the composed transducer on a vector to see what&#8217;s happening. For that, we create a vector with two JSON strings that contain the <strong>:text</strong> property and two that don&#8217;t.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;{\&quot;text\&quot;&quot;</span> <span class="s">&quot;:\&quot;foo\&quot;}\n{\&quot;text\&quot;:&quot;</span> <span class="s">&quot;\&quot;bar\&quot;}&quot;</span> <span class="s">&quot;{\&quot;baz\&quot;:42}&quot;</span> <span class="s">&quot;{\&quot;bla\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we should see that the invalid one is logged and the other two are returned (the final one at that point still in the buffer):</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"text\"" ":\"foo\"}\n{\"text\":" "\"bar\"}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (into [] (process-chunk (atom (t/epoch))) chunks)
20:57:39.999 [nREPL-worker-1] ERROR birdwatch.twitterclient.processing - error-msg {:baz 42}
[{:text "foo"} {:text "bar"}]
</code></pre>

<p>Great, we have a composed transducer that works on vectors as expected. According to Rich Hickey this should work equally well on channels. But let&#8217;s not take his word for it and instead try it out. First, here&#8217;s my attempt to visualize the usage of a transducer in a channel. To make things easier, no errors occur.</p>

<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/clj-system2/channel.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>


<p>Now for a simple example in the REPL:</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"text\"" ":\"foo\"}\r\n{\"text\":" "\"bar\"}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (require '[clojure.core.async :as async :refer [chan go-loop &lt;! put!]])
nil

birdwatch.twitterclient.processing=&gt; (def c (chan 1 (process-chunk (atom (t/now)))))
#'birdwatch.twitterclient.processing/c

birdwatch.twitterclient.processing=&gt; (go-loop [] (println (&lt;! c)) (recur))
#&lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@2f924b3f&gt;

birdwatch.twitterclient.processing=&gt; (put! c (chunks 0))
birdwatch.twitterclient.processing=&gt; (put! c (chunks 1))
{:text foo}

birdwatch.twitterclient.processing=&gt; (put! c (chunks 2))
birdwatch.twitterclient.processing=&gt; (put! c (chunks 3))
{:text bar}

birdwatch.twitterclient.processing=&gt; (put! c (chunks 4))
16:44:32.539 [nREPL-worker-2] ERROR birdwatch.twitterclient.processing - error-msg {:baz 42}
</code></pre>

<p>Excellent, same output. In case you&#8217;re not familiar with <strong>core.async channels</strong> yet: above we created a channel with the same transducer attached as in the previous example, then we created a <strong>go-loop</strong> to consume the channel and finally, we <strong>put!</strong> the individual chunks on the channel. No worries if this seems a little much right now. Just come back for the next articles where we&#8217;ll cover this topic in much more detail.</p>

<h2>Conclusion</h2>

<p>Okay, this is it for today. We saw how we can process tweets from the <strong><a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a></strong> in a way that is generic and that can be used on different kinds of data structures. Next week, we will use this composed transducer in the context of our application. Then, we will process real data from the Twitter streaming API and feed the processed data into the channels architecture of our application. There is a <strong><a href="http://birdwatch2.matthiasnehlsen.com">live version for you to try out</a></strong> and of course the source code is on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>.</p>

<p>There is a lot more reading material available on the subjects we covered. Instead of providing all the links now, I&#8217;d rather refer you to my list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure Resources on GitHub</a></strong>. There, you&#8217;ll find a comprehensive list of all the articles I came across while working on this application.
I hope you found this useful. If you did, why don’t you subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> so I can tell you when the next article is out?</p>

<p>Cheers,
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>




<div class="sharing">
  <iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" src="http://platform.twitter.com/widgets/tweet_button.2df3b13213b70e6d91180bf64c17db20.en.html#_=1412769297267&amp;count=horizontal&amp;counturl=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2%2F&amp;id=twitter-widget-0&amp;lang=en&amp;original_referer=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2%2F&amp;size=m&amp;text=Building%20a%20System%20in%20%23Clojure%202%20-%20Transducers%20-%20Matthias%20Nehlsen&amp;url=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2%2F&amp;via=matthiasnehlsen" class="twitter-share-button twitter-tweet-button twitter-share-button twitter-count-horizontal" title="Twitter Tweet Button" data-twttr-rendered="true" style="width: 107px; height: 20px;"></iframe>

  <div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px; background-position: initial initial; background-repeat: initial initial;"><iframe frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" tabindex="0" vspace="0" width="100%" id="I0_1412769297421" name="I0_1412769297421" src="https://apis.google.com/u/0/se/0/_/+1/fastbutton?usegapi=1&amp;size=medium&amp;origin=http%3A%2F%2Fmatthiasnehlsen.com&amp;url=http%3A%2F%2Fmatthiasnehlsen.com%2Fblog%2F2014%2F10%2F06%2FBuilding-Systems-in-Clojure-2&amp;gsrc=3p&amp;ic=1&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en.eZie-eg_6M4.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Ft%3Dzcms%2Frs%3DAItRSTOh4SCUosWCqh1KPQ0Sr-K9eQ0Nsg#_methods=onPlusOne%2C_ready%2C_close%2C_open%2C_resizeMe%2C_renderstart%2Concircled%2Cdrefresh%2Cerefresh%2Conload&amp;id=I0_1412769297421&amp;parent=http%3A%2F%2Fmatthiasnehlsen.com&amp;pfname=&amp;rpctoken=39213785" data-gapiattached="true" title="+1"></iframe></div>

  <script type="text/javascript">
    (function() {
      var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
      script.src = 'https://apis.google.com/js/plusone.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(script, s);
    })();
  </script>

  <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = 'http://platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script>
</div>




<br>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I only recently started with Clojure. It may be possible an also quite likely that there are better ways of doing things. If so, please let me know, I want to learn stuff.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I don&rsquo;t know much about the exact mechanism at play, actual numbers or delivery guarantees. It anyhow doesn’t matter much for the purpose of this application. The interesting views focus on the most retweeted tweets. Now every retweet contains the original tweet under “retweeted_status”, with the current numbers such as retweet and favorite count for the moment in time it was retweeted. For popular ones, we thus receive the original tweet many, many times over. So even if we missed as much as half of all the tweets &ndash; which I consider unlikely &ndash; the popular tweets would only be updated less often. Worst case: retweet count is off by one or two. I can live with that. In reality, for the current selection of terms, reaching the limit also hardly ever happens. After all, 1% is still millions of tweets per day.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><strong>Atoms</strong> are essential to Clojure’s <strong>state model</strong>. Essentially, you have this managed reference that is thread-safe. Whenever we dereference such an atom, we get the state of the world this very second. Then, when you pass the dereferenced value to other parts of the application, it still represents the immutable state of the world at that point in time. It cannot change. Next time I dereference that atom, I will get the new state of the world. Updates to atoms can only happen in transactions, meaning that no two can run at the same time. Thus, we won&rsquo;t have to chase crazy concurrency issues.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>After initial experimentation with a <strong><a href="http://dev.clojure.org/jira/browse/CLJ-1512">local volatile reference</a></strong>, I decided in favor of a good old atom. The <strong>volatile!</strong> local reference trades off potential race conditions with speed. But there’s no performance issue when we process tweet chunks a few hundred times a second utmost, so why bother and introduce a new concept? Worth to keep in mind, though, when performance is an issue.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>For whatever reason, the changed behavior of the streaming API also entails that not all tweets are followed by a line break, only most of them. A tiny helper function inserts those missing linebreaks where they are missing between two tweets: <code>(str/replace s #"\}\{" "}\r\n{"))</code>.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>One could probably check if the buffer contains a valid and complete JSON string when the arity-1 function is called, and if so, pass it on. Considering though that in this application we are interested in a stream that does not have an end, I omitted this step.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>I assume the <strong>transient</strong> collection is used for performance reasons.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Staging server for this blog]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/04/weekly-update/"/>
    <updated>2014-10-04T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/04/weekly-update</id>
    <content type="html"><![CDATA[<p>This weekly update is mostly about organizational issues with regard to publishing articles and getting feedback for unfinished articles.</p>

<!-- more -->


<p>The other day, I published the unfinished second article in the <strong>Writing a System in Clojure</strong> series to get some preliminary feedback but without announcing the article just yet. What I did not think about, though, was that RSS aggregators notice and pick up new content nonetheless, so that was a little less than perfect on my part.</p>

<p>Ideally, I should have a different way of publishing unfinished stuff in order to get feedback and then only have finalized articles on this blog.</p>

<p>So I came up with something different: a <strong>staging server</strong>. Just like I would want a test environment when developing an application, I also want a test environment for new articles. So I&#8217;ve removed the unfinished article from master for now and put the unfinished article here:</p>

<p><strong><a href="http://staging.matthiasnehlsen.com/">http://staging.matthiasnehlsen.com/</a></strong></p>

<p>The implementation of the staging server took some 5 minutes. All I had to do was clone the directory on the server, check out a different branch in the cloned directory, create a new DNS entry for <strong>staging.matthiasnehlsen.com</strong>, and modify the <strong>nginx</strong> configuration so that the staging URL points to that new directory.</p>

<p>I have already got very helpful feedback, so at least publishing the unfinished article was still it. Right now I am working on adding some animations to the new article. I expect to have everything completed by Monday. I will probably split the article in two as the current article is a little too long for my taste.</p>

<h2>Conclusion</h2>

<p>While this little modification is probably not terribly useful for you, I believe it will be much more convenient for my workflow. You can also check out the staging server to see new articles in the works. Just note that sharing links may or may not lead to <strong>404&#8217;s</strong> later on as there is no guarantee whatsoever that those links will last. They should end up in master, but they may well not.</p>

<p>That&#8217;s all for now. Have a great week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure 1 - Overview]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/"/>
    <updated>2014-09-24T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1</id>
    <content type="html"><![CDATA[<p>This is the first of <strong>n</strong> articles about building <strong>systems</strong> in <strong><a href="http://clojure.org/">Clojure</a></strong>. Clojure is a beautiful language and I have been fascinated from the first moment I laid eyes on it last summer. However, what remained a mystery to me for most of the time was how to build more complex systems. I started researching the options that would allow me to structure an arbitrarily complex application in a way that is <strong>easy to understand and maintain</strong>. Here is what I found.</p>

<!-- more -->


<p>As an example for such a system, we will be looking at the Clojure rewrite of an application I wrote last year: <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>. This application subscribes to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> for all tweets that contain one or more terms out of a set of terms and makes the tweets searchable through storing them in ElasticSearch. A live version of the Clojure version of this application is available here: <strong><a href="http://birdwatch2.matthiasnehlsen.com/#*">http://birdwatch2.matthiasnehlsen.com</a></strong>.</p>

<p>In this first installment we will be looking at the basic architecture of the server side. Let&#8217;s start with an animation <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to demonstrate how components in the system get wired up when the application initializes before we go into details.</p>

<br/>




<script language="javascript" type="text/javascript">
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    obj.style.width = obj.contentWindow.document.body.scrollWidth + 'px';
  }
</script>




<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/bw-anim/index.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>




<br/>


<br/>


<p>The architecture above is a huge improvement over the first version and was only possible thanks to Stuart Sierra&#8217;s <strong><a href="https://github.com/stuartsierra/component">component library</a></strong>. This new version has cleanly separated components with no dependencies between namespace at all (except, of course, in the main namespace that wires everything together). But the individual components don&#8217;t know anything about each other except for where the components in the animation touch each other. And even there, it is mostly just plain <strong><a href="https://github.com/clojure/core.async">core.async</a></strong> channels.</p>

<p>In the initial version that I wrote, where everything depended on everything, things were very different. Some people would call that &#8220;spaghetti code&#8221;, but I think that is not doing justice to spaghetti. Unlike bad code, I don&#8217;t mind touching spaghetti. I would rather liken bad code to hairballs, of the worst kind that is. Have you ever experienced the following: you are standing in the shower and the water doesn&#8217;t drain. You notice something in the sink, so you squat down to pull it out only to start screaming, &#8220;Oh my god, it&#8217;s a dead rat&#8221; a second later. I am referring to that kind of entangled hairball mess, nothing less. On top, you may even hit your head when you jump up in disgust.</p>

<p>This is where dependency injection comes in. Can we agree that we don&#8217;t like hairballs? Good. Usually, what we are trying to achieve is a so-called inversion of control, in which a component of the application knows that it will be injected something which implements a known interface at runtime. Then, no matter what the actual implementation is, it knows what methods it can call on that something because of the implemented interface.</p>

<p>Here, unlike in object-oriented dependency injection, things are a little different because we don&#8217;t really have objects. The components play the role of objects, but as a further way of decoupling, I wanted them to only communicate via <strong>core.async</strong> channels. Channels are a great abstraction. Rich Hickey likens them to conveyor belts onto which you put something without having to know at all what happens on the other side. We will have a more detailed look at the channels in the next article. For now, as an abstraction, we can think about the channel components (the flat ones connecting the components with the switchboard) as <strong>wiring harnesses</strong>, like the one that connects the electronics of your car to your engine. The only way to interface with a modern engine (that doesn&#8217;t have separate mechanical controls) is by connecting to this wiring harness and either send or receive information, depending on the channel / cable that you interface with.</p>

<p>Let&#8217;s have a look at how the initialization of the application we have already seen in the animation looks in code:</p>

<figure class='code'><figcaption><span>Main namespace</span><a href='https://github.com/matthiasn/BirdWatch/blob/a26c201d2cc2c89f4b3d2ecb8e6adb403e6f89c7/Clojure-Websockets/src/clj/birdwatch/main.clj'>main.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">birdwatch.main</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.twitter-client</span> <span class="ss">:as</span> <span class="nv">tc</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.communicator</span> <span class="ss">:as</span> <span class="nv">comm</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.persistence</span> <span class="ss">:as</span> <span class="nv">p</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.percolator</span> <span class="ss">:as</span> <span class="nv">perc</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.http</span> <span class="ss">:as</span> <span class="nv">http</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.switchboard</span> <span class="ss">:as</span> <span class="nv">sw</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clojure.edn</span> <span class="ss">:as</span> <span class="nv">edn</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clojure.tools.logging</span> <span class="ss">:as</span> <span class="nv">log</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clj-pid.core</span> <span class="ss">:as</span> <span class="nv">pid</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">com.stuartsierra.component</span> <span class="ss">:as</span> <span class="nv">component</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">conf</span> <span class="p">(</span><span class="nf">edn/read-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;twitterconf.edn&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-system</span> <span class="p">[</span><span class="nv">conf</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Create system by wiring individual components so that component/start</span>
</span><span class='line'><span class="s">  will bring up the individual components in the correct order.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">component/system-map</span>
</span><span class='line'>   <span class="ss">:communicator-channels</span> <span class="p">(</span><span class="nf">comm/new-communicator-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:communicator</span>  <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">comm/new-communicator</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:communicator-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:twitterclient-channels</span> <span class="p">(</span><span class="nf">tc/new-twitterclient-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:twitterclient</span> <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">tc/new-twitterclient</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:twitterclient-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:persistence-channels</span> <span class="p">(</span><span class="nf">p/new-persistence-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:persistence</span>   <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">p/new-persistence</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:persistence-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:percolation-channels</span> <span class="p">(</span><span class="nf">perc/new-percolation-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:percolator</span>    <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">perc/new-percolator</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:percolation-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:http</span>          <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">http/new-http-server</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:communicator</span> <span class="ss">:communicator</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:switchboard</span>   <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">sw/new-switchboard</span><span class="p">)</span> <span class="p">{</span><span class="ss">:comm-chans</span> <span class="ss">:communicator-channels</span>
</span><span class='line'>                                                         <span class="ss">:tc-chans</span> <span class="ss">:twitterclient-channels</span>
</span><span class='line'>                                                         <span class="ss">:pers-chans</span> <span class="ss">:persistence-channels</span>
</span><span class='line'>                                                         <span class="ss">:perc-chans</span> <span class="ss">:percolation-channels</span><span class="p">})))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">system</span> <span class="p">(</span><span class="nf">get-system</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/save</span> <span class="p">(</span><span class="ss">:pidfile-name</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/delete-on-shutdown!</span> <span class="p">(</span><span class="ss">:pidfile-name</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Application started, PID&quot;</span> <span class="p">(</span><span class="nf">pid/current</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">alter-var-root</span> <span class="o">#</span><span class="ss">&#39;system</span> <span class="nv">component/start</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I personally think this <strong>reads really well</strong>, even if you have never seen Clojure before in your life. Roughly the first half is concerned with imports and reading the configuration file. Next, we have the <code>get-system</code> function which declares, what components depend on what other components. The system is finally started in the <code>-main</code> function (plus the process ID logged and saved to a file). This is all there is to know about the application entry point.</p>

<p>Now, when we start the application, all the dependencies will be started in an order that the component library determines so that all dependencies are met. Here&#8217;s the output of that startup process:</p>

<pre><code>mn:Clojure-Websockets mn$ lein run
16:46:30.925 [main] INFO  birdwatch.main - Application started, PID 6682
16:46:30.937 [main] INFO  birdwatch.twitter-client - Starting Twitterclient Channels Component
16:46:30.939 [main] INFO  birdwatch.twitter-client - Starting Twitterclient Component
16:46:30.940 [main] INFO  birdwatch.twitter-client - Starting Twitter client.
16:46:31.323 [main] INFO  birdwatch.persistence - Starting Persistence Channels Component
16:46:31.324 [main] INFO  birdwatch.persistence - Starting Persistence Component
16:46:31.415 [main] INFO  org.elasticsearch.plugins - [Chameleon] loaded [], sites []
16:46:32.339 [main] INFO  birdwatch.communicator - Starting Communicator Channels Component
16:46:32.340 [main] INFO  birdwatch.communicator - Starting Communicator Component
16:46:32.355 [main] INFO  birdwatch.http - Starting HTTP Component
16:46:32.375 [main] INFO  birdwatch.http - Http-kit server is running at http://localhost:8888/
16:46:32.376 [main] INFO  birdwatch.percolator - Starting Percolation Channels Component
16:46:32.377 [main] INFO  birdwatch.percolator - Starting Percolator Component
16:46:32.380 [main] INFO  birdwatch.switchboard - Starting Switchboard Component
</code></pre>

<p>Next week, we will look at how these components wire a channel grid and how information flows through this grid. You do not have to wait to see more code though, everything is on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong> already.</p>

<p>Once we have discussed the architecture in detail over the next couple of weeks, we can start observing the system under load. Of course, it would be interesting to have actual user load. But with or without actual load, we want to find a way of how to generate / simulate load and then observe the system, identify the bottlenecks and remove them. For example, the clients could be simulated by connecting a load generator via ZeroMQ or the like and deliver matches back to that application and check if they are as expected (correct, complete, timely). The Twitter stream could also be simulated, for example by connecting to a load generator that either replays recorded tweets, with full control over the rate, or with artificial test cases, for which we could exactly specify the expectations on the output side.</p>

<p>That&#8217;s it for now. Would you like to be informed when the next article is out? Just <strong>sign up</strong> for the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>mailing list</strong></a> and I will let you know. Also, if you are interested in Clojure, you may want to check out my curated list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">useful Clojure-related resources on GitHub</a></strong>.</p>

<p>Cheers,
Matthias</p>

<p><strong>P.S.</strong> This series of articles is now continued in this book:</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In case you are interested in the animation as such, you can check out the current <strong><a href="http://matthiasnehlsen.com/blog/2014/09/23/weekly-update/">weekly review</a></strong> in which I provide some background information.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Clojure and Dependency Injection, Animations reloaded & freeing my SSD]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/23/weekly-update/"/>
    <updated>2014-09-23T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/23/weekly-update</id>
    <content type="html"><![CDATA[<p>This weekly update is mostly about my new article series, about using animations to explain complex topics and about how I just extended the useful lifespan of my <strong>2012 Retina MacBook</strong>.</p>

<!-- more -->


<h2>New article series: building systems in Clojure</h2>

<p>I am finally all set to start my new series of articles about the rewrite of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application in <strong><a href="http://clojure.org">Clojure</a></strong>. I actually have two aims. First of all, I want short articles that are a quick and informative read, with easy-to-understand code. In addition, I want to illustrate what is going on by using <strong>animations</strong> (more about that in the next section). In this first installment, I will introduce you to my approach towards <strong><a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a></strong>. I personally believe that dependency injection is crucial for building larger applications as it allows proper decoupling between components. More about that in <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">article one of the series</a></strong>.</p>

<h2>Animations reloaded</h2>

<p>Last year, I used an animation for the first time to illustrate the flow of information within an application. Here is how that looked like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_anim.gif" title="birdwatch animated information flow" alt="birdwatch animated information flow"></p>

<p>I still think that animated illustration is a great way of showing what is going in the application. Here&#8217;s a link to the <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">full article</a></strong> if you want to see for yourself. However, there is one catch to that animation and that&#8217;s the amount of time it took to produce it. The tool chain for this animation was as follows:</p>

<ul>
<li>Drawing in <strong><a href="https://www.omnigroup.com/omnigraffle">OmniGraffle</a></strong></li>
<li>Exporting <strong><a href="http://en.wikipedia.org/wiki/Portable_Network_Graphics">PNG</a></strong>s</li>
<li>Animating the PNGs in <strong><a href="http://www.adobe.com/products/aftereffects.html">Adobe After Effects</a></strong></li>
<li>Exporting the finished animation as uncompressed <strong><a href="http://en.wikipedia.org/wiki/QuickTime">Quicktime</a></strong> file</li>
<li>Importing the Quicktime file into <strong><a href="http://www.adobe.com/products/photoshop.html">Adobe Photoshop</a></strong></li>
<li>Exporting an animated <strong><a href="http://en.wikipedia.org/wiki/Graphics_Interchange_Format">GIF</a></strong> from Photoshop</li>
</ul>


<p>All these tools are insanely powerful, however the feedback loop was not as quick as I desired because by the time I had the animated GIF and noticed that I wanted to tweak something, I had to go all the way back to <strong>After Effects</strong>. That was <strong>tedious</strong>.</p>

<p>Now I have a different approach: I animate an <strong><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a></strong> drawing by using the <strong><a href="https://greensock.com/">Greensock library</a></strong>. The feedback loop is much shorter now as you can adjust a value in the JavaScript code and reload. Then inspect, reiterate and so on until you are done. Much more agreeable. If there is enough interest, I will write about this approach later. For now, it is just a <strong>very welcome addition</strong> to my toolbox; one which I intend to explore further in the next couple of articles before I may decide to write about it. Here&#8217;s how an animation using this new approach looks like. Note that unlike when working with an animated GIF, we can make drawings truly <strong>interactive</strong>:</p>

<script language="javascript" type="text/javascript">
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    obj.style.width = obj.contentWindow.document.body.scrollWidth + 'px';
  }
</script>




<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/bw-anim/index.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>


<h2>Freeing my SSD</h2>

<p>The computer I do all my work on is a <strong>2012 Retina MacBook with 16GB RAM and 512GB SSD</strong>. In terms of performance, I have no reason at all to upgrade this machine before the extended warranty is up. after all, the currently available MacBooks are only a few percent faster than the one I already own. The only real complaint I have is that the drive space is not large enough, in part because of all the virtual machines that I like to have with me. Of course, that would have been a good excuse to buy a new Retina MacBook, but I try to use gadgets longer these days because that is just more <strong>sustainable</strong>. Think about all the <strong><a href="http://en.wikipedia.org/wiki/Rare_earth_mineral">rare earth minerals</a></strong> that are needed to build a laptop or smart phone, for example.</p>

<p>The other day, in order to alleviate the imminent shortage of disk space, I moved my 90GB iTunes library onto a <strong>128GB Transcend JetDrive Lite 350</strong> which fits exactly into the SD slot without protruding. Then, I just pointed to that new location by creating a symbolic link. You can <strong><a href="http://matthiasnehlsen.com/reviews/transcend-jetdrive-lite-350">read more in the reviews section</a></strong>. Now, I can go a while longer without constantly facing the threat of a full disk and I won&#8217;t have to buy a new laptop before Apple comes up with some truly remarkable update for the MacBook line.</p>

<h2>Closing remarks</h2>

<p>Most importantly, check out the new <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">article series</a></strong> that I just started. I hope you will find it useful and I am looking forward to your feedback. In addition, there have been plenty of new entries to my <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure-Resources</a></strong> repository on GitHub. You may want to check that out if you&#8217;re interested in Clojure at all. Finally, I bought a useful gadget that makes my digital life a little better.</p>

<p>Until next week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Clojure, Clojure, Clojure and a nasty cold]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/16/weekly-update/"/>
    <updated>2014-09-16T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/16/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will just give you a very brief update on what I&#8217;ve been doing. Most notably, I have refactored the <strong><a href="http://clojure.org">Clojure</a></strong> version of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application to use Stuart Sierra&#8217;s <strong><a href="https://github.com/stuartsierra/component">component library</a></strong>. Other than that, I am calling in sick for the week.</p>

<!-- more -->


<p><a href="http://birdwatch2.matthiasnehlsen.com" target="_blank"><img class="left" src="http://matthiasnehlsen.com/images/bw-clj.gif" title="BirdWatch in action" alt="BirdWatch in action"></a></p>

<br />


<p>Above you can see what the latest <strong>all-Clojure</strong> version looks like. I have added two features: <em>a)</em> aggregation and sorting by <strong>reach</strong> and <em>b)</em> a counter for the total number of tweets indexed, which is updated every ten seconds. You can see a live version by clicking on the animated GIF.</p>

<h2>Componentizing BirdWatch</h2>

<p>Over the weekend, I have componentized the server side of <strong><a href="https://github.com/matthiasn/birdwatch/">BirdWatch</a></strong>. In terms of functionality I had been content with the earlier version, but in terms of the structure, I started to recognize something that I have <strong>learned to dread</strong>: an application where everything depends on everything. Okay, in this case at least there, were no circular dependencies (any more), but there were still way too many dependencies between namespaces, in a way that I had seen way too often in past projects to lull myself into being satisfied. I don&#8217;t even like real <strong><a href="http://en.wikipedia.org/wiki/Spaghetti">spaghetti</a></strong> all that much.</p>

<p>The <strong><a href="https://github.com/stuartsierra/component">component library</a></strong> offers help by allowing us to structure an application into components (and boundaries between them) and then wire them together by means of <strong><a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a></strong>. It took a moment or two to wrap my head around it, but once I had, I was convinced that I wanted to reap the benefits of <strong>DI</strong> and rewrite my application. The library&#8217;s description contains a fair warning that it is somewhat difficult to refactor an existing application to use it throughout, but I can now say for sure that it can be done and that it&#8217;s worth it.</p>

<p>As a result I have an application where ONLY the main namespace depends on the different components it wires together via dependency injection. Other than that, the different namespaces know nothing about each other. Communication between the different components takes places via <strong><a href="https://github.com/clojure/core.async">core.async channels</a></strong>, which all live in a single component. The component holding the channels is then injected into the other components as a dependency.</p>

<p>I find this new architecture beautiful and I will surely write more about it soon. Until then, I could use <strong>your help</strong>. I am really just getting started with Clojure, and this is my first real application written in it. I would love to have more knowledgeable Clojurians review the code and point out to me possible improvements. Right now, I would especially appreciate your feedback regarding the <strong><a href="https://github.com/matthiasn/BirdWatch/tree/master/Clojure-Websockets/src/clj/birdwatch">server-side code</a></strong>.</p>

<h2>Are Clojure developers happier?</h2>

<p>I recently read an article that <strong><a href="http://www.itworld.com/big-data/433057/clojure-developers-are-happiest-developers">Clojure developers are the happiest</a></strong> developers. While I cannot honestly say that the article provides hard evidence, I can say for sure that I, for one, enjoy programming in <strong><a href="http://clojure.org">Clojure</a></strong> more than I enjoyed programming in other languages in a while. I have also found the community rto be eally helpful. Yesterday, I had a problem I couldn&#8217;t figure out myself. After scratching my head for way too long, it only took a few minutes after joining the <strong><a href="http://clojure-log.n01se.net/date/2014-09-16.html">Clojure room</a></strong> on <strong>IRC</strong> for me to be happily coding again.</p>

<h2>Clojure Resources</h2>

<p>I recently liberated my accumulated list of bookmarks on Clojure-related stuff and have since added every new link and useful link I came across. I am now working on making it a habit of writing a sentence or two about all the new resources I discover. In the past couple of days, I was really happy to see that people seem to find this compilation useful. Please go check it out if you haven&#8217;t already: <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure-Resources on GitHub</a></strong>.</p>

<h2>Closing remarks</h2>

<p>Okay, back to bed - I need to get rid of this nasty cold ASAP. I have stuff to do; stuff other than coughing. The bugs came without invitation last week and now they don&#8217;t seem inclined to leave. But on the upside, I went to the doctor today and he gave me a prescription for three different medications and assured me that I&#8217;d survive.</p>

<p>Have a great remaining week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: PageSpeed Insights, optimizing Octopress & more Clojure]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/08/weekly-update/"/>
    <updated>2014-09-08T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/08/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will discuss how I turned the load times for this <strong><a href="http://octopress.org/">Octopress</a></strong>-powered blog <strong>from terrible to pretty decent</strong>. In <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com">PageSpeed Insights</a></strong> numbers: before the optimization <strong style="color:#DD0000;">58/100</strong> for mobile and <strong style="color:#EE8800;">77/100</strong> for desktop; after the optimization <strong style="color:#00AA66;">94/100</strong> for mobile and <strong style="color:#00AA66;">96/100</strong> for desktop. More concretely: on a lousy mobile connection, the load time improved from <strong>32 seconds</strong> to a mere <strong>5 seconds</strong>. Now we&#8217;re talking. You would presumably <strong>not have waited</strong> for 32 seconds, and neither would I. Also, I have a status update on the <strong><a href="http://clojure.org/">Clojure</a></strong> version of <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong>.</p>

<!-- more -->


<h2>Making this page load fast, even on a pre-3G mobile connection</h2>

<p>Some time ago I attempted to open my blog on my smart phone and, to my dismay, it took like forever to load. I noticed that I did not have a <strong><a href="http://en.wikipedia.org/wiki/3G">3G</a></strong> connection at the time but come on, you should be able to open the page even if you only have an <strong><a href="http://en.wikipedia.org/wiki/Enhanced_Data_Rates_for_GSM_Evolution">Edge</a></strong> connection with decent signal strength at your disposal. I was <strong>sad</strong>. Then I ran Google&#8217;s <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com">PageSpeed Insights</a></strong> and that tool confirmed that things weren&#8217;t rosy:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed_before.png" title="PageSpeed results before optimization" alt="PageSpeed results before optimization"></p>

<p><strong style="color:#DD0000;">Red</strong> for mobile. That&#8217;s exactly how I would describe my previous experience. Now, after a couple of simple changes, here is how things look <strong>now</strong>:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed_after.png" title="PageSpeed results after optimization" alt="PageSpeed results after optimization"></p>

<p>Not only does that look substantially better, it also makes <strong style="color:#00AA66;">all the difference</strong> in terms of user experience. I subjected a friend of mine to a tiny experiment involving his smart phone. The blog had never been loaded on it before, so certainly nothing was cached. We switched off the Wifi connection and <strong>disabled 3G</strong> so all that remained was four bars of an <strong><a href="http://en.wikipedia.org/wiki/Enhanced_Data_Rates_for_GSM_Evolution">Edge</a></strong> connection. Initially, we loaded the new and optimized version, and it took a mere <strong>5 seconds</strong> until the page was visible and properly styled, except for the right web font. His reaction was <strong>&#8220;wow, that was fast&#8221;</strong> considering that we were on a really sluggish network connection. Next, we opened the old version with none of the optimizations, and that took a prohibitive <strong>32 seconds</strong>. From half a minute to 5 seconds, that is a hugely desirable improvement. Let&#8217;s now have a look at what was necessary for this <strong style="color:#00AA66;">triumph</strong> over the intricacies and pitfalls of speedy web page delivery.</p>

<h3>Inlining the CSS / above-the-fold content</h3>

<p>One of the complaints that <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com">PageSpeed Insights</a></strong> uttered was that the <strong>above-the-fold CSS</strong> was in a separate file. <strong>Above-the-fold</strong> is the portion of the page that needs to be fully loaded before <strong>any</strong> rendering whatsoever can happen. You want this above-the-fold portion to load as swiftly as possible because any delay here will keep the browser from rendering the page altogether, which of course means that most people are <strong>leaving</strong> rather than staring at a blank page for ten seconds or longer.</p>

<p>Funny enough, I think I read somewhere that people tend to be even more impatient on mobile devices, despite the slower network connection to begin with. And that makes sense. On desktop, I typically have twenty or more tabs open anyway. If something doesn&#8217;t load immediately, my attention will either move to another application like mail or to another tab. Good for a page if I divert my attention to checking email; then, at least, I will see the page once I come back to the browser. Another tab is worse as I probably won&#8217;t come back in a timely manner or ever. But at least, there&#8217;s a chance. On mobile, though, once I&#8217;m gone, I&#8217;m typically <strong>gone for good</strong>.</p>

<p>In order to not hold up page loading by fetching the <code>screen.css</code> and being penalized with an additional <strong><a href="http://en.wikipedia.org/wiki/Round-trip_delay_time">round trip</a></strong>, I embedded the entire CSS in the header of each HTML file. While that incurred an extra <strong>39KB</strong>, in the compressed files the difference was a mere <strong>7KB</strong>. This extra amount of data certainly loads faster than the extra round trip would take. This is particularly true for <strong>pre-LTE</strong> mobile which is notorious for long <strong><a href="http://en.wikipedia.org/wiki/Round-trip_delay_time">ping times</a></strong>. However, embedding all the CSS only works up to a certain size. While I don&#8217;t know the threshold, there comes a certain size where PageSpeed Insights starts complaining. But I suppose I can consider myself lucky that the resulting file size fell within the range that is deemed acceptable. Otherwise, one would have to figure out which parts of the CSS are essential to the initial rendering and then only embed that, with the rest loaded at the bottom of the HTML body.</p>

<h3>Nginx instead of hosted page</h3>

<p>Before, I was using a hosted web page where I had no real influence over how the files were served. Specifically, I had no control over <strong><a href="http://en.wikipedia.org/wiki/HTTP_compression">HTTP compression</a></strong> settings, <strong><a href="http://en.wikipedia.org/wiki/HTTP_ETag">ETags</a></strong> or <strong><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching">HTTP caching</a></strong>. In addition, it was also increasingly annoying to update the content because the only available method was <strong><a href="http://en.wikipedia.org/wiki/File_Transfer_Protocol">FTP</a></strong>. When I got started with the blog, that was bearable, but with an increasing number of files, specifically images, it started to take a few minutes. What I really wanted instead was to use either <strong><a href="http://en.wikipedia.org/wiki/Rsync">rsync</a></strong> or <strong><a href="http://git-scm.com/">git</a></strong>. I had a server already (the one used, for example, for serving <strong>BirdWatch</strong>) with <strong><a href="http://nginx.org">nginx</a></strong> running, so the first thing I did was move my blog over there and reconfigure the domain&#8217;s <strong><a href="http://en.wikipedia.org/wiki/Domain_Name_System">DNS</a></strong> settings. Here is the section of the <strong>nginx.conf</strong> that is now responsible for serving the blog:</p>

<figure class='code'><figcaption><span>nginx config nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user www-data;
</span><span class='line'>worker_processes 4;
</span><span class='line'>pid /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 15000;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  include       mime.types;
</span><span class='line'>  default_type  application/octet-stream;
</span><span class='line'>  charset UTF-8;
</span><span class='line'>
</span><span class='line'>  gzip_static on;
</span><span class='line'>  gzip on;
</span><span class='line'>  gzip_proxied any;
</span><span class='line'>  gzip_types text/plain text/html text/css application/json application/javascri
</span><span class='line'>pt application/xml application/xml+rss text/javascript;
</span><span class='line'>  gzip_vary on;
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  www.matthiasnehlsen.com;
</span><span class='line'>    return       301 http://matthiasnehlsen.com$request_uri;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  matthiasnehlsen.com;
</span><span class='line'>    root /home/bw/octopress-blog/public;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>      autoindex on;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # Media: images, icons, video, audio, HTC
</span><span class='line'>    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$
</span><span class='line'> {
</span><span class='line'>      expires 1M;
</span><span class='line'>      access_log off;
</span><span class='line'>      add_header Cache-Control &quot;public&quot;;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # CSS and Javascript
</span><span class='line'>    location ~* \.(?:css|js)$ {
</span><span class='line'>      expires 1y;
</span><span class='line'>      access_log off;
</span><span class='line'>      add_header Cache-Control &quot;public&quot;;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m no expert in the subject of <strong>nginx configuration</strong>, but the above seems to be working well for what I am trying to do. If you are more knowledgeable and spot any nonsense in there, please let me know. Note that <code>www.matthiasnehlsen.com</code> is forwarded to the same host but without <code>www.</code> in front of all URLs. This is to make Google happy as it would otherwise <strong>index both versions as separate entities</strong> and thus potentially <strong>dilute the rank</strong> at which the page appears in search results.</p>

<h4>Expiration settings</h4>

<p>For the configuration of <strong>nginx</strong>&#8217;s expiration settings, I used <strong><a href="https://github.com/h5bp/html5-boilerplate">html5-boilerplate</a></strong>&#8217;s <strong><a href="https://github.com/h5bp/server-configs-nginx/blob/master/h5bp/location/expires.conf">server-configs-nginx</a></strong> project as a template. The suggested settings in there worked well and I got no further complaints from <strong>PageSpeed Insights</strong> about caching of any resources that are under control of my <strong>nginx</strong> server. Obviously, there is little I can do about resources served from elsewhere.</p>

<h4>Gzipping the content</h4>

<p>The configuration above enables both static content compression and on-the-fly compression. Under heavy load, static compression is preferable where nginx serves the gzip version of a file, should it exist with the same name but with an appended <code>.gz</code>. If this file is not available, nginx instead compresses the content on-the-fly, obviously resulting in a somewhat higher CPU utilization as that work will need to be performed time and again. I have only gzipped some resources while others are compressed on-the-fly. I have never really seen high CPU utilization from nginx on my server, therefore for me at this point, high nginx load due to compression is a luxury problem for which I would probably need to increase the number of visitors by an order of magnitude or two. But when that happens, I may look once more into pre-compression of more of the files. Part of the reason I don&#8217;t run into issues here is probably because the server is bare metal and has a powerful Xeon CPU. If this was a virtual machine sharing the CPU with other guest VMs, the effect would probably be measurable already, despite the modest number of concurrent users that the server is handling at the moment.</p>

<h3>Move webfonts out of above-the-fold content</h3>

<p>For the blog, I am using a non-standard <strong><a href="http://en.wikipedia.org/wiki/Web_typography">web font</a></strong> named <strong><a href="http://www.type-together.com/Tablet%20Gothic">Tablet Gothic</a></strong> from an independent type foundry named <strong><a href="http://www.type-together.com/info">TypeTogether</a></strong>. I like this font family a lot for many reasons, not least because there is a vast range of styles available (84 altogether). The narrow versions for headlines work really well with the body text. I also think that this font family is really pretty. I don&#8217;t have to pay extra for the font as it is included in the <strong><a href="https://typekit.com">TypeKit</a></strong> service of my <strong><a href="https://www.adobe.com">Creative Cloud</a></strong> subscription. However, there is a downside to web fonts when it comes to page render times. At least if you load the font above-the-fold, which I previously did. That will hold up the page rendering until both the TypeKit script and the actual files are loaded. But after thinking about it, I decided that showing the page in <em>Helvetica Neue / SansSerif</em> first is better than not rendering anything at all for a long time. If your connection is fast, you&#8217;ll hardly notice and if it is not, you will probably still not leave in disgust just because you were subjected to another perfectly fine font for a few seconds. Your mileage may vary, of course, but personally, I don&#8217;t think I&#8217;d use web fonts - unless showing a built-in font first would be okay - because loading the files related to the web fonts alone can take over ten seconds on a slow connection.</p>

<h3>What else could be done?</h3>

<p>Short answer in my case: <strong>nothing really</strong>. With these changes in place, <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com&amp;tab=mobile">PageSpeed Insights</a></strong> now only complains about items that are outside of my sphere of influence:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed_after2.png" title="pagespeed results after optimization" alt="pagespeed results after optimization"></p>

<p>I could remove the <strong><a href="https://github.com/mdo/github-buttons">GitHub buttons</a></strong>, the <strong><a href="http://www.google.com/analytics/">analytics script</a></strong> and the <strong>web font</strong> altogether just to get an even higher score, but I won&#8217;t. I am happy with the results and I am not willing to forego any of them. I also find it somewhat odd that one Google tool (PageSpeed Insights) complains about the script of another Google tool (Google Analytics) - as if I could do anything about that! In addition, I think that the complaint about leveraging longer cache times for the GitHub API calls is <strong>plain wrong</strong>. Those are <strong><a href="http://en.wikipedia.org/wiki/JSONP">JSONP</a></strong> calls rather than static content. Arguably, the resource need not be cached at all if we want the result to be accurate.</p>

<p>I also ran <strong><a href="https://developer.yahoo.com/yslow/">YSlow</a></strong>, which seemed pretty happy with the optimizations as well:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/yslow.png" title="YSlow results after optimization" alt="YSlow results after optimization"></p>

<p><strong style="color:#00AA66;">Grade A (94/100)</strong> sounds much better than the <strong style="color:#EE8800;">Grade C (78/100)</strong> that YSlow previously gave this blog.</p>

<h3>Useful links</h3>

<p>Here are a handful of articles that I found useful while squeezing the last bit of performance out of this blog. Google has a few great resources available, for example on <strong><a href="https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery">Optimizing CSS Delivery</a></strong>, <strong><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#invalidating-and-updating-cached-responses">HTTP Caching</a></strong> and <strong><a href="https://developers.google.com/web/fundamentals/performance/">Optimizing Performance</a></strong> in general. I consider them a <strong>must-read</strong> if you are serious about delivering a speedy user experience. Also really helpful: the <strong>YouTube channels</strong> of <strong><a href="https://www.youtube.com/user/igrigorik">Ilya Grigorik</a></strong> and <strong><a href="https://www.youtube.com/user/addyosmani">Addy Osmani</a></strong>.</p>

<h2>BirdWatch in Clojure, ClojureScript and Om</h2>

<p>I did a lot of refactoring of the new version of <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong> this past week. The application architecture still feels like clay in my hands, but the sculpture is getting into a decent shape. I made the interesting discovery that there really <strong>weren&#8217;t any performance issues</strong> introduced by the <strong>Clojure</strong> rewrite. Rather, the problem was sitting in front of the screen. My initial version triggered a re-render of the word cloud <strong>a few orders of magnitude more often</strong> than what a reasonable and sane person would have done.</p>

<p>Considering that the word cloud layout is probably the most expensive operation in the entire client-side application, it is no wonder that the application did not respond in the way I would have hoped. It is kind of <strong>spectacular that it worked at all</strong>&#8230;</p>

<p>I also did some preparations for moving the aggregation of previous tweets to the server. More precisely, the client side can now request missing tweets via <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a></strong> command messages and subsequently render the full tweet once it is back from the server. This isn&#8217;t terribly useful yet, but it will be at a later stage. Once <strong>server-side aggregation</strong> is in place, it will no longer be necessary to transmit all thousands of the analyzed tweets to the client. This should either reduce the memory fingerprint by a lot when analyzing the same number of tweets or enable a <strong>much</strong> higher number of tweets for the same memory utilization. It should also reduce page load times, potentially by a lot.</p>

<p>Here&#8217;s the current version as a <strong><a href="http://birdwatch2.matthiasnehlsen.com">live demo</a></strong>.</p>

<h2>My Clojure Resources List</h2>

<p>While working on the <strong>Clojure</strong> application described above, I constantly added fresh
links to this list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure resources on GitHub</a></strong>. This week, I added several articles I discovered and found useful and or sometimes outright entertaining. Maybe you&#8217;ll find enlightening stuff in there as well. Or you may have a link that you believe belongs in there, too. Just let me know or, better yet, submit a <strong>pull request</strong> with the link and a short comment.</p>

<h2>Conclusion</h2>

<p>I still want to redesign the blog. But at least the load times have improved tremendously so redesigning it isn&#8217;t that urgent. Unlike before, the load times even on mobile are such that visitors should only leave because the content of this blog is irrelevant to them, not because the page doesn&#8217;t load. By the way, back in <strong>December 2013</strong> I put a little work into a fast <strong>AngularJS</strong>-based <strong>blog engine</strong>. I have not worked on it since, but I thought at least I could open source it. There is no good reason for it to sit in a private repository, after all. I am now curious about some feedback. The cool feature include client-side rendering from markdown, configurable and animated code blocks (see at the bottom of the live demo) and a live preview while authoring. Here&#8217;s the <strong><a href="https://github.com/matthiasn/ng-blog">ng-blog repository on GitHub</a></strong> and here&#8217;s a <strong><a href="http://ng-blog.org/blog">live demo</a></strong>. I am just putting this out there to see if anyone is interested. If so, I would probably put more work into it.</p>

<p>Then, coding in <strong>Clojure</strong> was once again exciting and productive last week, with like <strong>35 commits</strong> so far this month. Things are finally settling down, which means that I will soon be able to start a series of articles about this application. In that regard, please let me know if <strong>you have any ideas</strong> for features that would make the application more <strong>useful</strong> for you. It is already great that this little toy application of mine has received so much love (if love can be counted in GitHub stars) and I appreciate that a lot, but it would be even more awesome if the application solved an actual problem. I would <strong>love to start a conversation</strong> (or two or three) here.</p>

<p>Thanks and until next week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Pomodoro, all-Clojure BirdWatch, Income]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/03/weekly-update/"/>
    <updated>2014-09-03T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/03/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will be talking about <strong>why I started this blog</strong> in the first place, <strong>Pomodoro time management</strong>, and the new <strong>Clojure</strong> and <strong>ClojureScript</strong> version of my <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong> application. Again there is a live version, this time subscribing to all tweets containing the term <strong>Ferguson</strong>. Also, the results are out for the first month of <strong>blog monetization</strong> through <strong>affiliate links</strong>.</p>

<!-- more -->


<h2>Why I started this blog in the first place</h2>

<p>Initially, when I started this blog, I wanted to explore real-time information processing. My initial project was the <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong> application which has evolved quite a bit since the first version came out. But then, for a while, I focused more on frameworks and libraries than on the underlying architectural principles. That was probably also due to the fact that I was not convinced I really had the right tools in my toolbox. Well, that has changed. It is a luxury to use (roughly) the same language on both the server and the client, in particular if as a single developer you want to quickly explore an idea end-to-end.</p>

<h2>Pomodoro time management</h2>

<p>For a while now I have been using the <strong><a href="http://pomodorotechnique.com">Pomodoro</a></strong> time management technique and it has served me <strong>extremely well</strong>. The main idea is to set a timer (such as the tomato-shaped kitchen timers) to a predefined time interval and then fully focus on a single task with no distractions allowed whatsoever. The default time interval is <strong>25 minutes</strong> and while it is possible to adapt this to suit your needs, I have found the 25 minutes to be perfect for mine. Then you take a 5-minute break after every interval or a 15-minute break after the successful completion of four of these Pomodoro intervals. I find that I am much <strong>more productive</strong> when I use this technique.</p>

<p>It is also a great help if you tend to <strong>procrastinate</strong>. It is usually a good idea to start with just one of these 25-minute intervals per day for so-and-so many days. The reason why I mention it is that in the next section, I will talk about an experiment I made to find out if it was possible to implement an entire real-time feature (both on the client and the server side) of the BirdWatch application within one of these 25-minute intervals and the answer is yes. I finished 76 seconds earlier than the allotted time.</p>

<h2>BirdWatch in Clojure and ClojureScript, #Ferguson</h2>

<p>In the last two weeks, I finally got around to rewriting the <strong><a href="https://github.com/matthiasn/Birdwatch/tree/master/Clojure-Websockets">BirdWatch</a></strong> application so that it now uses <strong>Clojure</strong> on the server side and <strong>ClojureScript</strong> on the client side. During that process, I also changed the implementation of the bi-directional communication from using <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> + <strong>REST API calls</strong> to using <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSockets</a></strong>. Since <strong><a href="http://matthiasnehlsen.com/blog/2014/08/25/weekly-update/">last week&#8217;s update</a></strong> I have been able to tackle the remaining issues and today I proudly present the fully functional <strong><a href="https://github.com/matthiasn/Birdwatch/tree/master/Clojure-Websockets">all-Clojure version</a></strong>.</p>

<p>Of course, there is also a live version running on my server. This time I did not use the selection of software related terms that I used previously, but instead let my application subscribe to the term <strong>Ferguson</strong>. This is because I was particularly interested in how the situation in <strong><a href="http://en.wikipedia.org/wiki/Ferguson,_Missouri">Ferguson, Missouri</a></strong> was (and is) developing. So what you see when you click the image below is an application that retrieves all tweets mentioning the term. This has been a highly educational topic to follow during the process of writing this new version of the application. I am <strong>deeply disturbed</strong> by how much of a difference the color of your skin seems to make when it comes to how government authorities deal with you as a human being. More broadly, I am also very concerned about <strong>militarization</strong> of police forces in the USA and elsewhere in the world.</p>

<p>Click the image or alternatively <strong><a href="http://birdwatch2.matthiasnehlsen.com/">click here</a></strong> to open a live version of this application.</p>

<p><a href="http://birdwatch2.matthiasnehlsen.com/" target="blank"><img class="left" src="http://matthiasnehlsen.com/images/bw-ferguson.png" title="BirdWatch Screenshot for term Ferguson" alt="BirdWatch Screenshot for term Ferguson"></a></p>

<p>In the Pomodoro time management section above, I mentioned a little experiment I carried out to determine how much I would be able to achieve in a single 25-minute Pomodoro time interval. Yesterday I had the idea that I wanted to know how many clients were connected to the live version of this application at any given time. Right after I had the idea, I asked myself if this was doable in a single Pomodoro interval. So I set the timer and started right away. All of my thoughts concerning this feature, the implementation on both client and server, the testing (on Chrome, Firefox, Safari, and Opera), and the code documentation and prettification were done and there were still 76 seconds left before my digital kitchen timer started ringing. Almost time to take a little nap. Here&#8217;s how that looks like, see the upper right corner:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw-ferguson2.png" title="Connection count feature" alt="Connection count feature"></p>

<p>Every other second, all clients are notified about the number of current number of simultaneous connections. It is really useful to have a message bus for different message types between client and server. More on that in a future article.</p>

<p>Considering that I have just started out with Clojure and that this is my first real application written in it, I have a hunch that I may have found the tools that I have been looking for all the while. Sure, this was not a very large feature, but the fact alone that it was possible to implement it in such a short time on both server and client without significant context switches in the brain bodes well for productivity.</p>

<p><strong>What&#8217;s next?</strong> I will work on a series of articles describing the application architecture in detail. Also, I will put much more focus on a mobile version of the application. Currently, it does not work well on mobile devices. In order to alleviate performance issues, I will move a good part of the computation for previous tweets to the server side. The layout needs some major rework for mobile as well. I&#8217;ll keep you posted.</p>

<h2>Affiliate links results for the first month</h2>

<p>A couple of weeks ago I <strong><a href="http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework/">wrote</a></strong> about a tool for country-specific deliveries of Amazon affiliate links. The results for the first month are out now. I made a whopping <strong>$44.37</strong>. Hmm, I will try not to spend it all at once, I promise. But to be honest, I don&#8217;t think the result is all that bad. Particularly if you consider that I have not written many reviews just yet. Eventually, it should be possible for the blog to finance itself, maybe even retroactively. I will try to write more quality reviews in the weeks to come. Then, by the time Santa climbs down the chimneys, there will hopefully be more clicks on those links and better conversion rates. What I have read about affiliate marketing is that people who do it successfully talk about how much of a difference the holiday season makes. We&#8217;ll see.</p>

<h2>Gadget reviews</h2>

<p>I still have not found the perfect travel lens for my <strong><a href="http://matthiasnehlsen.com/reviews/sony-a7/">Sony A7</a></strong> camera. One contender was the <strong>Zeiss Vario-Tessar T* FE 24-70mm f/4 ZA OSS</strong>, but in the end I decided to send it back for a refund. <strong><a href="http://matthiasnehlsen.com/reviews/zeiss-24-70">Read all about it here</a></strong>.</p>

<h2>Conclusion</h2>

<p>The last week was a lot of fun. I mostly focused on the <strong>Clojure</strong> and found that be be very rewarding. There is plenty of stuff I still want to do with this application and I am really looking forward to getting around to those features.</p>

<p>Last week’s cliffhanger was a section on speed improvements on this blog. Sorry, but you will have to wait a little longer for that story. I was so busy writing Clojure that I didn’t find the time to write it down. But no worries, the speed improvements will be covered soon.</p>

<p>Have a great remaining week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: AngularJS book, BirdWatch and Clojure, Web Components, Upstart and Play]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/25/weekly-update/"/>
    <updated>2014-08-25T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/25/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will be talking about <strong>Clojure and ClojureScript</strong>, an upcoming article on <strong>AngularJS, Grunt, Karma and Protractor</strong> and how I use <strong>Upstart</strong> to run my <strong>Play</strong> applications as services on <strong>Ubuntu</strong>.</p>

<!-- more -->


<h2>AngularJS book available for pre-order on Amazon, Meetup</h2>

<p>I am very excited that the book that <strong><a href="http://amitgharat.wordpress.com">Amit Gharat</a></strong> and I wrote about <strong><a href="http://www.amazon.com/gp/product/1783288477/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1783288477&amp;linkCode=as2&amp;tag=matthiasnehls-20&amp;linkId=7WKFJKNQICCUSFES">AngularJS UI Development</a></strong> is now available for <strong><a href="http://www.amazon.com/gp/product/1783288477/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1783288477&amp;linkCode=as2&amp;tag=matthiasnehls-20&amp;linkId=7WKFJKNQICCUSFES">pre-order on Amazon</a></strong>. Interesting experience to see it being listed already while still working on the final stages.</p>

<p>We will have <strong>content</strong> available for <strong>preview</strong> soon. On my end, I will <strong>publish</strong> an article about <strong>setting up the environment for AngularJS</strong> with a <strong>build system consisting of Grunt, Bower, Karma and Protractor</strong>. Last week I also gave a talk on the subject at the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/events/196972082/">Hamburg AngularJS meetup</a></strong>. Or rather a live coding session in which we coded up an application that is being <strong>tested in Chrome, Firefox, PhantomJS and also in Mobile Safari</strong>. <strong>Android</strong> is still <strong>missing</strong> due to some difficulties but should be added soon. Two interesting questions came up during the meetup: <strong>a)</strong> How do you test swipe gestures? <strong>b)</strong> When selecting elements to click by <strong>id</strong>, will <strong><a href="https://github.com/angular/protractor">Protractor</a></strong> catch errors if an element, though visible, is covered by another element and thus cannot be clicked? Tests should also be added for cases such as these. The project the article will be based upon is already available on <strong><a href="https://github.com/matthiasn/angular-grunt-protractor-starter">GitHub</a></strong>. You may find it to be a good starting point for an <strong>AngularJS</strong> application that includes a <strong>test</strong> and <strong>build</strong> system. Besides the planned article I also want to do a <strong>screencast</strong> on the subject. Stay tuned. By the way, <strong>you</strong> could help with testing the application on Android or adding the additional test cases.</p>

<h2>Tweet stream analysis with Clojure and ClojureScript/Om</h2>

<p>I recently <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">rewrote</a></strong> the client side of my <strong><a href="https://github.com/matthiasn/birdwatch">BirdWatch</a></strong> application using <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and <strong><a href="https://github.com/swannodette/om">Om</a></strong>. While I enjoyed the process, I also noticed some performance issues when I tried to keep the application responsive while <strong>ingesting and transforming</strong> thousands of previous tweets as quickly as possible. While optimizations certainly could have been done on the client side alone, this was a good reminder that the information flow architecture was <strong>far from ideal</strong>. The previous version was also a bit of a <strong>Frankenstein&#8217;s patchwork</strong> of programming languages. I acknowledge that it may be a little bit of a <strong>tough sell</strong> to have to understand both <strong><a href="http://www.scala-lang.org">Scala</a></strong> and <strong><a href="http://clojure.org">Clojure</a></strong> in order to wrap your head around a single application. Totally unnecessary, too.</p>

<p>So I rewrote the server side using <strong>Clojure</strong>. That already works nicely, this time making use of <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSockets</a></strong> instead of <strong><a href="http://en.wikipedia.org/wiki/Server-sent_events">Server-Sent Events</a></strong>. Turns out <strong>WebSockets</strong> are a nice fit conceptually for <strong><a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP-style channels</a></strong>.</p>

<p>A couple of things still need to be resolved. In order to fully achieve the previous functionality, there needs to be an <strong>auto-reconnect</strong> if the connection to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> is lost. That should be really simple, given what is there already. Also, <strong>matching</strong> new tweets with the clients&#8217; queries using <strong>ElasticSearch</strong>&#8217;s <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html">Percolator</a></strong> and only delivering a <strong>filtered stream</strong> needs to be implemented. This is slightly more involved, but also seems totally doable.</p>

<p>Above and beyond, it seems useful to <strong>partially perform</strong> the computation (ranking by retweets, word counts) <strong>on the server</strong> in order to <strong>reduce the load</strong> on the client. With <strong>Clojure</strong> and <strong>ClojureScript</strong> being so similar, my idea is to use a part of the code base on both sides and split the computation. Then, the amount of data having to traverse the potentially slow network connection would be reduced drastically, leading to faster loading and a more <strong>mobile-friendly</strong> memory footprint of the client.</p>

<p>A new article on this application rewrite will follow soon. The work in progress code is on <strong><a href="https://github.com/matthiasn/BirdWatch/tree/2014-08-25-Clojure-Server">Github</a></strong> already, currently in a separate branch.</p>

<h2>Web Components / Polymer / X-Tag resources</h2>

<p>As already mentioned last week, I find some of the ideas behind <strong><a href="http://webcomponents.org">Web Components</a></strong> <strong>brilliant</strong>, in particular <strong>Shadow DOM</strong> and <strong>Custom Elements</strong>. Now that I am learning these concepts anyway, I thought I might as well <strong>share useful resources</strong> I come across, so I have created a <strong><a href="https://github.com/matthiasn/WebComponents-Polymer-Resources">list over on GitHub</a></strong>. Check it out and <strong>please add your links</strong> too. I expect this list to grow substantially in the next couple of weeks.</p>

<h2>Upstart scripts for Play</h2>

<p>I am running <strong>live instances</strong> of my <strong><a href="http://playframework">Play</a></strong> applications (BirdWatch, sse-chat, amzn-geo-lookup) on an <strong><a href="http://www.ubuntu.com">Ubuntu</a></strong> server. There are <strong>hardly any disruptions</strong>, something like once every few months. But whenever they occurred, I had to restart the applications <strong>manually</strong>. Not terrible when all is running smoothly, but not great either. So how could that be done better? <strong><a href="http://upstart.ubuntu.com">Upstart</a></strong> provides the answer. After some googling I found <strong><a href="http://www.agileand.me/blog/posts/play-2-2-x-upstart-init-script">this blog post</a></strong> by <strong><a href="https://twitter.com/ajevans85">Adam Evans</a></strong>. I have only slightly modified it and now, I have all of my applications running as services that I can <strong>start</strong> and <strong>stop</strong> the way one would expect, e.g.:</p>

<pre><code># status birdwatch
birdwatch start/running, process 947
# stop birdwatch
birdwatch stop/waiting
# start birdwatch
birdwatch start/running, process 30453
</code></pre>

<p>Also, the services <strong>start automatically</strong> after a system reboot.</p>

<p>So what needs to be done? First of all, we need a standalone instance of the applications using the <strong><a href="https://www.playframework.com/documentation/2.2.x/ProductionDist">dist</a></strong> command, e.g.;</p>

<pre><code># play dist
[info] Loading project definition from /home/bw/BirdWatch/project
[info] Set current project to BirdWatch (in build file:/home/bw/BirdWatch/)
[info] Wrote /home/bw/BirdWatch/target/scala-2.10/birdwatch_2.10-0.3.0.pom
[info] 
[info] Your package is ready in /home/bw/BirdWatch/target/universal/birdwatch-0.3.0.zip
</code></pre>

<p>We can unpack the zip file where we choose and then simply adapt the script from the blog post mentioned above, in this case:</p>

<pre><code>description "Upstart script for https://github.com/matthiasn/Birdwatch, modified from http://www.agileand.me/blog/posts/play-2-2-x-upstart-init-script"

env USER=bw
env GROUP=www
env APP_HOME=/home/bw/apps/birdwatch-0.3.0
env APP_NAME=birdwatch
env PORT=9000
env BIND_ADDRESS=0.0.0.0
env EXTRA=""

start on (filesystem and net-device-up IFACE=lo)
stop on runlevel [!2345]

respawn
respawn limit 30 10
umask 022
expect daemon

pre-start script
    #If improper shutdown and the PID file is left on disk delete it so we can start again

    if [ -f $APP_HOME/RUNNING_PID ] &amp;&amp; ! ps -p `cat $APP_HOME/RUNNING_PID` &gt; /dev/null ; then
        rm $HOME/RUNNING_PID ;
    fi
end script

exec start-stop-daemon --pidfile ${APP_HOME}/RUNNING_PID --chdir ${APP_HOME} --chuid $USER:$GROUP --exec ${APP_HOME}/bin/$APP_NAME --background --start -- -Dhttp.port=$PORT -Dhttp.address=$BIND_ADDRESS $EXTRA
</code></pre>

<p>Et voilà - after a restart of the server, all services come up as expected. Much nicer. The script is also on <strong><a href="https://github.com/matthiasn/BirdWatch/blob/797c9b27eeb018138e90f95ad3df8774b4fbd6e5/conf/upstart/birdwatch.conf">GitHub</a></strong>. For more information, check out the <strong><a href="http://upstart.ubuntu.com/cookbook/">upstart cookbok</a></strong> and the <strong><a href="http://upstart.ubuntu.com/getting-started.html">getting started guide</a></strong>.</p>

<h2>Conclusion</h2>

<p>Last week was fairly <strong>productive</strong>, I got some really cool stuff done that had been on my mind for a while. I hope to continue this flow in the week that has just started. I&#8217;ll let you know next week. <strong><a href="http://en.wikipedia.org/wiki/Cliffhanger">Cliffhanger</a></strong>: I recently increased the <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fmatthiasnehlsen.com&amp;tab=desktop">Google PageSpeed Insights</a></strong> score of this blog by a lot, from <strong>58/100 to 83/100 for mobile</strong> and from <strong>77/100 to 90/100 for desktop</strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed.png" title="'pagespeed results'" ></p>

<p>It also feels like the pages are loading a lot faster. <strong>Next week</strong> I&#8217;ll let you know what I did. Would you like to get notified when the next article is out? Just <strong>sign up</strong> for the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>mailing list</strong></a>.</p>

<p>Have a great week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: git vs brain fart, Octopress, Sony A7, my audio setup]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/17/weekly-update/"/>
    <updated>2014-08-17T22:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/17/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will show you how <strong>git</strong> helped me alleviate the disastrous consequences of a <strong>brain fart</strong>. I will also share my experiences with <strong>Octopress</strong>. You will learn what helps me <strong>feel better</strong>, day in and day out. Then, I&#8217;ll talk about some changes regarding the <strong>mailing list</strong> for this blog. And last, there&#8217;ll be <strong>reviews</strong> on my <strong>audio setup</strong> for a combined work / chill area and on the <strong>Sony A7</strong> full frame camera.</p>

<!-- more -->


<h2>git vs brain fart</h2>

<p>The other day I experienced a curious malfunction of my brain. I had some uncommitted changes in a repository. Many hours of work in fact, way more than I normally would leave uncommitted anywhere. So to alleviate this grievance, I typed <code>git add .</code> on the command line.</p>

<p>So far so good. But then I got distracted by a rather annoying phone call. During that call, something happened that I can best describe as a <strong><a href="http://en.wikipedia.org/wiki/Brain_fart">brain fart</a></strong>. I typed <code>git reset --hard HEAD</code> and pressed ENTER. Now you will probably ask why anyone would want to do that, particularly before actually committing the changes. To be honest, I am clueless. Maybe it was the geek&#8217;s version of a <strong><a href="http://en.wikipedia.org/wiki/Freudian_slip">Freudian slip</a></strong>? Something in my brain probably wanted to reset itself to the happier pre-call state, but somehow that idea landed on the command line instead?</p>

<p>In case you don&#8217;t know this (destructive) <strong><a href="http://git-scm.com/">git</a></strong> command, this is what it does:</p>

<blockquote><p>&#8211;hard<br/>Resets the index and working tree. Any changes to tracked files in the working tree made since <commit> will be discarded.</p><footer><strong>git-reset documentation</strong> <cite><a href='http://git-scm.com/docs/git-reset'>git-scm.com/docs/git-reset/&hellip;</a></cite></footer></blockquote>


<p>Okay, think about that for a second. The documentation says it loud and clear. Changes to tracked files since <strong>HEAD</strong>, which is the current commit to which I have added above but not committed, are <strong>discarded</strong>. Oops.</p>

<p>I have no idea what I was thinking. My changes appeared to be lost forever. Not a surprise really when you think about the description above. But for me in that second it was like getting hit by a truck that came out of nowhere.</p>

<p>So I really wanted the fruits of my previous and tedious labor back.</p>

<p>I tried <code>git reflog</code> according to <strong><a href="http://stackoverflow.com/questions/5788037/recover-from-git-reset-hard">these instructions</a></strong>, but that did not help; I did not find anything useful in the output. Luckily though, <strong><a href="http://git-scm.com/docs/git-fsck">fsck</a></strong> helped:</p>

<pre><code>git fsck --lost-found --verbose
cd .git/lost-found/other/
find . -print | xargs grep someUniqueTextHere
</code></pre>

<p>So basically, git only runs a <strong><a href="http://de.wikipedia.org/wiki/Garbage_Collection">garbage collection</a></strong> every once in a while. I found this <strong><a href="http://gitready.com/advanced/2009/01/17/restoring-lost-commits.html">here</a></strong>. Using the commands above, I tell git to run a <strong>fschk</strong> and write out the <strong>lost and found</strong> items. Then I can find the one I was looking for by piping the result of <strong><a href="http://en.wikipedia.org/wiki/Find">find</a></strong> in that directory to <strong><a href="http://en.wikipedia.org/wiki/Grep">grep</a></strong>, looking for some specific text I remembered from the work I had lost.</p>

<p>Then from the files I found, I was easily able to reconstruct the work that previously appeared lost. That really <strong>saved my day</strong>.</p>

<h2>ClojureScript article</h2>

<p>I found some time to put additional work into the article in which I describe the recently added <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">ClojureScript client</a></strong> of my <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application. Initially I wanted to do more work on the application itself and specifically use <strong><a href="https://github.com/cognitect/transit-format">Transit</a></strong> instead of JSON parsing. But this application is fairly dependent on <strong>keywordized keys</strong> inside the representation of the tweets, and Transit as of now does not have a built-in way to keywordize the JSON property names so that would have been a bit of work. Totally doable and the only thing that keeps me from actually doing it is that I want to do some major redesign of the application. Then, that effort would likely be wasted. More on that soon.</p>

<h2>Octopress, one year later</h2>

<p>I am using Octopress to generate my blog. It has served me alright, but I don&#8217;t really like it a lot and probably wouldn&#8217;t use it again.  I am just not enough of a Ruby guy to tinker around with it. I cannot even fix issues when I try to update it. The other night I wasted two precious hours trying to get my installation current so that I would benefit from newer features. I didn&#8217;t succeed. Quite frankly, I have no intentions of becoming a Ruby expert any time soon or ever.</p>

<p>Along those lines, I was thinking about rolling my own blogging engine. Yeah I know what you&#8217;re thinking. At some point every (technical) blogger will reach that stage where you want to create your own blogging engine. But hear me out, this one might be a little different. I am thinking about making use of <strong><a href="http://www.polymer-project.org">Polymer</a></strong> and <strong><a href="http://webcomponents.org">Web Components</a></strong>. Now that the Google robots run JavaScript, the blog would get indexed just fine, without pre-rendering for search engine visibility. Why not load the markdown directly from a web component handling the current post and then let that render itself? Polymer handles browser compatibility, but I do not care much about IE6 users and the like anyway. At the same time that would give me a chance to delve deeper into web components. The idea of a shadow DOM is just brilliant, and I hope web components will have the success they deserve. Finally a vendor-agnotic way of building web applications.</p>

<h2>Feeling good</h2>

<p>I have a lot of fun writing stuff at the moment. I also write for myself. The first 25-30 minutes in the morning belong to me and me alone. Before reading any email, I focus on everything that comes to mind and write it down. It&#8217;s a great way to gain some clarity on what I want to do and where I want to go. The only thing that&#8217;s missing in the process is a decent and searchable way to organize the notes. That part needs work. But nonetheless, I am a happier person when I do this regularly. Highly recommended.</p>

<h2>Mailing list: one and only one</h2>

<p>At first I thought about creating a separate mailing list because I didn&#8217;t want to spam anyone who subscribed for infrequent tutorials with weekly updates like this one. But that&#8217;s too much work on my end. So instead I will unify the mailing lists. If the updates are too frequent for any of the existing subscribers, there are two options: <strong>a)</strong> let me know or <strong>b)</strong> unsubscribe. But why don&#8217;t you give it a try? My intention is to make the weekly update an entertaining read.</p>

<h2>Book and gadget reviews</h2>

<p>Last week I mentioned that I wanted an outlet for my opinions on books and gadgets. So I created a <strong><a href="http://matthiasnehlsen.com/reviews">page for reviews</a></strong>. I also started writing about some electronic stuff that I own.</p>

<h3>My audio setup</h3>

<p>I recently kicked out a high-end surround sound system in favor of a mixer, two active speakers and a pair of headphones. <strong><a href="http://matthiasnehlsen.com/reviews/audio-setup">Find out why</a></strong>.</p>

<h3>My camera, Sony A7</h3>

<p>I can finally use my classic Zeiss and Leica prime lenses again thanks to this camera. Overall I am quite happy with it. This review is a work in progress, but you can already read some of it <strong><a href="http://matthiasnehlsen.com/reviews/sony-a7">here</a></strong>.</p>

<p>Have a great week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: AngularJS book, Geo-Lookup, Reading]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/10/weekly-update/"/>
    <updated>2014-08-10T22:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/10/weekly-update</id>
    <content type="html"><![CDATA[<p>I have mostly kept myself busy with <strong><a href="http://angularjs.org">AngularJS</a></strong> this week. Then, my <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">geo-specific link shortener</a></strong> generated its first contribution to running this blog. I have also read some more this week: <strong><a href="http://r.matthiasnehlsen.com/unclebob-cleancoder/link">The Clean Coder: A Code of Conduct for Professional Programmers</a></strong> by Robert C. Martin (Uncle Bob).</p>

<!-- more -->


<p>I have been doing a lot of <strong><a href="http://angularjs.org">AngularJS</a></strong> work. I haven&#8217;t really talked about it yet, but last year I started co-authoring a book about <strong><a href="https://www.packtpub.com/web-development/angularjs-ui-development">AngularUI Development</a></strong>. The book is scheduled to be out in November this year. Right now, I am putting the finishing touches on the chapters that I wrote. I added quite a few pages to the first chapter about bootstrapping an <strong><a href="http://angularjs.org">AngularJS</a></strong> environment, in particular about AngularJS integration tests using <strong><a href="https://github.com/angular/protractor">Protractor</a></strong>. I am quite happy with the testability of AngularJS application is progressing. Protractor is really powerful and I am looking forward to implementing a comprehensive testing strategy for my current work project. Protractor looks like it will be up to the job. It will be interesting to integrate this into the overall <strong><a href="http://www.scala-lang.org">Scala</a></strong> / <strong><a href="http://www.playframework.com">Play Framework</a></strong> / <strong><a href="http://www.scala-sbt.org">SBT</a></strong> build chain, though. Maybe that&#8217;ll be an article for another day.</p>

<p>Then, earlier this week, I <strong><a href="http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework/">wrote about building</a></strong> an application for country-specific embedding of links for the <strong><a href="https://affiliate-program.amazon.com">Amazon Affiliate Program</a></strong>, with the idea of having purchases on <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon</a></strong> contribute to the running costs of this blog. Besides the time that I invest, I also rent a server for serving my <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch application</a></strong> at <strong><a href="http://www.hetzner.de">Hetzner Online AG</a></strong>, that costs <strong>€81</strong> per month. Today I am happy to report that in the first week, clicks on <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon links</a></strong> have generated roughly <strong>$37</strong> in advertising fees aka revenue through orders in the <strong><a href="http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW">U.S. store</a></strong>. Sweet - thanks a lot to the purchasers, much appreciated! If that became the weekly average, the running costs for my server would be covered. Feels great that my baby, the blog, may be well on the way to paying its own rent. I will have to make my <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">geo-specific link shortener</a></strong> application more user-friendly though; it is already annoying me a lot to store created links in code. But that&#8217;s on my list anyway; for this week the idea was to create a proof-of-concept and for that, storing the links in code was okay.</p>

<p>I was also able to read a little more in <strong><a href="https://twitter.com/unclebobmartin">Uncle Bob</a></strong>&#8217;s book, <strong><a href="http://r.matthiasnehlsen.com/unclebob-cleancoder/link">The Clean Coder: A Code of Conduct for Professional Programmers (Robert C. Martin Series)</a></strong>. I enjoy this book a lot and I will make sure to share some thoughts on it soon. The main idea about sharing thoughts on what I read is that though I read a lot, I also forget too much too fast. I have been meaning to take notes by chapter for a while now, but I have never really got around to doing it. If I publish my notes, I will be able to force myself to actually take notes. First of all, I want to keep them for my future reference so that I can more easily recap what I learned. If anyone else finds my notes useful, so much the better. More on that soon.</p>

<p>Okay, that&#8217;s it for today. Next week I&#8217;ll be busy with the book chapters, but I also want to try to get back to my work-in-progress <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">article about writing the BirdWatch client in ClojureScript</a></strong>.</p>

<p>Have a great week,
Matthias</p>

<iframe width="160" height="400" src="https://leanpub.com/building-a-system-in-clojure/embed" frameborder="0" allowtransparency="true"></iframe>

]]></content>
  </entry>
  
</feed>
