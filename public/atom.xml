<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2013-06-24T14:56:37+02:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS and Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/"/>
    <updated>2013-06-23T14:36:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework</id>
    <content type="html"><![CDATA[<p>I felt a sudden urge to write a <strong><a href="http://bit.ly/sse-chat-github">chat application</a></strong> during <strong><a href="http://scaladays.org">Scala Days</a></strong>. Writing the server side code in <strong><a href="http://www.scala-lang.org">Scala</a></strong> was fun and only took like 30 minutes. The JavaScript part was not nearly as gratifying. Changing the client to <strong><a href="http://angularjs.org">AngularJS</a></strong> over the last couple of days allowed me to reclaim client side development joy.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-chat.png" title="image" alt="images"></p>

<!-- more -->


<p>Last month I was writing about <strong><a href="http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets/">Server Sent Events vs. WebSockets</a></strong> and decided to go with SSE for my <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> application. In that case the information only flows from server to the client though so I wanted a proof of concept that REST style calls are an appropiate way to communicate back with the server.</p>

<p>I challenged myself to write a chat server for this purpose, with 10 lines of code on the server side (or less). I knew this would be possible thanks to the awesome <strong><a href="http://www.playframework.com/documentation/2.1.1/Iteratees">Play Iteratee library</a></strong>:</p>

<figure class='code'><figcaption><span>Chat Controller</span><a href='https://github.com/matthiasn/sse-chat-example/blob/6d39660cca26ce089c6c80238a155ce6610b3684/app/controllers/ChatApplication.scala'>ChatApplication.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ChatApplication</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** Central hub for distributing chat messages */</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">chatOut</span><span class="o">,</span> <span class="n">chatChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Controller action serving chat page */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span> <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="s">&quot;Chat using Server Sent Events&quot;</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Controller action for POSTing chat messages */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">postMessage</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="n">chatChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="n">body</span><span class="o">);</span> <span class="nc">Ok</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Enumeratee for filtering messages based on room */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">filter</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">filter</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="n">json</span> <span class="o">\</span> <span class="s">&quot;room&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">==</span> <span class="n">room</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Controller action serving activity based on room */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">chatFeed</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">chatOut</span> <span class="o">&amp;&gt;</span> <span class="n">filter</span><span class="o">(</span><span class="n">room</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens here is fairly straightforward if you look at the drawing. The <strong><a href="https://github.com/playframework/Play20/tree/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent object</a></strong> is the central information hub which provides us with a channel to push JSON into. The messages from all clients are pushed into the chatChannel <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Concurrent$$Broadcaster">Broadcaster</a></strong>. The individual streaming connections then attach an Iteratee to the provided chatOut <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumerator">Enumerator</a></strong>, with <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumeratee">Enumeratees</a></strong>  in between.</p>

<p>What is an <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Iteratee">Iteratee</a></strong>? An Iteratee is a function that represents a single step of an ongoing computation. Any state it might have is immutable; supplying input results in a new function / a new Iteratee. This ongoing computation is driven by an Enumerator which keeps track of the latest step. The Enumerator calls the associated Iteratee function with new input when available and then stores that resulting Iteratee (and so on). The way state is handled is somewhat comparable to a fold function that holds intermediate state in an accumulator using an immutable data structure, with the difference here being that the computation can run over an infinite stream.</p>

<p><strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumeratee">Enumeratees</a></strong> are adapters between Enumerators and Iteratees. They allow for example type transformation or filtering. The filter Enumeratee makes sure input is only used when the input matches the criteria, which here is the message being for the correct chat room for a particular stream / client connection. EventSource provides a transforming Enumeratee for wrapping chunks as Server Sent Events.</p>

<p>In the <strong>chatFeed</strong> function we have a chain of Enumerator and two Enumeratees: <strong>chatOut &amp;> filter(room) &amp;> EventSource()</strong> which results in a composed Enumerator. We pass this composed Enumerator into Ok.stream, which internally connects the Enumerator with a simple Iteratee. This simple Iteratee does not hold intermediate state, it only does something for each input item: deliver it as a chunk of bytes to the client over the open HTTP connection.</p>

<p>Let&#8217;s visualize this:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-chat2.png" title="image" alt="images"></p>

<p>A message is pushed into the chatChannel and distributed to all attached Iteratees (wrapped by the filter Enumeratee and the EventSource). The message is then sent to the client as a Server Sent Event, but only if the filter predicate evaluates to true.</p>

<h1>AngularJS Client</h1>

<p>I wrote an <strong><a href="https://github.com/matthiasn/sse-chat/blob/0af191e628a450ca8fd4d41bcbff382011cd0a13/app/assets/javascripts/main.js">initial version</a></strong> using jQuery to manipulate the DOM. It worked fine, just getting there wasn&#8217;t really much fun at all. I would have liked the expressive greatness of <strong><a href="http://www.playframework.com/documentation/2.1.1/ScalaTemplates">templates in Play</a></strong>, but without having to reload the page every time the model changes.</p>

<p>Last week I started learning AngularJS, so I thought I&#8217;d give it a try. The resulting code is not only more than 30% smaller, it also also is a real pleasure to work with. Dynamic views are written in an extended HTML vocabulary which attaches elements on the page to the $scope, which can be seen as the ViewModel of the application. The views are then automatically updated when the associated data changes.</p>

<figure class='code'><figcaption><span>AngularJS Chat View</span><a href='https://github.com/matthiasn/sse-chat/blob/6d39660cca26ce089c6c80238a155ce6610b3684/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ChatCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Your Name: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;user&quot;</span> <span class="na">id=</span><span class="s">&quot;userField&quot;</span> <span class="na">value=</span><span class="s">&quot;John Doe&quot;</span>
</span><span class='line'>          <span class="na">ng-model=</span><span class="s">&quot;user&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;select</span> <span class="na">ng-model=</span><span class="s">&quot;currentRoom&quot;</span> <span class="na">ng-change=</span><span class="s">&quot;setCurrentRoom(currentRoom)&quot;</span>
</span><span class='line'>          <span class="na">ng-options=</span><span class="s">&quot;r.name for r in rooms&quot;</span><span class="nt">&gt;&lt;/select&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;chat&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot; msg&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;msg in msgs | limitTo:-10&quot;</span>
</span><span class='line'>        <span class="na">ng-class=</span><span class="s">&quot;msg.user !== user ? &#39;others&#39; : &#39;&#39;&quot;</span>
</span><span class='line'>        <span class="na">data-ng-show=</span><span class="s">&quot;hidden == false&quot;</span> <span class="na">data-ng-hide=</span><span class="s">&quot;hidden == true&quot;</span>
</span><span class='line'>        <span class="na">data-ng-animate=</span><span class="s">&quot;&#39;fadeIn&#39;&quot;</span><span class="nt">&gt;&lt;br/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;strong&gt;</span> says: <span class="nt">&lt;/strong&gt;&lt;br/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;submitMsg()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            Say something: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;chat&quot;</span> <span class="na">id=</span><span class="s">&quot;textField&quot;</span>
</span><span class='line'>              <span class="na">ng-model=</span><span class="s">&quot;inputText&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">id=</span><span class="s">&quot;saySomething&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span>
</span><span class='line'>              <span class="na">ng-click=</span><span class="s">&quot;submitMsg()&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The latest 10 items within <strong>$scope.msgs</strong> are rendered into the &#8220;chat&#8221; div above. The color of each div is also defined in the view by testing if the current user is the sender of the message and adding css class &#8216;others&#8217; if not. No more direct DOM manipulation. Very nice.</p>

<figure class='code'><figcaption><span>AngularJS Chat Controller</span><a href='https://github.com/matthiasn/sse-chat/blob/6d39660cca26ce089c6c80238a155ce6610b3684/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Controllers */</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;sseChat.controllers&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;sseChat.services&#39;</span><span class="p">]).</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ChatCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">chatModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">rooms</span> <span class="o">=</span> <span class="nx">chatModel</span><span class="p">.</span><span class="nx">getRooms</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">msgs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">inputText</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="s2">&quot;Jane Doe #&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">rooms</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** change current room, restart EventSource connection */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">setCurrentRoom</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span> <span class="o">=</span> <span class="nx">room</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">chatFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">listen</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** posting chat text to server */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">submitMsg</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/chat&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">inputText</span><span class="p">,</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">time</span><span class="o">:</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toUTCString</span><span class="p">(),</span> <span class="nx">room</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">inputText</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** handle incoming messages: add to messages array */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">addMsg</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">msgs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">));</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** start listening on messages from selected room */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">listen</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">chatFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/chatFeed/&quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">chatFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">addMsg</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">listen</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>$scope</strong> is managed by <strong><a href="http://angularjs.org">AngularJS</a></strong> and we declare its properties inside the controller, for example <strong>$scope.msgs</strong> as an empty array. Whenever new messages come in, they are appended to the array, automagically updating the view. Note that manipulations to the data structure that are not triggered by AngularJS itself must be wrapped in an <strong>apply()</strong> call in order to update the UI. That was one of the valuable lessons I learned.</p>

<p>I have to say I am really impressed by AngularJS, it is a great addition to my toolbox. I now feel that client side development will be as much fun as server side development already is with Play Framework. I will probably use this newly gained knowledge in the next version of the <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> application.</p>

<p>Hope you find this useful. Let me know what you think about <strong><a href="http://angularjs.org">AngularJS</a></strong> in combination with <strong><a href="http://www.playframework.com">Play Framework</a></strong>.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Days 2013]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/06/10/scala-days-2013/"/>
    <updated>2013-06-10T10:31:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/06/10/scala-days-2013</id>
    <content type="html"><![CDATA[<p><strong><a href="http://scaladays.org">Scala Days 2013</a></strong> are starting at Hudson Theater in New York City today, with a very promising lineup of presentations. Unfortunately I won&#8217;t get to see all of them live as there are three parallel tracks. So far this is my selection of presentations I want to attend.</p>

<!-- more -->


<h3>Monday, June 10th</h3>

<p><strong><a href="https://twitter.com/odersky">Martin Odersky</a></strong> <br/>
Keynote - Scala with Style <br/>
Hudson Theater, 19:00 - 20:30</p>

<h3>Tuesday, June 11th</h3>

<p><strong><a href="https://twitter.com/etorreborre">Eric Torreborre</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/9:15-10:00/A-Walk-Down-the-Beach%2C-How-Kiama-Helps-Implementing-Distributed-Collections-on-Top-of-Hadoop">A Walk Down the Beach, How Kiama Helps Implementing Distributed Collections on Top of Hadoop</a> <br/>
Metropolis, 09:15 - 10:00</p>

<p><strong><a href="https://twitter.com/viktorklang">Viktor Klang</a></strong> &amp; <strong><a href="https://twitter.com/rolandkuhn">Roland Kuhn</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room1/10:15-11:00/Concurrency-%u2013-The-good%2C-the-bad%2C-the-ugly">Concurrency – The good, the bad, the ugly</a><br/>
Room 4.11, 10:15 - 11:00</p>

<p><strong><a href="https://twitter.com/ccsevers">Christopher Severs</a></strong> &amp; <strong><a href="https://twitter.com/BigDataSc">Vitaly Gordon</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/11:15-12:00/Scalable-and-Flexible-Machine-Learning-With-Scala">Scalable and Flexible Machine Learning With Scala</a><br/>
Metropolis, 11:15 - 12:00</p>

<p><strong><a href="https://twitter.com/kevin_j_brown">Kevin Brown</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/13:30-14:15/Big-Data-Analytics-with-Delite">Big Data Analytics with Delite</a><br/>
Metropolis, 13:30 - 14:15</p>

<p><strong><a href="https://twitter.com/matei_zaharia">Matei Zaharia</a></strong> &amp; <strong><a href="https://twitter.com/rxin">Reynold Xin</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/14:30-15:15/The-Spark-Stack%3A-Fast-and-Expressive-Big-Data-Analytics-in-Scala">The Spark Stack: Fast and Expressive Big Data Analytics in Scala</a><br/>
Metropolis, 14:30 - 15:15</p>

<p><strong><a href="https://twitter.com/josh_wills">Josh Wills</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/15:30-16:15/Scala-for-Data-Pipelines">Scala for Data Pipelines</a><br/>
Metropolis, 15:30 - 16:15</p>

<p><strong><a href="https://twitter.com/Sadache">Sadache Aldrobi</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room1/16:30-17:15/Realtime-Web%2C-The-Urge-for-a-Programming-Model">Realtime Web, The Urge for a Programming Model</a><br/>
Room 4.11, 16:30 - 17:15</p>

<h3>Wednesday, June 12th</h3>

<p><strong><a href="https://twitter.com/springrod">Rod Johnson</a></strong>: <br/>
Keynote - Scala in 2018<br/>
Hudson Theater, 08:45 - 10:00</p>

<p><strong><a href="https://twitter.com/xeno_by">Eugene Burmako</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room1/10:15-11:00/Half-a-Year-in-Macro-Paradise">Half a Year in Macro Paradise</a><br/>
Room 4.11, 10:15 - 11:00</p>

<p><strong><a href="https://twitter.com/andrey_cheptsov">Andrey Cheptsov</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room3/11:15-12:00/Scala-Developer-Tools-in-IntelliJ-IDEA%3A-SBT%2C-Play-and-Scalate">Scala Developer Tools in IntelliJ IDEA: SBT, Play and Scalate</a> <br/>
Metropolis, 11:15 - 12:00</p>

<p><strong><a href="https://twitter.com/philippkhaller">Philipp Haller</a></strong> &amp;
<strong><a href="https://twitter.com/retronym">Jason Zaugg</a></strong>: <br/>
<a href="http://scaladays.org/#/june-12/room1/13:30-14:15/Scala-Async%3A-A-New-Way-to-Simplify-Asynchronous-Code-%28Make-the-Compiler-Do-It%21%29">Scala Async: A New Way to Simplify Asynchronous Code</a><br/>
Room 4.11, 13:30 - 14:15</p>

<p><strong><a href="https://twitter.com/tathadas">Tathagata Das</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room2/14:30-15:15/Spark-Streaming%3A-Fast-Distributed-Stream-Processing-with-a-High-Level-API">Spark Streaming: Fast Distributed Stream Processing with a High-Level API</a><br/>
Room 3.11, 14:30 - 15:15</p>

<p><strong>Rex Kerr</strong>:<br/>
<a href="http://scaladays.org/#/june-12/room2/15:30-16:15/Designing-for-performance">Designing for performance</a><br/>
Room 3.11, 15:30 - 16:15</p>

<p><strong><a href="https://twitter.com/sjrdoeraene">Sébastien Doeraene</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room2/16:30-17:15/Scala.js%3A-write-in-Scala-for-the-browser">Scala.js: write in Scala for the browser</a><br/>
Room 3.11, 16:30 - 17:15</p>

<p>In the next couple of days I will write about presentations and topics I found particularly inspiring.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Play applications with ZeroMQ]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/06/02/scaling-play-applications-with-zeromq/"/>
    <updated>2013-06-02T07:48:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/06/02/scaling-play-applications-with-zeromq</id>
    <content type="html"><![CDATA[<p>Let us assume for a second that the <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> application needed to handle more load than a single server could handle. The current version could not just be run as multiple instances because then each one would establish a connection to Twitter, of which there is supposed to be only one per application. It would work to split the application into a TwitterClient part and a user-facing controller part, of which multiple instances could run as needed. How do we connect these separate parts of the application though?</p>

<!-- more -->


<p>One possible approach is using an HTTP stream between the parts as well, basically using the TwitterClient application as a hub for delivering the Twitter stream to multiple instances as needed. While this works, it is not an elegant solution: how do I handle reconnects? How do I even detect them? I&#8217;d rather not deal with this.</p>

<p>An Akka cluster should work. This approach seems more promising, as all the messaging elements are already there. But this does not offer the best possible flexibility, as it requires all participants to use Akka / the JVM / the same version of Scala. I&#8217;d rather not limit myself to one technology stack if not absolutely necessary.</p>

<p>I would prefer a solution that is completely agnostic of the technology each building block of the whole application uses. I might want to run statistics using <strong><a href="http://www.numpy.org">numpy</a></strong> in the future or whatever. This should be possible without much glue code. HTTP is obviously technology independent but it falls short due to the reconnect issues.</p>

<p>Turns out there is a great solution for polyglot applications: <strong><a href="http://www.zeromq.org/">ZeroMQ</a></strong>, a socket toolbox offering bindings for <strong><a href="http://zguide.zeromq.org/page:all">30+ languages</a></strong>. Unlike broker-centered JMS or RabbitMQ, ZeroMQ is a messaging library, not a full messaging solution. There are no brokers; instead we get access to TCP sockets (fast) that we can use to build complex communication patterns. I cannot say it any better than this:</p>

<blockquote><p>What ZeroMQ does is create an API that looks a lot like sockets, and feels the same, but gives you the messaging styles you actually want. By simply specifying the type of socket when you call zmq_socket you can have multicast, request/reply, and many other styles.</p><footer><strong>Zed Shaw on ZeroMQ</strong> <cite><a href='http://www.zeromq.org/intro:read-the-manual'>www.zeromq.org/&hellip;</a></cite></footer></blockquote>


<p>Please check out these articles for more in-depth information about ZeroMQ:</p>

<ul>
<li><strong><a href="http://nichol.as/zeromq-an-introduction">ZeroMQ an introduction, by Nicholas Piël</a></strong></li>
<li><strong><a href="http://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">ZeroMQ: Modern &amp; Fast Networking Stack, by Ilya Grigorik</a></strong></li>
<li><strong><a href="http://www.josetteorama.com/zeromq/">The Appeal and Controversy of ZeroMQ, by Pieter Hintjens</a></strong></li>
</ul>


<p>Let us put ZeroMQ to practical use. First thing to do is to install ZeroMQ. One thing to note is that the current Scala bindings require ZeroMQ version 2. On a Mac with homebrew installed you can do this (or refer to the <strong><a href="http://www.zeromq.org/area:download">ZeroMQ instructions</a></strong>):</p>

<figure class='code'><figcaption><span>Installing ZeroMQ (Mac) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install zeromq
</span><span class='line'>brew switch zeromq 2.2.0
</span></code></pre></td></tr></table></div></figure>


<p>For demonstration purposes I will publish and consume all messages from within the same application. I&#8217;m actually working on a more sophisticated version of the BirdWatch application that uses ZeroMQ between different applications running in separate JVMs, but more about that another time. For now I will split the TwitterClient class into separate TweetsPublisher and TweetsConsumer classes within the same application and let them communicate using ZeroMQ publish/subscribe topics. Check out this <strong><a href="https://github.com/matthiasn/BirdWatch/tree/130602-ZeroMQ">branch</a></strong> on GitHub.</p>

<figure class='code'><figcaption><span>TweetsPublisher</span><a href='https://github.com/matthiasn/BirdWatch/blob/980916bcecb7c65e34a1a1c983eb02ccede00674/app/actors/TweetsPublisher.scala'>TweetsPublisher.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** ZeroMQ Publishing Socket (clients attach to this). Specify IP </span>
</span><span class='line'><span class="cm"> *  address or use *:PORT if you want this open to outside world.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetPubSocket</span> <span class="k">=</span> <span class="nc">ZeroMQExtension</span><span class="o">(</span><span class="n">system</span><span class="o">).</span><span class="n">newSocket</span><span class="o">(</span><span class="nc">SocketType</span><span class="o">.</span><span class="nc">Pub</span><span class="o">,</span>
</span><span class='line'>  <span class="nc">Bind</span><span class="o">(</span><span class="s">&quot;tcp://127.0.0.1:21231&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Send message to socket (yes, it is that simple)*/</span>
</span><span class='line'><span class="n">tweetPubSocket</span> <span class="o">!</span> <span class="nc">ZMQMessage</span><span class="o">(</span><span class="nc">Seq</span><span class="o">(</span><span class="nc">Frame</span><span class="o">(</span><span class="s">&quot;birdwatch.tweets&quot;</span><span class="o">),</span> <span class="nc">Frame</span><span class="o">(</span><span class="n">json</span><span class="o">.</span><span class="n">toString</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>TweetsConsumer</span><a href='https://github.com/matthiasn/BirdWatch/blob/980916bcecb7c65e34a1a1c983eb02ccede00674/app/actors/TweetsConsumer.scala'>TweetsConsumer.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Actor listening to Tweets socket */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TweetsListener</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">ZMQMessage</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="cm">/** payload is Array[Byte], make String and parse into JSON*/</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="n">payload</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/** read into Tweet case class representation, push onto channel */</span>
</span><span class='line'>      <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">JsError</span> <span class="o">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Socket with attached listener */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetsListener</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">TweetsListener</span><span class="o">()),</span> <span class="s">&quot;TweetsListener&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetsSocket</span> <span class="k">=</span> <span class="nc">ZeroMQExtension</span><span class="o">(</span><span class="n">system</span><span class="o">).</span><span class="n">newSocket</span><span class="o">(</span><span class="nc">SocketType</span><span class="o">.</span><span class="nc">Sub</span><span class="o">,</span>
</span><span class='line'>  <span class="nc">Listener</span><span class="o">(</span><span class="n">tweetsListener</span><span class="o">),</span> <span class="nc">Connect</span><span class="o">(</span><span class="s">&quot;tcp://127.0.0.1:21231&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nc">Subscribe</span><span class="o">(</span><span class="s">&quot;birdwatch.tweets&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This additional layer of indirection opens up a wide range of possibilities. Scaling becomes straightforward, we can attach pretty much as many of the client-facing controller applications (once split up) to the Tweet publishing application, without even having to individually configure them. Have them all point to the same publishing socket, spread the load using for example <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> and you&#8217;re done.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/zeromq.png" title="image" alt="images"></p>

<p>We can also swap individual parts of the application for better ones. I personally do not like the current approach to consuming the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> as used in <strong><a href="https://github.com/matthiasn/BirdWatch/blob/980916bcecb7c65e34a1a1c983eb02ccede00674/app/actors/TweetsPublisher.scala">TweetsPublisher.scala</a></strong> and I would like to replace it with the <strong><a href="https://dev.twitter.com/blog/the-hosebird-client-streaming-library">Twitter Hosebird Client (hbc)</a></strong>. If folks at Twitter have developed this for usage in their own projects, I have no doubt they can do this much better than my simple reconnect strategy possibly could. Last time I checked, hbc was not compatible with Scala version 2.10 used in Play 2.1 though, but thanks to ZeroMQ, the library can be run in its native habitat (Java application without having to worry about which version of Scala is used in some embedded library) and publish Tweets onto a ZeroMQ socket. The TweetsConsumer then would only have to point to another socket address. Anyone experienced with using ZeroMQ in a Java application interested in writing this client?</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making BirdWatch Interactive]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/26/making-birdwatch-interactive/"/>
    <updated>2013-05-26T20:45:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/26/making-birdwatch-interactive</id>
    <content type="html"><![CDATA[<p>Some weeks ago when I started working on the <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> project, I basically wanted to play around with Iteratees and stream information to the browser, any information. But in the meantime, I have become more excited in making Tweet visualizations useful and interesting. First I needed to move the reasoning over to the client though because the server side reasoning did not scale well at all. In the latest update I address both client-side reasoning and the first steps in making the application interactive.</p>

<!-- more -->


<p>My other application on GitHub, <strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong>, was quite useful in identifying where the scalability problem was. When getting as many as 1% of all Tweets from Twitter, which is the current limit for the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> without some extra agreement with Twitter (amounting to 3-4 million Tweets a day), server-side calculations for each client connection only allowed somewhere between ten and twenty concurrent connections whereas moving the calculations over to the client side now allows about 600 concurrent connections to a single server under the same load.</p>

<p>With that problem out of the way, I also added interactive functionality where the words in the word cloud and in the bar chart are now clickable, allowing drilling into the data. Currently this works with a logical AND. Only previous and live Tweets are now shown that contain all of the search words. The queries are resources that can be bookmarked, with the query encoded in the URL, comparable to a Google search.</p>

<p>Ok, this is becoming a little more interesting than the previous version where the observer did not have any influence over what was shown on the screen. I have used the current version of <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> for following Tweets about the Champions League final between Bayern München and Borussia Dortmund at Wembley stadium (besides the TV, of course):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/champions_league.png" title="image" alt="images"></p>

<p>It was interesting to see a correlation between events in the game and the teams being mentioned in the Tweets. But that experience also showed me what is missing and could be addressed in a future version: a time component. I would find it interesting to track words and hashtags over time. That will be much more interesting and shall come in a future version.</p>

<p>Let&#8217;s look at a few implementation details in the current version:</p>

<h4>Filter Enumeratee</h4>

<p>Tweets from the TwitterClient are delivered to connected clients using a channel and enumerator provided by Concurrent.broadcast in the Play Iteratee API.</p>

<figure class='code'><figcaption><span>Tweet Enumerator</span><a href='https://github.com/matthiasn/BirdWatch/blob/74fbdfa568bbcc3f4c6c14de45b70a8bd6e828dc/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** system-wide channel / enumerator for attaching SSE streams to clients*/</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">tweetsOut</span><span class="o">,</span> <span class="n">tweetChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Tweets are from there fed into the EventSource object which acts as a simple Iteratee that does nothing more than generate a chunked HTTP response, with &#8220;data: &#8221; prepended to every piece of data (Tweets as <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> in this case), like this:</p>

<figure class='code'><figcaption><span>One Tweet via SSE </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;tweet_id&quot;</span><span class="o">:</span><span class="mi">339406567420080130</span><span class="p">,</span><span class="s2">&quot;img_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://a0.twimg.com/profile_images/3669634376/302cdf34520f1ffd45395438da689c3f_normal.jpeg&quot;</span><span class="p">,</span><span class="s2">&quot;profile_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://twitter.com/muhammadmucin&quot;</span><span class="p">,</span><span class="s2">&quot;screen_name&quot;</span><span class="o">:</span><span class="s2">&quot;muhammadmucin&quot;</span><span class="p">,</span><span class="s2">&quot;text&quot;</span><span class="o">:</span><span class="s2">&quot;RT @Milanello: Video: Nesta vs. Juventus (Champions League final in 2003): http://t.co/heGrklYXo6 #TempestaPerfettaNesta&quot;</span><span class="p">,</span><span class="s2">&quot;followers&quot;</span><span class="o">:</span><span class="mi">361</span><span class="p">,</span><span class="s2">&quot;words&quot;</span><span class="o">:</span><span class="mi">13</span><span class="p">,</span><span class="s2">&quot;chars&quot;</span><span class="o">:</span><span class="mi">120</span><span class="p">,</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="mi">1369755806000</span><span class="p">,</span><span class="s2">&quot;hashtags&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;text&quot;</span><span class="o">:</span><span class="s2">&quot;TempestaPerfettaNesta&quot;</span><span class="p">,</span><span class="s2">&quot;indices&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">98</span><span class="p">,</span><span class="mi">120</span><span class="p">]}],</span><span class="s2">&quot;user_mentions&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;screen_name&quot;</span><span class="o">:</span><span class="s2">&quot;Milanello&quot;</span><span class="p">,</span><span class="s2">&quot;indices&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">13</span><span class="p">]}],</span><span class="s2">&quot;urls&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;url&quot;</span><span class="o">:</span><span class="s2">&quot;http://t.co/heGrklYXo6&quot;</span><span class="p">,</span><span class="s2">&quot;expanded_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://sulia.com/milanello/f/43a24f3c-54e5-48ba-9653-508476c3fbc0/&quot;</span><span class="p">,</span><span class="s2">&quot;display_url&quot;</span><span class="o">:</span><span class="s2">&quot;sulia.com/milanello/f/43â€¦&quot;</span><span class="p">}],</span><span class="s2">&quot;timeAgo&quot;</span><span class="o">:</span><span class="s2">&quot;367 ms ago&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I already used a transforming Enumeratee before, for transforming Tweets in case class form into <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>. It is very simple to put another Enumeratee into this chain for filtering only those Tweets that contain the desired search words:</p>

<figure class='code'><figcaption><span>Enumerator | Enumeratees | Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/74fbdfa568bbcc3f4c6c14de45b70a8bd6e828dc/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Enumeratee: Tweet to JsValue adapter */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetToJson</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">t</span> <span class="k">=&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Tests if all comma-separated words in q are contained in Tweet.text  */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">containsAll</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">tokens</span> <span class="k">=</span> <span class="n">q</span><span class="o">.</span><span class="n">toLowerCase</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">matches</span> <span class="k">=</span> <span class="n">tokens</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">token</span><span class="o">)</span> <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">toLowerCase</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">token</span><span class="o">)</span> <span class="k">=&gt;</span>  <span class="n">acc</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">token</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">matches</span> <span class="o">==</span> <span class="n">tokens</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Filtering Enumeratee applying containsAll function*/</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">textFilter</span><span class="o">(</span><span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">filter</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=&gt;</span> <span class="n">containsAll</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">q</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Serves Tweets as Server Sent Events over HTTP connection */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">tweetFeed</span><span class="o">(</span><span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">RequestLogger</span><span class="o">.</span><span class="n">log</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="s">&quot;/tweetFeed&quot;</span><span class="o">,</span> <span class="mi">200</span><span class="o">)</span>
</span><span class='line'>      <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="nc">TwitterClient</span><span class="o">.</span><span class="n">tweetsOut</span>
</span><span class='line'>        <span class="o">&amp;&gt;</span> <span class="n">textFilter</span><span class="o">(</span><span class="n">q</span><span class="o">)</span>
</span><span class='line'>        <span class="o">&amp;&gt;</span> <span class="n">tweetToJson</span>
</span><span class='line'>        <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The filtering Enumeratee above is nothing more than a convenient way to run a predicate function on every data item and pass data down the chain only when the predicate function evaluates to true.</p>

<h4>Queries as bookmarkable resources</h4>

<p>Queries against the system are now represented by a particular URL that encodes the query string. This URL represents the resource of that particular query within a stream of Tweets at the time of the request. Examples: <strong><a href="http://bit.ly/bw_dortmund_bayern">Dortmund AND Bayern</a></strong> or <strong><a href="http://bit.ly/wembley_soccer">Wembley AND soccer</a></strong>.</p>

<h4>No more image processing</h4>

<p>Initially I was playing around with image processing on the server side. But once that was working with a supervised actor hierarchy, it really wasn&#8217;t all that interesting any more. I know that I can easily process 4 million of the large Twitter profile images a day without putting substantial load on my quadcore server. That&#8217;s what I wanted to know. Other than that, the images were littering my harddrive space, without being useful enough for me to keep them. I removed that functionality from the application.</p>

<h4>Client-side Wordcount implementation in Coffeescript</h4>

<p>I wanted to move the Wordcount functionality into the client when I discovered that <strong><a href="http://www.playframework.com">Play Framework</a></strong> comes with nice features for <strong><a href="http://www.playframework.com/documentation/2.1.1/AssetsCoffeeScript">compiling CoffeeScript into JavaScript</a></strong>. I have done a little bit with <strong><a href="http://coffeescript.org">CoffeeScript</a></strong> in the past and I remembered finding it pleasant enough to give it another try. But that will be the topic for a future article.</p>

<h4>Performance of the current version</h4>

<p>Right before the Champions League final, I measured the performance for the search words I had selected for the game. At that time I was receiving about 4 Tweets per second, which I was then able to simultaneously stream to 10,000 clients (using <strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong>).</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/champions_league_10k.png" title="image" alt="images"></p>

<p>Not too bad, I&#8217;m very glad the <strong><a href="http://www.playframework.com">Play Framework</a></strong> does not spawn a thread for every single one of those connections. I have not filtered those Tweets but instead delivered all Tweets to all clients. It remains to be seen how much of a performance hit the matching algorithm will incur.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3.js and Play Framework: Getting Started]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/18/using-d3js-with-play/"/>
    <updated>2013-05-18T13:21:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/18/using-d3js-with-play</id>
    <content type="html"><![CDATA[<p>Data without visualization is dull. This is particularly true for changing data. We seem to be much better at noticing moving things than we are at noticing changes between spreadsheet cells or other text. That&#8217;s okay. I&#8217;m actually a big fan of that. Text does not usually threaten to run me over when I attempt to cross a street. So let&#8217;s create moving things with <strong><a href="http://d3js.org">D3.js</a></strong> and drive the animation reactively with data from a server written in <strong><a href="http://www.scala-lang.org">Scala</a></strong> using the <strong><a href="http://www.playframework.com">Play Framework</a></strong>.</p>

<!-- more -->


<p>In the <strong><a href="http://bit.ly/sse_load_testing">last article</a></strong> I have introduced <strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong>, a load testing tool for <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Event (SSE)</a></strong> streams. With that tool I gather data that I want to present in the browser using animated barcharts, as you can see live <strong><a href="http://bit.ly/sse-perf-live">here</a></strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-perf-screenshot.png" title="image" alt="images"></p>

<p>Creating the animated barchart is a little more involved. Let us start with something really simple today. Luckily I have a problem to solve that calls for a simple animation:
<strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong> when running might or might not have have established connections hitting a server. If it does, it becomes immediately obvious that the connection to the <strong><a href="http://bit.ly/sse-perf-live">sse-perf server</a></strong> is alive because the bars are animated. What if there are no client connections and thus there is nothing to report except zero values? I can have these zeros fly into the chart instead of the bars, but that looks really awful, I&#8217;ve tried it. But without anything moving, the connection looks dead. What do I do?</p>

<p>How about a visual heartbeat? Just a simple red dot that gets bigger when a new Server Sent Event is received and then shrinks to normal size again. This succeeds in convincing me that what I am looking at is still alive:</p>

<iframe width="40" height="40" src="http://matthiasnehlsen.com/iframes/heartbeat.html" frameborder="0" allowfullscreen></iframe>


<p>Let&#8217;s implement that and drive it by a Server Sent Event stream. First of all, we need a div that will hold our animation which we can style and position by css however we like:</p>

<figure class='code'><figcaption><span>heartbeat div</span><a href='https://github.com/matthiasn/sse-perf/blob/f0feae4d2a82c136eb351d2a99e18b12f8e2f953/app/views/metrics.scala.html'>from metrics.scala.html</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;heartbeat&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  @helper.requireJs(core = routes.Assets.at(&quot;javascripts/require.js&quot;).url,
</span><span class='line'>        module = routes.Assets.at(&quot;javascripts/main&quot;).url)
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>#heartbeat css</span><a href='https://github.com/matthiasn/sse-perf/blob/f0feae4d2a82c136eb351d2a99e18b12f8e2f953/public/stylesheets/main.css'>from main.css </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#heartbeat</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="m">530px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us put all JavaScript in modules conforming to the <strong><a href="http://requirejs.org/docs/whyamd.html">require.js / AMD pattern</a></strong>. This prevents global namespace pollution, potentially loads faster and makes for a cleaner design. <strong><a href="http://www.playframework.com/documentation/2.1.0/RequireJS-support">Play handles</a></strong> loading the JavaScript with require.js for us with @helper.requireJs.</p>

<p>The best thing with this approach is probably that Play will now run the closure compiler over our JavaScript code and show problems immediately by failing the build:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/closure_comp_err.png" title="image" alt="images"></p>

<p>Sweet! Here are the excerpts of the JavaScript code that we need for the heartbeat. Full code is available on <strong><a href="http://bit.ly/sse-perf">GitHub</a></strong> as usual.</p>

<figure class='code'><figcaption><span>main.js (require.js compatible)</span><a href='https://github.com/matthiasn/sse-perf/blob/f0feae4d2a82c136eb351d2a99e18b12f8e2f953/app/assets/javascripts/main.js'>from main.js</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s2">&quot;barchart&quot;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chart</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">heartbeat</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#heartbeat&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">feed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/metricsFeed&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">heartbeat</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">feed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We draw the dot first. Using the global d3 object, we select our #heartbeat div, append an <strong><a href="https://de.wikipedia.org/wiki/Scalable_Vector_Graphics">svg</a></strong> of size 20px by 20px, append a circle at x=10px, y=10px, give it a radius of 3px and fill it red. Thanks to <strong><a href="http://bit.ly/chaining-methods">method chaining</a></strong>, the D3 code almost reads like prose.</p>

<p>We then establish an EventSource(&#8220;/metricsFeed&#8221;) connection to the metrics feed and assign a handler function as an event listener to the &#8220;message&#8221; event. <strong><a href="http://bit.ly/113clAb">See the stream for yourself</a></strong>.  We can use the handler function to trigger the animation.</p>

<p>Once again, the D3 code reads like a sentence: using the heartbeat object created above, we transition the radius from the initial 3px to 7px, to 3px, to 6px and back to 3px, all of these with a duration of 700ms each.</p>

<p>The stream I use as a trigger has data every 3 seconds. I found that it looks <strong><a href="http://en.wikipedia.org/wiki/Bradycardia">unhealthy</a></strong> if the heartbeat only animates 20 times a second, so I do the expansion / contraction cycle twice on each event. <strong><a href="http://d3js.org">D3.js</a></strong> is great; it has a bit of a learning curve but it is well worth it because it will give you full control over everything you could possibly want to tweak on your page.</p>

<p>This is it for today, check back for more elaborate examples in the future. If you haven&#8217;t already, how about you <strong><a href="http://matthiasnehlsen.us7.list-manage1.com/subscribe/post?u=798fd7b50a1d9cc58be41c2af&amp;id=eb7a7193c5">subscribe to the mailing list</a></strong> so you won&#8217;t miss anything?</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing Server Sent Event Streams]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/11/load-testing-server-sent-event-streams/"/>
    <updated>2013-05-11T22:07:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/11/load-testing-server-sent-event-streams</id>
    <content type="html"><![CDATA[<p><strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> turned out to be a great choice for what I am <strong><a href="http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets/">trying to achieve</a></strong>. Let&#8217;s review that quickly. I want to transmit information in the form of <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> containing information about Tweets to browsers, as fast as possible, with much less information flowing the other direction. Now I needed to benchmark the &#8220;as fast as possible&#8221; part so I would be more informed for future architectural decisions. For this I have started <strong><a href="https://github.com/matthiasn/sse-perf">sse-perf</a></strong>: a reactive web application that consumes many (like thousands) concurrent SSE streams and then animates the results (MB transferred, messages / chunks per second and such) using <strong><a href="http://d3js.org">D3.js</a></strong>.</p>

<!-- more -->


<p>In the current version of the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> the major part of the statistical reasoning is done on the server side, individually for each client. That is not a good idea, it just happened because I had some of the code lying around, and that was in Scala so the options were server side or re-write. I chose server-side, knowing that this technical debt would have to be addressed at some point. First of all I needed metrics on how bad the situation actually was. I found a search word that guarantees high traffic up to the &#8220;1% of all Tweets at the time&#8221; limit imposed by Twitter: &#8220;love&#8221;. At least at all times I have tested it, this cute word will saturate your <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> connection, unless you have a special agreement with them. This amounts to about 35 Tweets per second or approximately 3,000,000 Tweets per day. Any modern server should easily be able to process this number of messages and distribute them to a large number of clients, hundreds of them at the same time. Unlike <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connections, <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> streams are easy to test; it is just an HTTP connection that delivers data not at once but one chunk at a time, like this:</p>

<figure class='code'><figcaption><span>One Tweet via SSE </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;tweet_id&quot;</span><span class="o">:</span><span class="mi">334409665431625728</span><span class="p">,</span><span class="s2">&quot;img_url_local&quot;</span><span class="o">:</span><span class="s2">&quot;/images/334409665431625728.png&quot;</span><span class="p">,</span><span class="s2">&quot;img_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://a0.twimg.com/profile_images/3637039114/94d639a38a9040b32397642cddbf685f_normal.jpeg&quot;</span><span class="p">,</span><span class="s2">&quot;screen_name&quot;</span><span class="o">:</span><span class="s2">&quot;Official_TMC101&quot;</span><span class="p">,</span><span class="s2">&quot;text&quot;</span><span class="o">:</span><span class="s2">&quot;This week Daft Punk holds the number 1 spot with Get Lucky @DaftPunk_Online #getlucky&quot;</span><span class="p">,</span><span class="s2">&quot;followers&quot;</span><span class="o">:</span><span class="mi">34</span><span class="p">,</span><span class="s2">&quot;words&quot;</span><span class="o">:</span><span class="mi">14</span><span class="p">,</span><span class="s2">&quot;chars&quot;</span><span class="o">:</span><span class="mi">85</span><span class="p">,</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="mi">1368564451000</span><span class="p">,</span><span class="s2">&quot;timeAgo&quot;</span><span class="o">:</span><span class="s2">&quot;1 sec 141 ms ago&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see this yourself by opening the Tweet stream on my <strong><a href="http://birdwatch.matthiasnehlsen.com/tweetFeedCF">BirdWatch server</a></strong>. This is one of the streams from a much-extended version of BirdWatch that I&#8217;ve been working on in the meantime, which allows interacting with the data in interesting ways on the client side. This version is not ready for publishing yet, but I expect to have something to show fairly soon. Pushing the Tweets to the client and reasoning about the data there was already decided on, and benchmarking confirmed how problematic the old solution was. At first I used wget in different terminal sessions with the URL of the link above, and I would max out the CPU with tens of concurrent connections already when consuming the full 1% of Tweets. That is orders of magnitude less than what I expect from a modern server, but completely makes sense when looking at what heavy work the server actually has to perform.</p>

<p>So I started working on delivering streams for client side reasoning. That fixed exactly what I expected it to fix, allowing orders of magnitude more concurrent connections. But now opening many terminal sessions was a much less appealing workaround. I looked around for testing tools a little and soon realized that writing a reactive web application for load testing myself would be a good learning exercise, and it would also give me the opportunity for some more experience in using <strong><a href="http://d3js.org">D3.js</a></strong> for animating the results. This it what it looks like (but with animated bar charts showing live data):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-perf-screenshot.png" title="image" alt="images"></p>

<p>I have put the code on <strong><a href="https://github.com/matthiasn/sse-perf">GitHub</a></strong> and I also run it live, putting a load of 1,500 connections on the BirdWatch server, in production. The server is not processing the full 1% stream though, and with the current load the 1,500 connections only cause a CPU utilization of 40-60% in <strong><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/top.1.html">top</a></strong> (out of possible 800% on a quadcore machine with HyperThreading). With the full 1% stream from Twitter I can currently connect up to 700 to 800 concurrent connections without adding significant delay, thus delivering about 1.8 Billion messages a day. That sounds much more like what I was looking for. I have found that the messages per second max out at around 28,000. If these are reached then additional clients will still get the messages but they will queue up more and more. I have found that the server recovers after decreasing the number of concurrent connections, allowing all messages to be delivered to the connected clients eventually. This makes the server fail on overload very gracefully.</p>

<p><strong><a href="http://birdwatch.matthiasnehlsen.com:9001">Have a look for yourself</a></strong>. Changing the load on the server requires authentication, but you will surely find this out yourself.</p>

<p>In the next posts I will introduce animating live streaming data on the client and also share what I have learned when establishing thousands of connections at the same time, using <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.ws.WS$">WS</a></strong> from the <strong><a href="http://www.playframework.com">Play Framework</a></strong>. Let me know which one you would like to read first.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Sent Events vs. WebSockets]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets/"/>
    <updated>2013-05-01T14:59:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets</id>
    <content type="html"><![CDATA[<p>So far I have been using a <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connection to push data to the client in the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application, with mixed feelings. <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> communication is a separate communication protocol from <strong><a href="http://tools.ietf.org/html/rfc2616">HTTP</a></strong>, introducing new problems in the network layer, as I should soon find out. But there is an alternative: <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>.</p>

<!-- more -->


<p>For <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>, I wanted to experiment with having a proxy between the outside world and the Play application:</p>

<ul>
<li><strong>Security</strong>: the application is not directly exposed to outside world, authentication and encryption could be done at proxy layer</li>
<li><strong>Caching</strong>: Play is designed for dynamic content, I&#8217;d rather let a proxy handle and cache static files</li>
<li><strong>Load-Balancing</strong>: the proxy can distribute load among many instances of Play, also providing failover automatically</li>
</ul>


<p>My choice for the proxy was <strong><a href="http://nginx.org/en/">Nginx</a></strong>, which as I should soon learn does not support WebSocket proxying in the current stable release. Supposedly newer <strong><a href="http://nginx.org/en/docs/http/websocket.html">development versions</a></strong> would support it, so I compiled the latest version from source and installed Nginx on my Ubuntu server. It did work when accessing the remote server from my devices, but for some reason whenever I asked other people to try the link I sent them, their WebSocket connection did not establish. I tried to find the problem for a short while but soon realized that I was more interested in developing my own application than in debugging my attempt at a WebSocket proxy configuration in a beta version of <strong><a href="http://nginx.org/en/">Nginx</a></strong>.</p>

<p>Why did I want to use WebSockets in the first place? The protocol promises fast, bi-directional communication between client and server. Looking at my application, that is not exactly the requirement though. I need the fastest possible way of delivering lots of <strong><a href="https://tools.ietf.org/html/rfc4627">JSON</a></strong> data from the server to the client. The opposite is not true though. In the other direction, there will only be occasional control messages, nothing that could not be handled by <strong><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">REST</a></strong> style web service calls. REST web service calls are actually much nicer semantically for interacting with the application, as there is a rich set of <strong><a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP verbs / methods</a></strong> with meaning (<strong>GET</strong>, <strong>PUT</strong>, <strong>POST</strong>, <strong>DELETE</strong>) and also a rich set of <strong><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">status codes</a></strong> (e.g. <strong>200</strong>, <strong>401</strong>, <strong>404</strong>, hopefully not <strong>500</strong>). With WebSockets, I would have to start from scratch with control messages from client to server and parse every single thing from <strong><a href="https://tools.ietf.org/html/rfc4627">JSON</a></strong>.</p>

<p>This realization, together with the frustration from my <strong><a href="http://nginx.org/en/">Nginx</a></strong> experience with the <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> protocol, made me reconsider <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>. These are transmitted over a plain <strong><a href="http://tools.ietf.org/html/rfc2616">HTTP</a></strong> connection, which should just work with Nginx or any other proxy out there. Let&#8217;s find out.</p>

<p>The changes I needed to make are surprisingly simple:</p>

<figure class='code'><figcaption><span>Enumerating new Tweets into WebSocket connection</span><a href='https://github.com/matthiasn/BirdWatch/blob/466cce67a38265e311970466b3bf5529fda54f12/app/controllers/Twitter.scalaTwitter.scala'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Serves WebSocket connection updating the UI */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetFeed</span> <span class="k">=</span> <span class="nc">WebSocket</span><span class="o">.</span><span class="n">using</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="cm">/** Creates enumerator and channel for Strings through Concurrent factory object</span>
</span><span class='line'><span class="cm">     * for pushing data through the WebSocket */</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">wsOutChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="kt">...</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">)</span> <span class="c1">// in and out channels for WebSocket connection</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes:</p>

<figure class='code'><figcaption><span>Enumerating new Tweets into HTTP connection</span><a href='https://github.com/matthiasn/BirdWatch/blob/b193b18749b8c3bc2c7c6f78acfdb6e7adb24cc9/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Serves Server Sent Events over HTTP connection */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetFeed</span><span class="o">()</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Creates enumerator and channel for Strings through Concurrent factory object</span>
</span><span class='line'><span class="cm">     * for pushing data through the WebSocket */</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">wsOutChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="kt">...</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">.</span><span class="n">feed</span><span class="o">(</span><span class="n">out</span> <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before, any Tweet coming through the wsOutChannel would be enumerated into the WebSocket by returning the (in: Iteratee, out: Enumerator) whereas now we need to attach the <strong>out</strong> Enumerator to the Ok result feed. That is all on the server side.</p>

<p>The changes on the client side are just as simple:</p>

<figure class='code'><figcaption><span>WebSocket Event Handling</span><a href='https://github.com/matthiasn/BirdWatch/blob/466cce67a38265e311970466b3bf5529fda54f12/app/views/twitter/tweets.scala.html'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s2">&quot;@routes.Twitter.tweetFeed().webSocketURL()&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ws</span><span class="p">.</span><span class="nx">onMessage</span> <span class="o">=</span> <span class="nx">handler</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes:</p>

<figure class='code'><figcaption><span>EventSource Event Handling</span><a href='https://github.com/matthiasn/BirdWatch/blob/ac4d9488c46aeb96e6f01e09c13fcb4598e11039/app/views/twitter/tweets.scala.html'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">feed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s1">&#39;/tweetFeed&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">feed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I expected the SSE solution to on par with the previous WebSocket solution in terms of performance. Interestingly though, with nothing else changed, SSE is a little or a lot faster, depending on the browser. For pre-loading of 500 Tweets on loading the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> page in the browser, it took on average:</p>

<ul>
<li>Safari: <strong>7 seconds</strong> using SSE and <strong>16 seconds</strong> using WebSockets</li>
<li>Chrome: <strong>5 seconds</strong> using SSE and <strong>8 seconds</strong> using WebSockets</li>
<li>Firefox: <strong>6 seconds</strong> using SSE and <strong>8 seconds</strong> using WebSockets</li>
</ul>


<p>Server Sent Events win 3:0. The better performance is noticable in all browsers, especially in Safari though, which seems to have a less-than-ideal WebSocket implementation.</p>

<p>This was actually super simple to implement, it took much longer to write this blog post than to implement a working solution using Server Sent Events. <strong><a href="http://www.playframework.com">Play Framework</a></strong> really does make me much more productive.</p>

<p>With these changes implemented, a simple <strong><a href="http://nginx.org/en/">Nginx</a></strong> configuration inspired by the <strong><a href="http://www.playframework.com/documentation/2.1.1/HTTPServer">Play documentation</a></strong> works like a charm:</p>

<figure class='code'><figcaption><span>nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user www-data;
</span><span class='line'>worker_processes 4;
</span><span class='line'>pid /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 768;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  proxy_buffering    off;
</span><span class='line'>  proxy_set_header   X-Real-IP $remote_addr;
</span><span class='line'>  proxy_set_header   X-Scheme $scheme;
</span><span class='line'>  proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>  proxy_set_header   Host $http_host;
</span><span class='line'>
</span><span class='line'>  upstream my-backend {
</span><span class='line'>    server 127.0.0.1:9000;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen               80;
</span><span class='line'>    keepalive_timeout    70;
</span><span class='line'>    server_name birdwatch.matthiasnehlsen.com;
</span><span class='line'>    location / {
</span><span class='line'>      proxy_pass  http://my-backend;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>The messaging between client and server should get really interesting, I am looking forward to exploring this more as the project develops. Check back for an article on that (and other things).</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveMongo 0.9 and Lossless Persistence]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/26/data-model-upgrade/"/>
    <updated>2013-04-26T13:48:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/26/data-model-upgrade</id>
    <content type="html"><![CDATA[<p>Initially I parsed the Tweets in the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application into instances of a Tweet case class upon ingestion and then used that case class representation throughout, including for database persistence. Then I realized that that was actually not a good idea. Using a case class for passing around information in the application is very convenient and useful. But for the persistence, I argue that we cannot afford to be opinionated about what to keep and what to throw away. I fixed this together with the planned migration to <strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong> version 0.9 in the latest commits, storing each  observable fact coming from the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> in its entirety.</p>

<!-- more -->


<p>Any data model will almost invariably be wrong in the future as we cannot predict what we will want to analyze later. We can always change the data model at a later point and from then on store a different interpretation of the observable fact, but then we would not have complete historic information when we want to test our hypotheses on retrospective data. The solution for this is to store the Tweets in their complete <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> representation. <strong><a href="http://www.mongodb.org">MongoDB</a></strong> is a great choice for this as it allows indexing our data while leaving the <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> structure intact. We get the best of two worlds. With this lossless persistence we can always reconstruct the observable fact from the database while at the same time being able to quickly search through a potentially large dataset.</p>

<p>I also wanted to upgrade <strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong> in order to fix a previous problem with Killcursors. Version 0.9 entails some changes in the API, so it was a good idea to tackle the upgrade and the Tweet persistence layer together. Let&#8217;s go through some of the changes:</p>

<figure class='code'><figcaption><span>Mongo Connection in Version 0.8</span><a href='https://github.com/matthiasn/BirdWatch/blob/53b79386ef49d80a1d4d1eae1086b9aff5485fa2/app/utils/Mongo.scala'>Mongo.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Mongo connection object */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Mongo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">connection</span> <span class="k">=</span> <span class="nc">MongoConnection</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;localhost:27017&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="n">connection</span><span class="o">(</span><span class="s">&quot;BirdWatch&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Mongo Connection in Version 0.9</span><a href='https://github.com/matthiasn/BirdWatch/blob/2738bfdafb2a2367a79177b615adb58ce5d51c5b/app/utils/Mongo.scala'>Mongo.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Mongo connection object */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Mongo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">driver</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MongoDriver</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">connection</span> <span class="k">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">connection</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;localhost:27017&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="n">connection</span><span class="o">(</span><span class="s">&quot;BirdWatch&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong> now uses an instance of the <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/driver/src/main/scala/api/api.scala">MongoDriver</a></strong> class and its connection method. The <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/driver/src/main/scala/api/api.scala">MongoConnection</a></strong> class still exists, but I couldn&#8217;t get it to work for some reason.</p>

<p>I have moved the Tweet collection and basic query and insert methods into a Tweet companion object, with the intention of turning this into a lightweight <strong><a href="http://en.wikipedia.org/wiki/Data_access_object">DAO (Data Access Object)</a></strong> for Tweets:</p>

<figure class='code'><figcaption><span>Tweet Companion Object</span><a href='https://github.com/matthiasn/BirdWatch/blob/290c609cccbf17076074e1eb2fa4e31bb350ca37/app/models/Tweet.scala'>Tweet.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Data Access Object for Tweets*/</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Tweet</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">rawTweets</span><span class="k">:</span> <span class="kt">JSONCollection</span> <span class="o">=</span> <span class="nc">Mongo</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">collection</span><span class="o">[</span><span class="kt">JSONCollection</span><span class="o">](</span><span class="s">&quot;rawTweets&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">insertJson</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span> <span class="k">=</span> <span class="n">rawTweets</span><span class="o">.</span><span class="n">insert</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">json</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** get collection size from MongoDB (fast) */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">count</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Mongo</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">command</span><span class="o">(</span><span class="nc">Count</span><span class="o">(</span><span class="s">&quot;rawTweets&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Query latest tweets (lazily evaluated stream, result could be of arbitrary size) */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">jsonLatestN</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="n">rawTweets</span>
</span><span class='line'>      <span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$exists&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span>
</span><span class='line'>    <span class="n">cursor</span><span class="o">.</span><span class="n">toList</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Storing the <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> from Twitter not only prevents us from throwing away data we might need in the future, it is also much simpler than having to deal with implicit <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/bson/src/main/scala/handlers.scala">BSONReader</a></strong> and <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/bson/src/main/scala/handlers.scala">BSONWriter</a></strong> objects as was previously the case:</p>

<figure class='code'><figcaption><span>BSON implicits (with 0.8)</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/models/TweetImplicits.scala'>TweetImplicits.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">object</span> <span class="nc">TweetBSONWriter</span> <span class="k">extends</span> <span class="nc">BSONWriter</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toBSON</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">BSONDocument</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="nc">BSONObjectID</span><span class="o">.</span><span class="n">generate</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;tweet_id&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONLong</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">tweet_id</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;screen_name&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">screen_name</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;wordCount&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONInteger</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">wordCount</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;charCount&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONInteger</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">charCount</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;location&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">location</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;profile_image_url&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">profile_image_url</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;geo&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">geo</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)),</span>
</span><span class='line'>        <span class="s">&quot;created_at&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONDateTime</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">getMillis</span><span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">object</span> <span class="nc">TweetBSONReader</span> <span class="k">extends</span> <span class="nc">BSONReader</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">fromBSON</span><span class="o">(</span><span class="n">document</span><span class="k">:</span> <span class="kt">BSONDocument</span><span class="o">)</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">doc</span> <span class="k">=</span> <span class="n">document</span><span class="o">.</span><span class="n">toTraversable</span>
</span><span class='line'>      <span class="nc">Tweet</span><span class="o">(</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONLong</span><span class="o">](</span><span class="s">&quot;tweet_id&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;screen_name&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;text&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONInteger</span><span class="o">](</span><span class="s">&quot;wordCount&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONInteger</span><span class="o">](</span><span class="s">&quot;charCount&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;location&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;profile_image_url&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="nc">None</span><span class="o">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONDateTime</span><span class="o">](</span><span class="s">&quot;created_at&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">),</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONObjectID</span><span class="o">](</span><span class="s">&quot;_id&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead we just parse a <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> string from Twitter and insert the parsed <strong><a href="https://github.com/playframework/Play20/blob/2.1.1/framework/src/play/src/main/scala/play/api/libs/json/JsValue.scala">JsValue</a></strong> into the <strong><a href="https://github.com/zenexity/Play-ReactiveMongo/blob/a7164a1ac0832680ca0f4c3da0b6949ffea282b0/src/main/scala/play/modules/reactivemongo/jsoncollection.scala">JSONCollection</a></strong>:</p>

<figure class='code'><figcaption><span>Inserting into database</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** persist any valid JSON from Twitter Streaming API */</span>
</span><span class='line'>  <span class="nc">Tweet</span><span class="o">.</span><span class="n">insertJson</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is really all there is to storing <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> into MongoDB now. I don&#8217;t have to worry about additional fields or other changes in the Twitter Streaming API. If it is valid <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>, it will find its way into the database. Major changes to the API might break parsing into Tweets, but they would not break database persistence.</p>

<p>Error and status messages from Twitter also come as <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>, so they are stored as well:</p>

<figure class='code'><figcaption><span>JavaScript query in MongoDB shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;…&quot;</span><span class="p">),</span> <span class="s2">&quot;disconnect&quot;</span> <span class="o">:</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;code&quot;</span> <span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&quot;stream_name&quot;</span> <span class="o">:</span> <span class="s2">&quot;_MNehlsen-statuses237381&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;reason&quot;</span> <span class="o">:</span> <span class="s2">&quot;admin logout&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Querying is more concise than before, making use of Json.obj instead of BSONDocuments:</p>

<figure class='code'><figcaption><span>OLD: Query for latest Tweets</span><a href='https://github.com/matthiasn/BirdWatch/blob/53b79386ef49d80a1d4d1eae1086b9aff5485fa2/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">latestTweetQuery</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">query</span> <span class="k">=</span> <span class="nc">QueryBuilder</span><span class="o">().</span><span class="n">query</span><span class="o">(</span><span class="nc">BSONDocument</span><span class="o">(</span><span class="s">&quot;created_at&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nc">BSONDocument</span><span class="o">(</span><span class="s">&quot;$lte&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONDateTime</span><span class="o">(</span><span class="nc">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">getMillis</span><span class="o">))))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="s">&quot;created_at&quot;</span> <span class="o">-&gt;</span> <span class="nc">SortOrder</span><span class="o">.</span><span class="nc">Descending</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">cursor</span> <span class="k">=</span> <span class="nc">Mongo</span><span class="o">.</span><span class="n">tweets</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
</span><span class='line'>  <span class="n">cursor</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>NEW: Query for latest Tweets</span><a href='https://github.com/matthiasn/BirdWatch/blob/4abf8f2fe50986b3dd695998a553b8a9888fce71/app/models/Tweet.scala'>Tweet.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">jsonLatestN</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="n">rawTweets</span>
</span><span class='line'>    <span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$exists&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span>
</span><span class='line'>  <span class="n">cursor</span><span class="o">.</span><span class="n">toList</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks much neater and is also close to the syntax in the MongoDB JavaScript shell:</p>

<figure class='code'><figcaption><span>JavaScript query in MongoDB shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">rawTweets</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;$exists&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">sort</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Curly braces get replaced by Json.obj() and the colon gets replaced by &#8220;->&#8221;. Other than that, the syntax is very close. Note the &#8220;$exists&#8221; part. This limits the results to only Tweets (and potentially error and status messages that have a &#8220;text&#8221; field, but I have not encountered those).</p>

<p>The usage above with generating a List from the cursor works fine for small n, but for larger results sets (say hundreds of thousands of items) it would be a bad idea to build the list in memory first. Luckily ReactiveMongo allows us to stream the results. That itself is not new, but since version 0.9 we can limit the number of results, making this much more useful for a latestN scenario:</p>

<figure class='code'><figcaption><span>Enumerating cursor of Tweets</span><a href='https://github.com/matthiasn/BirdWatch/blob/466cce67a38265e311970466b3bf5529fda54f12/app/models/Tweet.scala'>Tweet.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Enumerate latest Tweets (descending order) into specified Iteratee.</span>
</span><span class='line'><span class="cm"> * @param n number of results to enumerate over</span>
</span><span class='line'><span class="cm"> **/</span>
</span><span class='line'><span class="k">def</span> <span class="n">enumJsonLatestN</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="n">rawTweets</span>
</span><span class='line'>    <span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$exists&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span>
</span><span class='line'>  <span class="n">cursor</span><span class="o">.</span><span class="n">enumerate</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this we create an Enumerator of JsObjects that streams the results into an Iteratee. The usage of this is simple once we understand what this pattern means. Check out my previous <strong><a href="http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence/">Iteratee article</a></strong>, hope it helps a little bit.</p>

<p>This allows us to stream results into an Iteratee that will do whatever we need, in this case just doing a simple foreach:</p>

<figure class='code'><figcaption><span>Attaching Iteratee to Enumerator </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">dbTweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">json</span> <span class="k">=&gt;</span> <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">WordCount</span><span class="o">.</span><span class="n">wordsChars</span><span class="o">(</span><span class="n">t</span><span class="o">))</span> <span class="c1">// word and char count for each t</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsError</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nc">Tweet</span><span class="o">.</span><span class="n">enumJsonLatestN</span><span class="o">(</span><span class="mi">500</span><span class="o">)(</span><span class="n">dbTweetIteratee</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I currently do not enumerate the results into an Iteratee because the Tweets would appear in the wrong order in the UI and I cannot easily reverse the direction in which the Tweets are enumerated without an auto-incrementing counter in MongoDB to determine from where to start enumerating in ascending order (from position [collectionsize - n]). But this is more a problem of the UI, the next versions will certainly make use of this pattern.</p>

<p>The only thing I was still missing is an easy way to get the size of a collection. In the shell we would write:</p>

<figure class='code'><figcaption><span>JavaScript query in MongoDB shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">rawTweets</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;$exists&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">}</span> <span class="p">).</span><span class="nx">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Turns out that in ReactiveMongo, we can use the Count command for this, which returns a Future[Int] with the result (see Tweet.scala above).
This allows us to do something upon return of the collection size in a non-blocking way:</p>

<figure class='code'><figcaption><span>Using Count Command</span><a href='https://github.com/matthiasn/BirdWatch/blob/fd44fe45163233746b8caacc0dbba5c815e3f964/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="nc">Tweet</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">c</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Tweets: &quot;</span> <span class="o">+</span> <span class="n">c</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great stuff, I really like <strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong>. The documentation has also gotten a lot better in 0.9, compared to previous versions. Nonetheless it takes some source code reading to find some of the good stuff. I&#8217;d be more than to happy help out here and contribute to the project documentation.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iteratee: can I have that in a sentence?]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence/"/>
    <updated>2013-04-23T22:08:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence</id>
    <content type="html"><![CDATA[<p>A couple of weeks back I was trying to wrap my head around <strong><a href="http://www.playframework.com/documentation/2.0.4/Iteratees">Iteratees</a></strong> so I read what I could find on Google. Afterwards, I had a very high level idea about Enumerators producing or emitting a stream of information and Iteratees consuming that information, potentially with aggregate state. At the same time, the Iteratee was supposed to be immutable. Okay, so I have this immutable thing aggregating state over time. That did not seem right.</p>

<!-- more -->


<p>I had to see this in action in order to understand how this Iteratee thing works. So I was looking for a stream of information that I could use. I found it in the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong>. A stream of Tweets can be interesting, even outright entertaining, having chosen the right topic(s), and Tweets being tweeted right now when watching the visualization is something that seems easy to relate to. I also wanted to try out a supervised actor hierarchy in this project, so I decided to download the original profile images from Twitter for every single Tweet, down convert them using a couple of actors doing image manipulation and storing an 80x80px PNG thumbnail in <strong><a href="http://www.mongodb.org">MongoDB</a></strong>. This supervised image manipulation will be the topic of another post though.</p>

<p>On the client side I wanted something flashy that makes it obvious that live information from the real world is flowing through the system and reasoned about. I had recently taken an interest in <strong><a href="http://d3js.org">D3.js</a></strong> and I had seen the <strong><a href="https://github.com/jasondavies/d3-cloud">d3-cloud</a></strong> wordcloud implementation by Jason Davies, which is nice to look at, so I wondered if it was difficult to drive it from data streaming to the client over a <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connection. The UI at this point was not supposed to be particularly useful, it was really only designed for the effect, as a visualization of something happening <strong>right now</strong>. I am fully aware that a wordcloud is not the best way for showing the frequency of words, and having it regenerate every 5 seconds makes it even less useful perceptually since whatever you look at will be gone before you can even fully focus on the smaller items. That being said, the focus of this project was learning how Iteratees work. The <strong><a href="http://d3js.org">D3.js</a></strong> I use for this project is very basic on my end, I will focus on doing more useful things with D3 later on.</p>

<p>So I started working on this reactive web application called <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>. In this article I will go through the parts of the application that are relevant for trying to understand Iteratees. I will do this iteratively in the  order in which my own understanding evolved.</p>

<p>Let&#8217;s look at my initial high-level architectural drawing (warning, it is inaccurate, read on to find out why):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/BirdWatch.svg" width="800" height="300" title="image" alt="images"></p>

<p>At first, this seems to make sense. The WS object (upper left box named Twitter) acts as our Enumerator, taking the chunks of Array[Byte] it is receiving from the open HTTP connection with the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> endpoint and passing them along into an Iteratee:</p>

<figure class='code'><figcaption><span>WS-Client</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="s">&quot;https://stream.twitter.com/1.1/statuses/filter.json?track=&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">topics</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;%2C&quot;</span><span class="o">).</span><span class="n">replace</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">,</span> <span class="s">&quot;%20&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">withTimeout</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sign</span><span class="o">(</span><span class="nc">OAuthCalculator</span><span class="o">(</span><span class="n">consumerKey</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">tweetIteratee</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Iteratee then performs some action (JSON parsing from String, Tweet parsing from JSON, sending the Tweet to the ImageConversion actor) for each chunk, without accumulating intermediate state.</p>

<figure class='code'><figcaption><span>tweetIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Iteratee for processing each chunk from Twitter stream of Tweets. Parses Json chunks </span>
</span><span class='line'><span class="cm">* as Tweet instances and publishes them to eventStream. */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span> <span class="n">chunk</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">chunk</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">ActorStage</span><span class="o">.</span><span class="n">imgSupervisor</span> <span class="o">!</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">wordsChars</span><span class="o">(</span><span class="n">stripImageUrl</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsError</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This at first seduced me into believing that the Iteratee for sending the tweets was one particular instance that performed these repeated actions as specified in the foreach part. But that is not the case. The Iteratee is immutable and every time we pass information to an Iteratee in a step, a new Iteratee is created in return. This does not seem terribly useful as long as we only want to perform a foreach without accumulated state. But bear with me.</p>

<p>Let&#8217;s have a look at the second Enumerator / Iteratee couple in the application next. Afterwards this will make much more sense.</p>

<p>For the wordcount, which feeds both the wordcloud and the bar chart in the UI, we analyze a rolling window of tweets. For this, we need to keep state over say the last 1000 tweets, as is the case here.</p>

<p>Let&#8217;s have a look at the implementation of the tweetListIteratee:</p>

<figure class='code'><figcaption><span>tweetListIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates Iteratee which holds a List[Tweet] of length up to n as its state in each step,  </span>
</span><span class='line'><span class="cm"> *  based on the provided tweetList. The newest element is found in the head of the list.</span>
</span><span class='line'><span class="cm"> *  Allows passing in a &quot;side-effecting&quot; function f, e.g. for testing or pushing data to </span>
</span><span class='line'><span class="cm"> *  WebSocket or EventStream. Having f return unit instead of modifying the accumulator </span>
</span><span class='line'><span class="cm"> *  guarantees that f cannot alter the accumulator newAcc in unintended ways.</span>
</span><span class='line'><span class="cm"> *  Attach to Channel[Tweet] for better decoupling within application.</span>
</span><span class='line'><span class="cm"> *  @param    f &quot;side-effecting&quot; function (List[Tweet] =&gt; Unit)</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to use as the accumulator</span>
</span><span class='line'><span class="cm"> *  @param    n max length of list to keep as iteratee state</span>
</span><span class='line'><span class="cm"> *  @return   Iteratee[Tweet, List[Tweet]], accumulating tweetList from tweetChannel</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">,</span> <span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span>
</span><span class='line'>  <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="o">(</span><span class="n">tweetList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">xs</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">newTweetList</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">::</span> <span class="n">xs</span><span class="o">)</span> <span class="n">take</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">f</span><span class="o">(</span><span class="n">newTweetList</span><span class="o">)</span>
</span><span class='line'>      <span class="n">newTweetList</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here we have constructed an Iteratee which takes as parameters a function f that takes a List[Tweet] and returns Unit, a TweetList which will be our accumulator in the fold and n, which is the maximum size of the list in the accumulator or in other words the maximum size of our rolling window that we will reason about. What happens here is that the Iteratee will receive the previous accumulator / state (a List[Tweet]) and a single Tweet, prepend the single Tweet as the new head of the accumulator, limited to a list of maximum size n and then return that new list as the state inside the partial function.</p>

<p>The tweetListIteratee also runs function f, which is by definition purely side-effecting as it returns Unit, so the only effects it can have are outside the tweetListIteratee. Normally we should probably shy away from side-effects, but here I would argue that this is a good thing. Any function passed in here could be defined to have side-effects, but the Unit return type guarantees that f will not be able to mess with the accumulator, it cannot have any effects on it, unlike functions transforming the accumulator or passing it along PLUS having side-effects. The side-effect f is used for is pushing immutable information into the WebSocket connection. In fact, there is no mutable state in scope for this function anyways that it could mess with.</p>

<p>Let&#8217;s look at that function we substitute for f before we wire the Iteratee into an Enumerator:</p>

<figure class='code'><figcaption><span>interceptTweetList</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** &quot;side-effecting&quot; function to do something with the accumulator without possibly mutating it</span>
</span><span class='line'><span class="cm"> * e.g. push some computation to a WebSocket enumerator or to log file</span>
</span><span class='line'><span class="cm"> * @param    tweetList accumulator inside the Iteratee</span>
</span><span class='line'><span class="cm"> * @return   Unit, cannot interfere with the accumulator inside the Iteratee </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">interceptTweetList</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">charCountMean</span><span class="o">,</span> <span class="n">charCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">charCount</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">wordCount</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetState</span> <span class="k">=</span> <span class="nc">TweetState</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="o">,</span> <span class="mi">250</span><span class="o">),</span> <span class="n">charCountMean</span><span class="o">,</span>
</span><span class='line'>    <span class="n">charCountStdDev</span><span class="o">,</span> <span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">,</span> <span class="n">tweetList</span><span class="o">.</span><span class="n">size</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">wsOutChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">stringify</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">tweetState</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function above calculates mean and standard deviation for character count and word count within the tweets inside the rolling window, which by now is the old state from the previous Iteratee plus the latest Tweet pushed into the Iteratee appended at the head of the list (limited to size n if larger):</p>

<figure class='code'><figcaption><span>stdDev</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/Calc.scala'>Calc.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Calculate standard deviation from TraversableOnce[Int]</span>
</span><span class='line'><span class="cm"> *  @param    xs collection of Int</span>
</span><span class='line'><span class="cm"> *  @return   (mean: Double, stdDev: Double)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">stdDev</span><span class="o">(</span><span class="n">xs</span><span class="k">:</span> <span class="kt">TraversableOnce</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="o">(</span><span class="kt">Double</span><span class="o">,</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">n</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">total</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">x</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">mean</span> <span class="k">=</span> <span class="n">total</span> <span class="o">/</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stdDev</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">}</span> <span class="o">/</span> <span class="n">n</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">mean</span><span class="o">,</span> <span class="n">stdDev</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and also the word frequency map:</p>

<figure class='code'><figcaption><span>countTweetWords & topN</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Counts words in List[Tweet], returning Map[String, Int] with wordMap filtered by </span>
</span><span class='line'><span class="cm"> *  regular expression and not containing any word from the stopWords set</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to count words in</span>
</span><span class='line'><span class="cm"> *  @return   Map[String, Int] with word counts</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">tweetList</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">tweet</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">splitTweet</span><span class="o">(</span><span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="o">).</span><span class="n">filter</span><span class="o">{</span> <span class="n">w</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">stopWords</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">w</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">wordMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">word</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">wordMap</span> <span class="o">+</span> <span class="o">((</span><span class="n">word</span><span class="o">,</span> <span class="n">wordMap</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Generates ListMap with Top n most popular words in a tweetList</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet]</span>
</span><span class='line'><span class="cm"> *  @param    n number highest ranking words to return</span>
</span><span class='line'><span class="cm"> *  @return   sorted ListMap with top n words in descending order of count </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">wordMap</span> <span class="k">=</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="o">)</span>
</span><span class='line'>  <span class="nc">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">](</span><span class="n">removeShortWords</span><span class="o">(</span><span class="n">wordMap</span><span class="o">).</span><span class="n">toList</span><span class="o">.</span><span class="n">sortBy</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">_2</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="o">)</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These calculations probably warrant a separate (and much shorter) article. For now let&#8217;s just assume they do what the description states. The results of these computations are then pushed into the WebSocket channel towards the browser as JSON (embedded in an immutable instance of Case Class <strong><a href="https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/models/Tweet.scala">TweetState</a></strong>). That step actually involves another Enumerator / Iteratee couple, but more about that later.</p>

<p>Let us now hook the Iteratee up with an Enumerator that will push data into it before dealing with the issue that the Iteratee is immutable and cannot be changed. In previous versions we probably would have used a <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.PushEnumerator">PushEnumerator</a></strong> to achieve this, but PushEnumerator is deprecated as of Play 2.10, we are supposed to use <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.Concurrent$">Concurrent.broadcast</a></strong> instead.</p>

<figure class='code'><figcaption><span>Enumerator for tweetIteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates enumerator and channel for Tweets through Concurrent factory object */</span>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">enumerator</span><span class="o">,</span> <span class="n">tweetChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Iteratee processing Tweets from tweetChannel, accumulating a rolling window of tweets */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetListIteratee</span> <span class="k">=</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">interceptTweetList</span><span class="o">,</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">](),</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'><span class="n">enumerator</span> <span class="o">|&gt;&gt;&gt;</span> <span class="n">tweetListIteratee</span> <span class="c1">// attach tweetListIteratee to enumerator</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Actor for subscribing to eventStream. Pushes received tweets into TweetChannel for</span>
</span><span class='line'><span class="cm"> * consumption through iteratee (and potentially other consumers, decoupled)  */</span>
</span><span class='line'><span class="k">val</span> <span class="n">subscriber</span> <span class="k">=</span> <span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=&gt;</span> <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}))</span>
</span><span class='line'><span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">eventStream</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">subscriber</span><span class="o">,</span> <span class="n">classOf</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="c1">// subscribe to incoming tweets</span>
</span></code></pre></td></tr></table></div></figure>


<p>We call Concurrent.broadcast[Tweet], which returns a tuple2 of an Enumerator (named accordingly) and a channel (tweetChannel) that we can use to push Tweets into. We then attach our tweetListIteratee to the enumerator using the |>>> operator. The Tweets pushed into tweetChannel will then be consumed by the tweetListIteratee attached to the enumerator. We will get those Tweets from the <strong><a href="http://doc.akka.io/docs/akka/2.1.2/scala/event-bus.html">Akka EventBus</a></strong> by creating an actor, which listens to events of type Tweet on the EventBus and pushes them into tweetChannel. We will look at the EventBus in more detail in the article dealing with the ImageProcessing actor hierarchy. For now it should be sufficient to know that we have a source of Tweets and push each individual occurence of a Tweet event into the tweetChannel, thus creating our own open-ended stream.</p>

<p>Now that we have wired our building blocks together, let&#8217;s see if we can visualize this in its initial state:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee1.svg" width="800" height="300" title="image" alt="images"></p>

<p>We have a systemwide EventBus to which we attach for every user connection an actor listening to Tweets and pushing them into the tweetChannel. Somehow, and we will get there, this Tweet will reach the tweetlistIteratee, which acts as the consumer or sink of this information. Once it has reached the tweetlistIteratee, we would expect to have the Tweet within the rolling window of Tweets and also to have the interceptor function run.</p>

<p>So far so good. But remember that the Iteratee is an immutable data type:</p>

<blockquote><p>An Iteratee consumes a stream of elements of type E, producing a result of type A. The stream itself is represented by the Input trait. An Iteratee is an immutable data type, so each step in consuming the stream generates a new Iteratee with a new state.</p><footer><strong>Iteratee</strong> <cite><a href='http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.Iteratee'>Play 2.10 API</a></cite></footer></blockquote>


<p>Let&#8217;s see what happens when we push a Tweet into the system:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee2.svg" width="800" height="300" title="image" alt="images"></p>

<p>The Tweet appears on the EventBus, is received by the subscribing actor, pushed into the tweetChannel and from there into the tweetlistIteratee by being applied to the <strong>Cont</strong> function inside that Iteratee, resulting in a new Iteratee with the Tweet prepended to the accumulator (and the tweetlistInterceptor function executed in the process, doing the statistic computations and pushing the result into the WebSocket connection to the client). This results in a brand new Iteratee.</p>

<p>This is what confused me initially. How does the Enumerator keep track of the current Iteratee it will have to feed with the next element in the stream? The Enumerator cannot call the initial Iteratee again and again, at least not of there is supposed to be aggregate state. Does this mean the enumerator has mutable internal state, holding the latest Iteratee? I wanted to know and did not find any answers, so I resorted to reading the source code.</p>

<p>It turns out it depends on the definition of mutable state and also on the kind of Enumerator. The <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/play/src/main/scala/play/api/libs/ws/WS.scala">WS</a></strong> object or the now-deprecated <a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Enumerator.scala">PushEnumerator</a> use plain old vars to achieve this. Let&#8217;s look at WS first because the construct is simpler than the one in <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.scala</a></strong>.</p>

<figure class='code'><figcaption><span>WS Enumerator excerpts</span><a href='https://github.com/playframework/Play20/blob/2.1.0/framework/src/play/src/main/scala/play/api/libs/ws/WS.scala'>WS.scala</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="c1">// line 236</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">iteratee</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span>, <span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// line 252 </span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onBodyPartReceived</span><span class="o">(</span><span class="n">bodyPart</span><span class="k">:</span> <span class="kt">HttpResponseBodyPart</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">doneOrError</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">iteratee</span> <span class="k">=</span> <span class="n">iteratee</span><span class="o">.</span><span class="n">pureFlatFold</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Step</span><span class="o">.</span><span class="nc">Done</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">doneOrError</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>            <span class="k">val</span> <span class="n">it</span> <span class="k">=</span> <span class="nc">Done</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>            <span class="n">iterateeP</span><span class="o">.</span><span class="n">success</span><span class="o">(</span><span class="n">it</span><span class="o">)</span>
</span><span class='line'>            <span class="n">it</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Step</span><span class="o">.</span><span class="nc">Cont</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">k</span><span class="o">(</span><span class="nc">El</span><span class="o">(</span><span class="n">bodyPart</span><span class="o">.</span><span class="n">getBodyPartBytes</span><span class="o">()))</span>
</span><span class='line'>          <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above we see that the WS object stores the Iteratee as a plain old var, which is replaced in the pureFlatFold step by the subsequent Iteratee returned by k in the case that the Iteratee is in the Cont state. Okay, now this makes sense, the Enumerator does keep track of the next Iteratee to push information into. But mutable state, a var? This is actually fine and safe because this mutable var is contained locally and the WS connection will only run in a single thread anyways.</p>

<p>Here we are not using this kind of Enumerator though, we are using Concurrent.broadcast. This one uses a much more interesting approach: STM (Software Transactional Memory) is used to store Refs to the next Iteratee. The <a href="http://doc.akka.io/docs/akka/2.1.0/scala/stm.html">Akka documentation</a> names Clojure&#8217;s approach as the motivation for the usage of STM within Akka, and it is a great and concise read, I recommend reading the whole thing.</p>

<blockquote><p>There is another way, and that is to separate identity and state (once again, indirection saves the day in programming). We need to move away from a notion of state as &#8220;the content of this memory block&#8221; to one of &#8220;the value currently associated with this identity&#8221;. Thus an identity can be in different states at different times, but the state itself doesn&#8217;t change. That is, an identity is not a state, an identity has a state. Exactly one state at any point in time. And that state is a true value, i.e. it never changes. If an identity appears to change, it is because it becomes associated with different state values over time. This is the Clojure model.</p><footer><strong>Clojure&#8217;s approach to Identity and State</strong> <cite><a href='http://clojure.org/state'>clojure.org/state</a></cite></footer></blockquote>


<p>Without wanting to go into too much detail, the difference when using STM is that references to immutable vals are stored, which are not manipulated in place but instead swapped against a new immutable val. Whatever is retrieved from the STM represents the state at the time of retrieval as an immutable fact. A later retrieval might return a different result, whatever is then the current state, but once the state is retrieved it stays the same throughout the lifecycle of that val, it cannot be changed elsewhere the way it could happen with a var (leading to odd behavior). This is one way to make shared state inside STM thread-safe, the other one is that every change to the shared state is transacted, with the ability to roll back when the state has been updated from elsewhere (e.g. another thread). Let&#8217;s have a quick look how this changes the previous drawing in my understanding:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee3.svg" width="800" height="300" title="image" alt="images"></p>

<p>The enumerator adds the Iteratee to a list of Iteratees. Then the enumerator is not directly involved in calling the Iteratee any longer, instead the push function looks up the Iterator, calls Cont on it like in the previous example and eventually swaps it against the next Iteratee:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee4.svg" width="800" height="300" title="image" alt="images"></p>

<p>I will have to study <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.scala</a></strong> some more in order to understand how exactly this happens.</p>

<p>Finally, we push the result of the computation in the previous step into the WebSocket connection towards the browser. Here once again we use Concurrent.broadcast to create the aforementioned enumerator / channel tuple, this time of type String. The channel is used to push String serialized JSON towards the client. We do not actually create the Iteratee here, instead we use the enumerator as part of the returned tuple in line 77 together with an Iteratee that we can use to process incoming information from the WebSocket connection. In this case, we use a very simple Iteratee which completely ignores all input:</p>

<figure class='code'><figcaption><span>Enumerator for tweetIteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="cm">/** Line 35: Iteratee for incoming messages on WebSocket connection, currently ignored */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">ignore</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'> <span class="cm">/** Creates enumerator and channel for Strings through Concurrent </span>
</span><span class='line'><span class="cm">  *  factory objectfor pushing data through the WebSocket */</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">wsOutChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// line 55: used inside interceptTweetList function                </span>
</span><span class='line'>  <span class="n">wsOutChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">stringify</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">tweetState</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// line 77: return value in tweetFeed function </span>
</span><span class='line'>  <span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">)</span> <span class="c1">// in and out channels for WebSocket connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of the Iteratee.ignore[String] we could define an Iteratee that processes information coming from the browser here, if so desired. This will be useful when allowing the client to send control commands towards the server through the WebSocket connection.</p>

<p>One comment regarding possible Iteratee states: An Iteratee can  be in one of three states, Cont, Done and Error. The Done state does not seem particularly useful when dealing with truly open-ended streams. When is a Twitter stream done? When Twitter ceases to exist? For this reason I also do not care about any result that could be computed on a Done state in this application. Results over a stream of Tweets as presented here are only meaningful incrementally. But a Done state could certainly be useful in other applications, such as when reading from a large file in smaller chunks or when streaming data from <a href="http://reactivemongo.org">ReactiveMongo</a> until the iterator runs out of data. Then a final computation makes sense.</p>

<p>Okay, this has been a lot. But I promised to share what I learned about Iteratees with this project so far. Let me know if this helped you in your understanding as well.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/19/hello-world/"/>
    <updated>2013-04-19T21:19:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/19/hello-world</id>
    <content type="html"><![CDATA[<p><strong>Who am I?</strong>
My name is Matthias and I had my first computer before I had my first bike. I&#8217;ve spent most of my career working in IT project management and systems engineering, having run my own company for over a decade. I was doing well financially, but really wasn&#8217;t satisfying my own curiosity. Who wants to spend their time chasing bugs in systems they didn&#8217;t have any part in creating. I don’t.</p>

<!-- more -->


<p>After some wandering, I discovered what a delight it can be to write these amazing little things called &#8216;programs&#8217; that come to existence almost completely through the workings of the mind. A couple of years ago, I finally decided that it was time for a major change. I knew I really wanted to be spend my time and energy in the creative process of developing applications that elegantly solve problems, so I made the move, and I haven&#8217;t looked back since.</p>

<p><strong>Why am I blogging?</strong>
I am fascinated by the idea of reasoning over live data streams. There are quite a few things that I still need to learn in order to turn my ideas into working code. I find that I learn particularly well when explaining things to others, so writing this blog seems like an awesome idea.</p>

<p>Recently I started to work on a reactive web project for my portfolio, written in <strong><a href="http://www.scala-lang.org">Scala</a></strong> using the <strong><a href="http://www.playframework.com">Play Framework</a></strong>. It presented an ideal opportunity to make this project open source and use it as the first thing to write about. This has been tremendous fun and really exciting so far. I put that project called BirdWatch on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>, installed a demo on a <strong><a href="http://birdwatch.matthiasnehlsen.com">web server</a></strong> and showed it to a handful of people, not thinking that it was anywhere near being published in a broader sense.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/screenshot.png" title="image" alt="images"></p>

<p>Then it got mentioned on Twitter, retweeted 16 times and before I knew it, I had visitors from 272 cities in 48 countries on that web server. I know because out of curiosity I wrote a little logging routine that does GeoIP-lookup for every IP-address visiting that server on the fly, but that is the topic for a future post, potentially with a live visualization for the curious website owner.</p>

<p><strong>What will I be blogging about?</strong>
I will be blogging about functional programming, reactive data processing and data visualization. I am particularly interested in observable data from the real world moving through information systems, ideally for visualizations that are both useful and pleasant to look at.</p>

<p>For the time being, you can expect me to use <strong><a href="http://www.scala-lang.org">Scala</a></strong>, <strong><a href="http://www.playframework.com">Play</a></strong> and <strong><a href="http://akka.io">Akka</a></strong> on the server side, a beautiful technology stack that allows solving concurrent problems in surprisingly short amounts of time. For the client side I am just getting started with <strong><a href="http://d3js.org">D3.js</a></strong>, a JavaScript library for data-driven DOM manipulation. It allows for absolutely stunning visualizations, even though I am nowhere near that as of yet.</p>

<p>You can also expect me to continue getting live prototypes up and running for the things I write about, just like the one for <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong>. I find code that is not executed to be a wasted effort, and there is no better proof for any code than running it. I already learned a lot regarding the architecture of BirdWatch and there are a few things that I would do differently in the future, but that is also a topic for a future post.</p>

<p><strong>How can you leave feedback?</strong>
I am starting this blog because I am hoping to learn a lot in the process, particularly from interaction with you, the reader. So please comment on the blog posts, correct me where I am wrong, and let me know where you think a more elegant solution could be found.</p>

<p>Most importantly, ask if there is anything that you find difficult to understand. My goal in all of this is to explain things as clearly as possible, so please let me know when I&#8217;ve failed to do that. Ask questions in the comments section if you think that others might benefit from the answers as well. Of course, you can also always contact me by email, though that may take longer for a response.</p>

<p>You can also follow me on Twitter <strong><a href="https://twitter.com/_MNehlsen">@_MNehlsen</a></strong>. I just launched my feed, so you&#8217;ll get to be among the first to follow me, and it will make keeping track of when I published a new post much easier for you, as well as other things I find interesting in general.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
</feed>
