<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2014-08-13T12:20:26+02:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Weekly Update]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/10/weekly-update/"/>
    <updated>2014-08-10T22:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/10/weekly-update</id>
    <content type="html"><![CDATA[<p>I mostly kept myself busy with <strong><a href="http://angularjs.org">AngularJS</a></strong> this week. Then, my <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">geo-specific link shortener</a></strong> generated it&#8217;s first contribution to running this blog. I also read a little more this week: <strong><a href="http://r.matthiasnehlsen.com/unclebob-cleancoder/link">The Clean Coder: A Code of Conduct for Professional Programmers</a></strong> by Robert C. Martin (Uncle Bob).</p>

<!-- more -->


<p>This week I have been doing a lot of <strong><a href="http://angularjs.org">AngularJS</a></strong> work. I haven&#8217;t announced this much so far, but last year I have started co-authoring a book about <strong><a href="https://www.packtpub.com/web-development/angularjs-ui-development">AngularUI Development</a></strong>. This book will come out later this year and is scheduled to be out in November. Right now I am doing the finishing touches on the chapters that I wrote. I added quite a few pages to the first chapter about bootstrapping an <strong><a href="http://angularjs.org">AngularJS</a></strong> environment, in particular about AngularJS integration tests using <strong><a href="https://github.com/angular/protractor">Protractor</a></strong>. I am quite happy with how testability of AngularJS application is progressing. Protractor is really powerful and I am looking forward to implementing a comprehensive testing strategy at my current work project. Protractor looks like it will be up to the job. I will be interesting to integrate this into the overall <strong><a href="http://www.scala-lang.org">Scala</a></strong> / <strong><a href="http://www.playframework.com">Play Framework</a></strong> / <strong><a href="http://www.scala-sbt.org">SBT</a></strong> build chain, though. Maybe that&#8217;ll be an article for another day.</p>

<p>Then earlier this week I <strong><a href="http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework/">wrote about building</a></strong> an application for country-specific embedding of links for the <strong><a href="https://affiliate-program.amazon.com">Amazon Affiliate Program</a></strong>, with the idea of having purchases on <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon</a></strong> contribute to the running costs of this blog. Besides the time that I invest, I also rent a server for serving my <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch application</a></strong> at <strong><a href="http://www.hetzner.de">Hetzner Online AG</a></strong>, spending <strong>€81</strong> per months. Today I am happy to report that in the first week, clicks on <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon links</a></strong> have generated roughly <strong>$37</strong> in advertising fees aka revenue through orders in the <strong><a href="http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW">U.S. store</a></strong>. Sweet, thanks a lot to the purchasers, much appreciated. If that became the weekly average, the running costs for my server would be covered. Feels great that my baby, the blog, might be well on the way to paying its own rent. I will have to make my <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">geo-specific link shortener</a></strong> application more user friendly though; it is already annoying me a lot to store created links in code. But that&#8217;s on my list anyway; for this week the idea was to create a proof-of-concept and for that, storing the links in code was okay.</p>

<p>Also I was able to read a little more in <strong><a href="https://twitter.com/unclebobmartin">Uncle Bob</a></strong>&#8217;s book, <strong><a href="http://r.matthiasnehlsen.com/unclebob-cleancoder/link">The Clean Coder: A Code of Conduct for Professional Programmers (Robert C. Martin Series)</a></strong>. I enjoy this book a lot and I will make sure to share some thoughts soon. The main idea about sharing thoughts on what I read is that I read a lot but that I forget too much too soon. I have been planning on taking notes by chapter for the books I am reading for a while, but never really got around to that. By publishing those notes, I will be able to force myself to actually take good notes. First of all, I want to have these notes for my future reference so that I can more easily recap what I learned. If anyone else finds my notes useful, so much the better. More on that soon.</p>

<p>Okay, that&#8217;s it for today. Next week I will stay busy with the book chapters for a good part, but I also want to try to get back to my work in progress <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">article about writing the BirdWatch client in ClojureScript</a></strong>.</p>

<p>Are  you interested in receiving news about my weekly updates? If so, you can sign up for the newsletter right here:</p>

<!-- Begin MailChimp Signup Form -->


<p><link href="http://matthiasnehlsen.com//cdn-images.mailchimp.com/embedcode/slim-081711.css" rel="stylesheet" type="text/css"></p>



<div id="mc_embed_signup">
<form action="//matthiasnehlsen.us7.list-manage.com/subscribe/post?u=798fd7b50a1d9cc58be41c2af&amp;id=e8729041d5" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <label for="mce-EMAIL">Subscribe to weekly updates</label>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;"><input type="text" name="b_798fd7b50a1d9cc58be41c2af_e8729041d5" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>


<!--End mc_embed_signup-->


<p>Have a great week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a geo-aware link shortener with Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework/"/>
    <updated>2014-08-04T15:16:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework</id>
    <content type="html"><![CDATA[<p><strong><a href="http://matthiasnehlsen.com/blog/2014/08/01/weekly-update/">Last week</a></strong> I wrote about blog monetization through the <strong><a href="https://affiliate-program.amazon.com">Amazon Affiliate Program</a></strong>. I needed a way to serve country specific URLs depending on the location of the page visitor, so I wrote a geo-aware link shortener using <strong><a href="http://www.playframework.com">Play Framework</a></strong>. This week I would like to introduce that application. The source code is available on <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">GitHub</a></strong>. You may find that tool useful for your own purposes, or you might just want to read this as a tutorial on how to call backend services with Play Framework and the asynchrous <strong><a href="http://www.playframework.com/documentation/2.3.2/ScalaWS">WS client</a></strong>.</p>

<!-- more -->


<p>Let us define the purpose of this application: visitors (for example on a blog) shall be redirected to country-specific banners, slideshows or plain links for the matching Amazon store front for the country of origin of the request, or if none exists for the visitor&#8217;s country, the U.S. store. Links should be shortened as well. Let&#8217;s look at an <strong>example</strong>.</p>

<p>The link for <code>http://r.matthiasnehlsen.com/amazon-landing/link</code> is requested. Then, depending on the visitor&#8217;s country, the following happens:</p>

<p>1) request from the U.S.: the request is redirected to <strong><a href="http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW">amazon.com</a></strong></p>

<p>2) request from the UK: the request is redirected to <strong><a href="http://www.amazon.co.uk/?_encoding=UTF8&amp;camp=1634&amp;creative=19450&amp;linkCode=ur2&amp;tag=matthiasneh0c-21&amp;linkId=O6XF3Z2DDAH6EUXU" title="">amazon.co.uk</a></strong></p>

<p>3) requests from countries that do not have an Amazon store (or rather also where I have not created an account, such as India, Brazil, China, Japan) are redirected <strong><a href="http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW">amazon.com</a></strong> as well.</p>

<p>You can try this for yourself by following <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">this link</a></strong>. When you click it, you should be directed to your country&#8217;s own store if you&#8217;re from the United States, Canada, the United Kingdom, France, Germany, Spain or Italy, or to the U.S. otherwise.</p>

<p>Now building this application was surprisingly simple with <strong><a href="http://www.playframework.com">Play Framework</a></strong>. The relevant code easily fits on a single printed page. Before we get into the details, we will need a backend service for the actual lookup of the requesting IP address. There is one well working open source service for that already: <strong><a href="http://freegeoip.net">freegeoip</a></strong>. Freeogeoip is also running as a free online service, but I would rather run this myself, as that will give me a much faster and more predictable response time when there are only local requests. In fact, doing the GeoIP lookup locally only requires a consistent single digit number of milliseconds.</p>

<h2>Installing freegeoip</h2>

<p>You really only need to follow the <strong><a href="https://github.com/fiorix/freegeoip">instructions here</a></strong>. That worked well for me both on my development Mac and on my Ubuntu server, with a slight change in the <strong><a href="http://upstart.ubuntu.com">upstart</a></strong> script on Ubuntu, which I have commited to the project as a <strong><a href="https://github.com/fiorix/freegeoip/commit/90e974c653631e135e3e4e6ed08df6da39c7cef4">pull request</a></strong>.</p>

<h2>Building the link shortener with Play Framework</h2>

<p>We will need to be using three building blocks of Play applications: the <strong><a href="http://www.playframework.com/documentation/2.3.2/ScalaWS">WS client</a></strong>, <strong><a href="http://www.playframework.com/documentation/2.2.3/ScalaAsync">async controller actions</a></strong> and <strong><a href="http://www.playframework.com/documentation/2.2.3/ScalaJson">JSON parsing</a></strong>. A client requests a resource, which is handled by an async action. Inside this action, the WS client performs a GeoIP lookup by calling the local freegeoip service. The result of this async WS call, which is JSON, is then parsed for the country code matching the request. Then the model is asked for the URL matching the requested resource and country. We will look at the source code below, but first here is a flowchart:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/amzn-geo-lookup.png" title="'flowchart'" ></p>

<p>I hope this flowchart helps a little in following through the source code below.</p>

<figure class='code'><figcaption><span>Async controller action</span><a href='https://github.com/matthiasn/amzn-geo-lookup/blob/e75c16d198f9f266fa63dbe463856982a1b4fe22/app/controllers/Application.scala'>Application.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.ws.WS</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.concurrent.Execution.Implicits.defaultContext</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">model._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Controller Action for redirecting requester to URL matching the shortUrl and the country for the remote address,</span>
</span><span class='line'><span class="cm">   * otherwise when shortUrl exists but country does not have a configured URL, the U.S. entry as a fallback. Should</span>
</span><span class='line'><span class="cm">   * the entry for the U.S. store also not exist, the default URL is used.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * The country of the requester is determined by performing a GeoIP lookup. For this, a local installation of</span>
</span><span class='line'><span class="cm">   * freegeoip is expected (https://github.com/fiorix/freegeoip).</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * Handled errors:</span>
</span><span class='line'><span class="cm">   *   - freegeoip not running -&gt; fallback URL</span>
</span><span class='line'><span class="cm">   *   - freegeoip not responding within 100ms -&gt; fallback URL (critical, script loading blocks page load)</span>
</span><span class='line'><span class="cm">   *   - freegeoip responds with code other than 200 -&gt; fallback URL</span>
</span><span class='line'><span class="cm">   * The fallback URL is the U.S store link for existing shortened links and a specified general default URL otherwise.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   **/</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">redirect</span><span class="o">(</span><span class="n">shortUrl</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">format</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">.</span><span class="n">async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">fallbackUrl</span> <span class="k">=</span> <span class="nc">Links</span><span class="o">.</span><span class="n">redirectMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">shortUrl</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">format</span> <span class="o">+</span> <span class="s">&quot;.US&quot;</span><span class="o">).</span><span class="n">getOrElse</span><span class="o">(</span><span class="nc">Links</span><span class="o">.</span><span class="n">defaultRedirect</span><span class="o">)</span>
</span><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="nc">Links</span><span class="o">.</span><span class="n">geoLookupAddress</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="n">remoteAddress</span><span class="o">).</span><span class="n">withRequestTimeout</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="n">get</span><span class="o">().</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">geoRes</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">geoRes</span><span class="o">.</span><span class="n">status</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">200</span> <span class="k">=&gt;</span>
</span><span class='line'>              <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="o">(</span><span class="n">geoRes</span><span class="o">.</span><span class="n">json</span> <span class="o">\</span> <span class="s">&quot;country_code&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">flatMap</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">cc</span> <span class="k">=&gt;</span>
</span><span class='line'>                  <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="n">shortUrl</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">format</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">cc</span>
</span><span class='line'>                  <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logCc</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="n">cc</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nc">Links</span><span class="o">.</span><span class="n">redirectMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>              <span class="o">}.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">fallbackUrl</span><span class="o">)</span>
</span><span class='line'>              <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logUrl</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="n">url</span><span class="o">)</span>
</span><span class='line'>              <span class="nc">Redirect</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="n">status</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span>
</span><span class='line'>              <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logGeoFail</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="s">&quot;Status &quot;</span> <span class="o">+</span> <span class="n">status</span><span class="o">,</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>              <span class="nc">Redirect</span><span class="o">(</span><span class="n">fallbackUrl</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}.</span><span class="n">recover</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span>
</span><span class='line'>          <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logGeoFail</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="n">getMessage</span><span class="o">,</span> <span class="nc">Some</span><span class="o">(</span><span class="n">e</span><span class="o">))</span>
</span><span class='line'>          <span class="nc">Redirect</span><span class="o">(</span><span class="n">fallbackUrl</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is really all, including all the imports and four calls to a request logger. The actual code is a mere <strong>23 lines</strong> long, including error handling. Let us go through this line by line. <em>redirect</em> is a controller method that takes two parameters, <em>shortUrl</em> and <em>format</em>, both of which are Strings. They come from the route definition:</p>

<figure class='code'><figcaption><span>routes</span><a href='https://raw.githubusercontent.com/matthiasn/amzn-geo-lookup/e75c16d198f9f266fa63dbe463856982a1b4fe22/conf/routes'>routes </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>GET   /:shortUrl/:format   controllers.Application.redirect(shortUrl: String, format: String)
</span></code></pre></td></tr></table></div></figure>


<p>The above configuration means that the application will call <em>controllers.Application.redirect</em> with the two strings it parses out of the request&#8217;s path.</p>

<p>The controller action is built by play&#8217;s <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.mvc.ActionBuilder">ActionBuilder</a></strong> by calling <em>Action.async</em> with a block that takes a <em>request</em> of type <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.mvc.Request">play.api.mvc.Request</a></strong> and returns the future of a result. Next we construct a fallback link to be delivered when the following GeoIP lookup fails in one way or another.</p>

<p>Next we fire up an asynchronous call to the local <strong>freegeoip</strong> instance for the IP address derived from the request. I only give this a timeout of 100 milliseconds as I do not want to hold up page loading for longer than that, no matter what. In reality, this is plenty for this local lookup when things are running smoothly, I usually only measured around 7 milliseconds to fulfil this request end to end.</p>

<p>First, we create the <em>fallbackUrl</em> which will either be the specific link to the U.S. store or a default URL when the map lookup with the provided <em>shortUrl</em> and <em>format</em> is unsuccessful. This is either the corresponding link to the shortUrl but for the U.S. store, should that exist in the model, or a default URL otherwise (also specified in the model).</p>

<p>Next, we create a <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.libs.ws.WS$$WSRequestHolder">WsRequestHolder</a></strong> by specifying the URL, setting the timeout. Then we call <em>get()</em> on the request holder and <em>map</em> on it by providing a function to apply to a successful result of the future. In here, the result could either be a status code of <strong><a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">200</a></strong> or something else, for example a <strong><a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">400</a></strong> when the request failed. Such a failure can occur when calling freeogeoip locally from an IPv6 address, as is the case locally on my Mac. When the result is a <strong>200</strong>, we expect the result body to contain valid JSON, so we parse it for the country code. This parsing step returns the Option of a String, depending on if it found the specified JSON property or not. We <em>flatMap</em> with a function that itself returns an Option of a URL String by taking the parsed country code String and looking that up in the <strong><a href="http://docs.scala-lang.org/overviews/collections/maps.html">Map</a></strong> of the model. If such an entry exists, the Map lookup returns Some(urlString), otherwise it returns <strong><a href="http://www.scala-lang.org/api/current/index.html#scala.None$">None</a></strong>. Using <em>flatMap</em> now returns a single option instead of having to map on two options. Then we call <em>getOrElse</em> on the resulting Option, retrieving either the lookup result or the <em>fallbackUrl</em>. When encountering any result code other than <strong>200</strong>, we redirect to the <em>fallbackUrl</em>.</p>

<p>Now there is a second failure scenario where not the result code indicates what went wrong but instead the WS call fails altogether. That case would result in an failed future, which we can catch using <em>recover</em>, again redirecting to the <em>fallbackUrl</em>. For understanding what is going on here, it is important to realize that both the map combinator on the WS result and the recover combinator return new futures, both of type <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.mvc.SimpleResult">SimpleResult</a></strong>. I have found <strong><a href="http://docs.scala-lang.org/overviews/core/futures.html">this article</a></strong> in the Scala documentation helpful for understanding futures better. We could have used pattern matching on specific types of exceptions but that wasn&#8217;t necessary in this case, as we always want to simply return a Redirect to the <em>fallbackUrl</em> (plus log the exception).</p>

<h2>The model</h2>

<p>Right now all the data lives in the model&#8217;s source code. Obviously it would be better to utilize a database for this purpose, but for a first version, this serves us alright. The model is really just a <strong><a href="http://docs.scala-lang.org/overviews/collections/maps.html">Map</a></strong>. Here&#8217;s a shortened version as an example:</p>

<figure class='code'><figcaption><span>Links model amzn-geo-lookup/blob/e75c16d198f9f266fa63dbe463856982a1b4fe22/app/model/Links.scala Links.scala </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">model</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Links</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">redirectMap</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">](</span>
</span><span class='line'>    <span class="c1">// Amazon landing page</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.US&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.DE&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.de/?_encoding=UTF8&amp;camp=1638&amp;creative=19454&amp;linkCode=ur2&amp;site-redirect=de&amp;tag=matnehblo-21&amp;linkId=GTDGKZ677SJ76DR2&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.GB&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.co.uk/?_encoding=UTF8&amp;camp=1634&amp;creative=19450&amp;linkCode=ur2&amp;tag=matthiasneh0c-21&amp;linkId=O6XF3Z2DDAH6EUXU&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.FR&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;https://www.amazon.fr/?_encoding=UTF8&amp;camp=1642&amp;creative=19458&amp;linkCode=ur2&amp;tag=matthiasneh03-21&amp;linkId=WATXOGQM2BDD44FL&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.CA&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.ca/?_encoding=UTF8&amp;camp=15121&amp;creative=390961&amp;linkCode=ur2&amp;tag=matthiasneh0d-20&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.IT&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;https://www.amazon.it/?_encoding=UTF8&amp;camp=3370&amp;creative=24114&amp;linkCode=ur2&amp;tag=matthiasneh01-21&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.ES&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;https://www.amazon.es/?_encoding=UTF8&amp;camp=3626&amp;creative=24822&amp;linkCode=ur2&amp;tag=matthiasne0ac-21&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Building this geo-aware link shortener (in a very basic form) was really easy with <strong><a href="http://www.playframework.com">Play Framework</a></strong>. I am currently using this tool for the lookup of Amazon store fronts for redirecting affiliate links to the country of the visitor. But there is no reason why this couldn&#8217;t be used for all kinds of other scenarios where such a country-specific redirection of requests might be useful.
Now of course it is not ideal to store the links in code. Instead, that data should live in a database of some kind, propably with the stored values cached inside the application to not introduce additional round-trips for every lookup. Placing the data in a model object is already the first step towards building that. The redirecting controller would not have to change at all when replacing this model object with one that internally uses a database. Then it would also be really useful to create new links from a user interface. That could for example easily be achieved with an AngularJS application for link maintenance. There&#8217;s surely stuff for me to do. Please let me know if you would find this more elaborate version I just described (database, UI) useful, may it be that you would use it yourself or that you would just like to follow along a tutorial in which we build this application. The more successful this application turns out to be in contributing to this blog, the more time I will find to work on these improvements. Thus, you can literally vote with your wallet by clicking on links delivered by the described application.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>


<p>Please let me know about your thoughts. I will be happy to clarify anything that is not easy to understand just yet. Also please let me know if you encounter problems making any of this work for yourself.</p>

<p>That&#8217;s it for today, hope to see you back soon. And now that you have made it this far in the article, why don&#8217;t you follow me on Twitter <strong><a href="https://twitter.com/matthiasnehlsen">@matthiasnehlsen</a></strong> so you&#8217;ll be informed about the next article.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/01/weekly-update/"/>
    <updated>2014-08-01T15:51:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/01/weekly-update</id>
    <content type="html"><![CDATA[<p>Here&#8217;s something new to try, a weekly update, covering pretty much what I keep myself busy with. That can be what I am reading, what I am learning and what I am currently working on, mostly software-related. In this installment I discuss monetization, the Hamburg AngularJS meetup and photography in the mountains while hiking.</p>

<!-- more -->


<h1>Buying time for more blogging</h1>

<p>There&#8217;s been one thought that seems to keep coming back. I do like writing this blog a lot, but the problem is that I just do not seem to be having enough free time to really focus on this. Now I could try to make more time in my free time, but obviously that would be at the expense of my remaining private life. Or I could shift the blogging effort into my work life and get paid to do so. That&#8217;s quite an attractive thought. How could one go about this? I do buy a lot at <a target="_blank" href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon</a><img src="http://r.matthiasnehlsen.com/amazon-landing/img" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> because I find it really convenient to always get my orders delivered the next day and because I have not a single time had problems sending stuff back that I did not like. Now I usually have an opinion on the stuff I buy, so why not share my thoughts on those? Using the <strong><a href="https://affiliate-program.amazon.com">Amazon Affiliate Program</a></strong>, I can link to the product pages and whenever someone clicks on those links and then buys something within the next 24 hours, a small percentage of the paid price goes to me, the affiliate partner. The same goes for banner ads and such. Sounds like a decent way for the blog to start paying for itself, right?</p>

<p>But not so fast. There is one issue with the approach as outlined above. The Amazon Affiliate Program is on a per country basis. When I simply link to the U.S. store and you are in the United Kingdom and get redirected there, I won&#8217;t get a commission, even if I have signed up for the program in the UK. Instead, I would have to send you to the UK store in the first place. How can I do that though? How can I detect which country you come from and send you to the appropriate store, should there be one in your country? I would need to do a very fast GeoIP lookup to determine where your IP address is located and then redirect you to your country store. So I <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">wrote an application</a></strong> using <strong><a href="http://www.playframework.com">Play Framework</a></strong> and a local installation of <strong><a href="http://freegeoip.net">freegeoip</a></strong> which looks up the IP address in a few milliseconds and then redirects to the appropriate store. A detailed, tutorial-style article on that application will follow soon. Maybe others will find this useful as well.</p>

<h1>The first Hamburg AngularJS meetup</h1>

<p>Okay, this was technically last week, but there was no weekly review back then yet. So the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/events/193495902/">first session of the Hamburg AngularJS meetup</a></strong> that I founded recently (see <strong><a href="http://matthiasnehlsen.com/blog/2014/07/08/hamburg-angularjs-meetup/">this article</a></strong>) went great, it was fun to meet and solve a problem together. I had found a sponsor for the meetup, <strong><a href="https://www.packtpub.com">Packt Publisher</a></strong>, and they were so kind to provide some free ebooks that could be given away during the meetup. So I thought, why not do a raffle so that everyone gets a fair chance. Then I thought, why not build an <strong><a href="http://angularjs.org">AngularJS</a></strong> application together that draws the winning tickets in that raffle.</p>

<p>We had a total of four ebooks to give away, two each of these:</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/mastering-angular/iframe">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/angular-directives/iframe">
</iframe>


<p>I reserved one for the volunteer who was willing to do the coding on the big screen so there were three more to draw with the application we were about to build. Then as a group we discussed the options of how to go about this and that worked really well. We wrote a web application for drawing the three winners and we even wrote tests for the application.</p>

<p>I am looking forward to the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/events/196972082/">next session on August 21th</a></strong>, which is already fully booked. On that note, last time all 20 spots were gone and there was a waiting list with an additional 10 members. But we were &#8220;only&#8221; 13 who actually showed up. I wonder how to best deal with that. It is not a problem to not come, but at least it would be great to change the RSVP as soon as possible. But on the other hand, I am totally guilty of doing the same in the past, sign up for something free and then neither show up nor change the RSVP. Maybe the best way would be to just increase the number of spots and plan for a percentage of <strong><a href="http://www.merriam-webster.com/dictionary/no-show">no-shows</a></strong>? That&#8217;s working for airlines, why should it not work here. Maybe I should plan for 25% no-shows to be on the safe side and then just increase the number of spots accordingly?</p>

<h1>The mountains / photography</h1>

<p>I am already back. The weather turned quite bad and I wasn&#8217;t in the mood to get struck by a lightning while on a mountain top. It was still great though and I am looking forward to the next time. I had my camera with me, a <strong>Sony A7</strong> full-frame but surprisingly compact camera with the <strong>Zeiss 24-70 OSS 4.0</strong> lens, hoping I had found a good combination for travel. Here are some results:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/photography/DSC02249-1200x800.jpg" title="'snow'" ></p>

<p>If you&#8217;re interested, here is the image in the <strong><a href="http://matthiasnehlsen.com/images/photography/DSC02249-full.jpg">original resolution</a></strong>. It is not the original image, but rather the processed version I used when ordering a larger format print. If anyone is interested in the post processing in Photoshop, let me know. The same goes for the next image, with the original resolution <strong><a href="http://matthiasnehlsen.com/images/photography/DSC02231-full.jpg">here</a></strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/photography/DSC02231-1200x800.jpg" title="'valley'" ></p>

<p>I am happy overall with the image quality, but it is by far not as good images taken with fixed focal length lenses. Usually I don&#8217;t use zoom lenses at all, so this lens would mostly be used when traveling. But is it really a good travel lens? No, I don&#8217;t think so. It is way too bulky:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sony-a7-24-70.jpg" title="'a7 with 24-70mm'" ></p>

<p>I only got to use it so often as it had to go into the backpack because of it&#8217;s large size. That&#8217;s kinda pointless when you are hiking with other people. Once you find your pace, you don&#8217;t like to stop for that guy with the bulky camera, so you don&#8217;t. Meaning I will fall behind. So I ended up taking way more photos with my smartphone because that was always easily accessible. Could I simply have have taken these particular photos with the smartphone? Not a chance, besides the better image quality, they also are much more wide angle.</p>

<p>So the Zeiss lens goes back to Amazon tomorrow for a refund. My opinion on the lens is actually not terrible, I just don&#8217;t use zoom lenses frequently but rather use fixed focal length lenses when I can. If you do like to have a zoom lens, this one might serve you well. It is by all means better than the plastic kit lens. That one&#8217;s just plain awful. For traveling, I do find this lens to be prohibitively large though.</p>

<p>I think I have an idea for a better travel lens, but more on that another time. For those interested in the equipment I was talking about, here are the links:</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/sony-a7/iframe">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/zeiss-24-70/iframe">
</iframe>


<p>The camera is really great, by the way, I do not regret that purchase at all. The menu might not be the greatest but the image quality is unbeatable in this form factor at the moment, except for the more expensive <strong><a href="http://r.matthiasnehlsen.com/sony-a7r/link">A7R</a></strong>. But I do not usually need <strong>36MP</strong>.</p>

<h1>Newsletter for the weekly updates</h1>

<p>I have a newsletter for my purely software related blog posts, you can sign up for that one in the sidebar on the right. But these weekly updates are somewhat different, so I don&#8217;t want to spam you by announcing these articles on that newsletter. If you are interested in receiving news about the weekly update, you can sign up for that newsletter right here:</p>

<!-- Begin MailChimp Signup Form -->


<p><link href="http://matthiasnehlsen.com//cdn-images.mailchimp.com/embedcode/slim-081711.css" rel="stylesheet" type="text/css"></p>



<div id="mc_embed_signup">
<form action="//matthiasnehlsen.us7.list-manage.com/subscribe/post?u=798fd7b50a1d9cc58be41c2af&amp;id=e8729041d5" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <label for="mce-EMAIL">Subscribe to weekly updates</label>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;"><input type="text" name="b_798fd7b50a1d9cc58be41c2af_e8729041d5" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>


<!--End mc_embed_signup-->




<br />


<br />


<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch with ClojureScript and Om explained]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/"/>
    <updated>2014-07-24T08:30:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om</id>
    <content type="html"><![CDATA[<p><strong>This article is currently Work in Progress. Feedback more than welcome. Thanks!</strong></p>

<p><strong><a href="http://matthiasnehlsen.com/blog/2014/07/17/BirdWatch-in-ClojureScript/">Last week</a></strong> I wrote about having written my first actual application using <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and <strong><a href="https://github.com/swannodette/om">Om</a></strong>, a web client for my <strong><a href="http://birdwatch.matthiasnehlsen.com/cljs/#*">BirdWatch</a></strong> application. You may want to start with that article to understand the background better. This week I first want to talk about my experience with ClojureScript and Om thus far. Then I want to start describing the implementation details. I am fully aware that what has come out of it thus far is far from elegant in terms of pretty much everything. But in my defense, it does appear to work :)</p>

<!-- more -->


<p>Click the screenshot below to see a live version of the application:</p>

<p><a href="http://birdwatch.matthiasnehlsen.com/cljs/#" target="_blank"><img src="http://matthiasnehlsen.com/images/cljs-screenshot.png" /></a></p>

<p>So my experience. I have been reading articles and books about <strong><a href="http://clojure.org">Clojure</a></strong> for a while and it really does seem to resonate with me. I like this whole <strong><a href="http://en.wikipedia.org/wiki/Homoiconicity">homoiconicity</a></strong> thing. Code and data are basically the same thing and they thus share the same data structures. Code is really data, representing the <strong><a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree (AST)</a></strong> directly. Now my initial reaction to this concept was that it must be rather low-level to do so, but to my surprise the opposite is true with a <strong><a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a></strong>; you gain a tremendous amount of expressiveness. I also really like that <strong>a)</strong> Clojure introduces <strong><a href="http://clojure.org/data_structures">additional data structures</a></strong> besides the obvious <strong>list</strong>, i.e. Maps, Sets and Vectors and <strong>b)</strong> it is idiomatic to simply use those.</p>

<p>Sure, there is something to be said about types and how <strong><a href="http://en.wikipedia.org/wiki/Type_safety">type safety</a></strong> makes working on large-scale applications less error-prone. But at the same time I have a hunch that the presence of hundreds of (case) classes complects an application in a way that idiomatic usage of a map does not. Have you seen this before, where you have cascades of only slightly differing data structures, when the next step of a computation adds only a little bit of data and calls that a new thing, modeled as a different something? That can become difficult to reason about, particularly when there are no useful design documents outlining how one morphs into the other.</p>

<p>But then again I am somewhat afraid of the lack of compile time errors when I call a function with something of a wrong type. So as of now, that is an unsolved question for me. May my endeavor into Clojure and thus Lisp afford me with a more educated opinion on this matter. Against strongly typed systems I have to say that I have seen way too many runtime failures that <strong>a)</strong> the type system and the compiler did not catch and <strong>b)</strong> which really came from the application being so incidentally complex that the consequences of changes were by all means (too) hard to grasp even for the most senior team members.</p>

<p>I guess I really need some production experience with Clojure in order to get to a fair and substantial comparison of the different approaches. But at least the application I am talking about today is a start. And learning a new language has never hurt anyone, I guess.</p>

<p>So how is this going as an experience so far, you might ask.</p>

<p>Here are my perceived pros:</p>

<ul>
<li>When crafting functions in Clojure, I just feel more like playing an instrument. It feels more <strong>playful</strong>, in a good way.</li>
<li>Code tends to be <strong>short</strong> and <strong>concise</strong>.</li>
<li>The core of the language is <strong>easily understood</strong>, at least as far as my limited understanding goes.</li>
<li><strong>Immutability</strong> is great, I have been a fan of immutable data structures for a while and Clojure makes it relatively hard to work with mutable state, which is good.</li>
<li><strong>Om</strong> uses Facebook&#8217;s <strong>ReactJS</strong>, a UI rendering library that I have tried out previously and that I am somewhat familiar with.</li>
<li><strong>Refactoring is fun</strong>, I have found spotting repetitive parts among functions and then factoring these parts out into new and shared functions not only easier compared to many other languages but also pleasant.</li>
<li><strong>Data structures</strong>: maps and sets and, by importing an external library in the case of this application, priority maps are a great thing to have, much nicer than only having JavaScript arrays and objects at your disposal.</li>
<li><strong>Replacing external dependencies</strong> with newer versions generally seems to work in Clojure. This is the complete opposite of my experience in Scala, where a new version of pretty much anything oftentimes results in days of work. I has gotten better over the last year with Scala for sure, but it is nowhere near as smooth as it appears to be with Clojure.</li>
<li>For general data manipulation I already feel I am becoming more <strong>productive</strong> with Clojure compared to JavaScript and <strong><a href="http://underscorejs.org">underscore</a></strong> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
</ul>


<p>Here are some (somewhat minor) cons, as well:</p>

<ul>
<li>I don&#8217;t feel I have fully grasped Om yet, despite having worked with ReactJS before.</li>
<li>Testing output. I have tried out <strong><a href="http://cemerick.com">Chas Emerick</a></strong>&#8217;s <strong><a href="https://github.com/cemerick/clojurescript.test">clojurescript.test</a></strong> and while it seems do its job alright, the output is plain black and white. How am I supposed to do <strong><a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html">red-green refactoring</a></strong> with this? But seriously, this might be mostly cosmetic but still I like to see green in my tests as that soothes my mind. When I see red in tests, my alertness level goes up. Black and white output excites none of these emotions. Is there just something wrong with my installation or vision that I don&#8217;t see colors in my test output?</li>
<li>Performance. The application so far is MUCH slower than the JavaScript counterpart in some areas. When processing preloaded tweets, the plain JavaScript version (used in the <strong><a href="http://birdwatch.matthiasnehlsen.com/angular/#/">AngularJS</a></strong> and <strong><a href="http://birdwatch.matthiasnehlsen.com/#/">ReactJS</a></strong> clients) is probably ten times as fast. Click those previous links and see what I mean. The previous tweets are loaded by an Ajax call in chunks of 500 items and loading and processing each chunk takes maybe a second. Now when you open the <strong><a href="http://birdwatch.matthiasnehlsen.com/cljs/#*">ClojureScript version</a></strong>, you see that it takes much longer to process the previous items. I am looking forward to trying out <strong><a href="https://github.com/cognitect/transit-cljs">Transit</a></strong> here, which seems very promising, not only for this application but as a wire format in general. I need to spend some time with it as it doesn&#8217;t allow automatic keywordization (yet?) and my application relies on a keywordized map. That will have to happen after my vacation.</li>
<li>Application state in a single large map stored in an <strong><a href="http://clojure.org/atoms">atom</a></strong> can be cumbersome, I would not mind having something like objects or separate services here and there. I have looked at <strong><a href="http://stuartsierra.com">Stuart Sierra</a></strong>&#8217;s <strong><a href="https://github.com/stuartsierra/component">component library</a></strong> and it does seem to offer a good approach to componentizing the application, but I have yet to find the time to try it out.</li>
<li>Interacting with the state from inside Om is different than interacting with the state atom from other parts of the application. <strong><a href="https://github.com/Prismatic/om-tools">Om-tools</a></strong> seem to be an interesting way around this, will need to give that a try and see how that works.</li>
</ul>


<p>By the way, regarding performance, I have seen the same problems with my naïve Scala.js approach before. I have not played around with that one again since my first attempt back in January. That is mostly for the lack of a ReactJS binding that is anywhere near as complete as Om. I&#8217;ll be happy to give it a try again once ReactJS support is better.</p>

<h1>Introduction to Clojure</h1>

<p>First of all, you will need to understand a few very basic things about Clojure being a <strong><a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a></strong> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Feel free to skip this section if you know Clojure already. My aim is for you to be able to follow along even if you&#8217;ve never tried Clojure or a Lisp before. So the basic idea in a Lisp is the List (no wonder, as Lisp stands for List Programming), a <strong><a href="http://en.wikipedia.org/wiki/Singly_linked_list#Singly_linked_lists">singly linked list</a></strong>, to be precise. This list can hold both code and data. Let&#8217;s see how that looks like. You can try these examples out using the <strong><a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a></strong> in <strong><a href="http://leiningen.org">Leiningen</a></strong> by running <code>lein repl</code> from your command line.</p>

<p>This is an empty list: <code>()</code> It evaluates to itself.</p>

<p>When the list is not empty, the first item in the list will be evaluated as a function: <code>(some-function "a" "b")</code>
Here, <em>some-function</em> will be called with the two arguments &#8220;a&#8221; and &#8220;b&#8221;. Example <code>(print "Hello World!")</code> Sweet, that is all there is to <strong><a href="http://en.wikipedia.org/wiki/Hello_world_program">Hello World</a></strong>.</p>

<p>The first item in a list has to implement the <em>IFn</em> interface meaning it must be possible to call the item as a function. Try this: <code>("a" "b")</code>. Not surprisingly, the string &#8220;a&#8221; is not a function, causing this to fail. You can however <strong>quote</strong> the list to prevent evaluation, like this: <code>'("a" "b")</code>. Now we can use the list to store items without the first one being evaluated.</p>

<p>Conveniently, Clojure also has a <strong>vector</strong> which comparable to an array. You can use it in place of a quoted list, and in fact it is idomatic to do so when we do not want the first item evaluated. Example <code>[1 2 3]</code></p>

<p>When you want to name something, you have different ways of doing so. The first one is <strong>def</strong>, you can use this to name stuff in the top level of a namespace. Example <code>(def foo [1 2 3])</code> This creates a vector named <em>foo</em> which you can then refer to from elsewhere. After typing in the previous example, you will see that now you can just type <code>foo</code> in the REPL and get the vector we have defined previously.</p>

<p>Or you can use the <strong>let-binding</strong> to name things locally, for example inside a function body, like so <code>(let [bar [1 2 3]])</code> Here, you can only refer to <em>bar</em> inside the let form, meaning inside the pair of braces that enclose the let form. Let&#8217;s use <em>bar</em>: <code>(let [bar [1 2 3]] (print bar))</code> You should see the vector being printed in your REPL.</p>

<p>Functions can be defined as follows: <code>(fn [a] (+ a 1))</code> with this, we have defined a function that adds 1 to the provided argument.
You can use the above as an anonymous function like this: <code>((fn [a] (+ a 1)) 2)</code> Remember, the first item in a list will be evaluated, and this happens to be the anonymous function we just defined. However, this can be a little clumsy. We can also store the function in a def: <code>(def add-one (fn [a] (+ a 1)))</code> now we can call the function, like so <code>(add-one 2)</code>.</p>

<p>However, this can even be simpler using the <strong>defn macro</strong>, like so: <code>(defn add-one [a] (+ a 1))</code></p>

<p>Sometimes, you may want to create a function in place using the anonymous function literal, like so: <code>(#(+ % 1) 2)</code>. This does the same as the anymous function in the first position of the list as above, except for being shorter. During compilation, the <code>#(+ % 1)</code> expands into <code>(fn [a] (+ a 1))</code>, where the percent sign denotes the first argument. If there are multiple arguments, you use <em>%1</em>, <em>%2</em> and so on instead (1-based).</p>

<p><strong>TO BE CONTINUED</strong></p>

<h1>Application architecture</h1>

<p>Let us now have a look at the implementation of the BirdWatch client <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>The most important part to understand is that the application state lives in one large <strong><a href="http://clojure.org/atoms">atom</a></strong>. When the application is started, this atom is populated with the return of a function that returns a map representing a clean slate. Here is how that function looks like:</p>

<figure class='code'><figcaption><span>Function returning initial application state</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/util.cljs'>util.cljs (Lines 72 to 83)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">initial-state</span> <span class="p">[]</span>
</span><span class='line'>  <span class="s">&quot;function returning fresh application state&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:count</span> <span class="mi">0</span>
</span><span class='line'>   <span class="ss">:n</span> <span class="mi">10</span>
</span><span class='line'>   <span class="ss">:retweets</span> <span class="p">{}</span>
</span><span class='line'>   <span class="ss">:tweets-map</span> <span class="p">{}</span>
</span><span class='line'>   <span class="ss">:search-text</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>   <span class="ss">:page</span> <span class="mi">1</span>
</span><span class='line'>   <span class="ss">:search</span> <span class="s">&quot;*&quot;</span>
</span><span class='line'>   <span class="ss">:stream</span> <span class="nv">nil</span>
</span><span class='line'>   <span class="ss">:sorted</span> <span class="ss">:by-rt-since-startup</span>
</span><span class='line'>   <span class="ss">:by-followers</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-retweets</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-favorites</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-rt-since-startup</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-id</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:words-sorted-by-count</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the keys in this map are <strong><a href="http://clojure.org/data_structures#Data%20Structures-Keywords">keywords</a></strong>. Keywords have the great property that we can use them as functions that take a map as an argument and that then return the value for this key. We will see that in action further below.</p>

<p>Upon startup of the application, the function above is called for populating the state atom:</p>

<figure class='code'><figcaption><span>Function returning initial application state</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/core.cljs'>core.cljs (lines 13 to 16)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Application state in a single atom</span>
</span><span class='line'><span class="c1">;;; Will be initialized with the map returned by util/initial-state.</span>
</span><span class='line'><span class="c1">;;; Reset to a new clean slate when a new search is started.</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">app-state</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">(</span><span class="nf">util/initial-state</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then the reference to this <strong><a href="http://clojure.org/atoms">atom</a></strong> is passed around. When an update is desired, the map is dereferenced, an updated version is created using some function call and the result is then written back into the atom using a transaction. It is important to note that clojure data structures are immutable. Immutability guarantees that you can pass data structures around without having to worry that whoever you pass it to might change the data. Data also does not become invalid. Instead, whatever version in time you get a hold on does represent the definite state at the time that version was created. State changes only can only happen inside a transaction, in which a new and altered version of the state is passed back. The transaction part would also mean that no other process could alter state at the same time, in that case the later transaction would be retried until the first one has succeeded. This would be particularly useful when running in a multithreaded environment. However, the JavaScript code resulting from the ClojureScript compilation process runs in a single threaded event loop so there&#8217;s only ever one thing happening at the same time anyway. On the server side this property becomes more valuable, still.</p>

<p>Having a function that provides an initial, clean state makes it trivial to reset the application state at a later point <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, we can simply swap the current state with the clean slate map.</p>

<h2>Ingesting tweets</h2>

<p>Tweets get into the system for further analysis in two ways. First, there is a Server Sent Event stream continously delivering new matches to a query, with low latency (typically around a second between tweeting and having the tweet show up in the application). Then also previous tweets are loaded. Both are triggered in the <strong>start-search</strong> function:</p>

<figure class='code'><figcaption><span>start-search function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 49 to 59)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">start-search</span> <span class="p">[</span><span class="nv">app</span> <span class="nv">tweets-chan</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;initiate new search by starting SSE stream&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">search</span> <span class="p">(</span><span class="ss">:search-text</span> <span class="o">@</span><span class="nv">app</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">s</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">search</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="s">&quot;*&quot;</span> <span class="nv">search</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">nil? </span><span class="p">(</span><span class="ss">:stream</span> <span class="o">@</span><span class="nv">app</span><span class="p">)))</span> <span class="p">(</span><span class="nf">.close</span> <span class="p">(</span><span class="ss">:stream</span> <span class="o">@</span><span class="nv">app</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">reset!</span> <span class="nv">app</span> <span class="p">(</span><span class="nf">util/initial-state</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span> <span class="nb">assoc </span><span class="ss">:search</span> <span class="nv">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">aset </span><span class="nv">js/window</span> <span class="s">&quot;location&quot;</span> <span class="s">&quot;hash&quot;</span> <span class="p">(</span><span class="nf">js/encodeURIComponent</span> <span class="nv">s</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span> <span class="nb">assoc </span><span class="ss">:stream</span> <span class="p">(</span><span class="nf">js/EventSource.</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;/tweetFeed?q=&quot;</span> <span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.addEventListener</span> <span class="p">(</span><span class="ss">:stream</span> <span class="o">@</span><span class="nv">app</span><span class="p">)</span> <span class="s">&quot;message&quot;</span> <span class="o">#</span><span class="p">(</span><span class="nf">receive-sse</span> <span class="nv">tweets-chan</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doall </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="mi">5</span><span class="p">)]</span> <span class="p">(</span><span class="nf">ajax/prev-search</span> <span class="nv">s</span> <span class="mi">500</span> <span class="p">(</span><span class="nb">* </span><span class="mi">500</span> <span class="nv">x</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us go through this line by line. The <strong>defn</strong> macro denotes a function named <em>start-search</em> which takes two arguments, <em>app</em> for a reference to the application state and <em>tweets-chan</em>, a channel where to put tweets. Channels are building blocks in <strong><a href="https://github.com/clojure/core.async">core.async</a></strong>. We will get to that in a little bit, for now just think about a channel as a conveyor belt onto which one part of the application puts data. On the other end, another part of the application picks up the data, but the sender does not need to know about it. Broadly speaking, it is a sweet way to decouple parts of an application.</p>

<p>In the next line there is the description of the function, followed by a <strong><a href="http://clojure.org/special_forms#binding-forms">let binding</a></strong> where we declare first two local immutable values, both of which are available for the remainder of the function. The first one, <em>search</em>, retrieves the value for the key <em>:search-text</em> in the application state. <em>@app</em> dereferences the application state, giving us an immutable copy of the current app state. <code>(:search-text @app)</code> will run the keyword as a function with the state map as an argument, returning the value in the map. Next we declare <em>s</em> whose value can take two paths as decided by the <strong><a href="http://clojure.org/special_forms#Special%20Forms--(if%20test%20then%20else?)">if special form</a></strong>. The if form consists of three parts. There is a test: <code>(= search "")</code>. Not surprisingly at this point, <strong>=</strong> is a function that evaluates if the arguments passed to it are equal, returning either true or false. The <strong>if</strong> form then either returns the expression right after the test if the test evaluated to <em>true</em> or the subsequent one if it evaluated to <em>false</em>. What we are doing here is simply replacing an empty string with an asterisk or otherwise just taking the search string.</p>

<p>Next, we close a previous Server Sent Event stream, should one exist. This is only required when resetting the application state as on initial startup the value for the <em>:stream</em> key will be nil. Then we reset the application state by replacing it with a clean state. Then we swap the value for the <em>:search</em> key with the content of the local value <em>s</em>. Then we set the location hash to represent a URI encoded version of the search string.</p>

<p>In the next line, we create a new EventSource object for the live stream of tweets and store it under the <em>:stream</em> key, to which we next attach a function as an event listener. We are using an anonymous function literal here because the <em>receive-sse</em> function takes two arguments (a channel and an event from the EventSource object) whereas the event listener requires a function that only takes a single argument. Then finally we call <em>ajax/prev-search</em> with 5 chunks of 500 results each, but we will look at that later. Let us for now focus on the <em>receive-sse</em> function:</p>

<figure class='code'><figcaption><span>receive-sse function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 44 to 47)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">receive-sse</span> <span class="p">[</span><span class="nv">tweets-chan</span> <span class="nv">e</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;callback, called for each item (tweet) received by SSE stream&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">tweet</span> <span class="p">(</span><span class="nf">js-&gt;clj</span> <span class="p">(</span><span class="nf">JSON/parse</span> <span class="p">(</span><span class="nf">.-data</span> <span class="nv">e</span><span class="p">))</span> <span class="ss">:keywordize-keys</span> <span class="nv">true</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">put!</span> <span class="nv">tweets-chan</span> <span class="nv">tweet</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a function with two arguments, a channel and an event. In the <strong>let-binding</strong>, the event is parsed into a tweet. This reads inside out: <strong>1)</strong> get event data <strong>2)</strong> parse JSON into a JavaScript object <strong>3)</strong> convert the JavaScript object into a Clojure(Script) Map. Note that for the conversion into a Clojure Map we can automatically have the keys converted into keywords using <em>:keywordize-keys true</em>. This is convenient as we can use the keywords as functions later for retrieving values for the respective key. Then the <em>tweet</em> from the let binding is <em>put!</em> onto the <em>tweets-chan</em>, representing the aforementioned conveyor belt where we do not need to worry about who picks up the items on the other end.</p>

<p>Now is a good time to talk a little more about those channels. Channels are brought to Clojure by importing the <strong><a href="https://github.com/clojure/core.async">core.async</a></strong> library. <strong>Core async</strong> is modeled after channels in the <strong><a href="http://golang.org">Go programming language</a></strong>, which implement <strong><a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Processes</a></strong> or <strong>CSP</strong> for short. You really should watch <strong><a href="http://www.infoq.com/presentations/clojure-core-async">Rick Hickey&#8217;s talk about core.async</a></strong> now if you haven&#8217;t already. The same goes for this talk from 2012 by Rob Pike, who played a key role in the development of Go: <strong><a href="https://www.youtube.com/watch?v=f6kdp27TYZs">Go Concurrency Patterns</a></strong>.</p>

<p>I am really only scratching the surface of what can be achieved with CSP, but it does seem like a useful abstraction to decouple parts of an application. Besides the aforementioned <em>tweets-chan</em> there is also a channel for previous tweets, those that are retrieved using Ajax calls (we will cover that part next):</p>

<figure class='code'><figcaption><span>Channels</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/core.cljs'>core.cljs (lines 37 to 44)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Channels for handling information flow in the application.</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tweets-chan</span> <span class="p">(</span><span class="nf">chan</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">prev-tweets-chan</span> <span class="p">(</span><span class="nf">chan</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span>
</span><span class='line'> <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">t</span> <span class="nv">chan</span><span class="p">]</span> <span class="p">(</span><span class="nf">alts!</span> <span class="p">[</span><span class="nv">tweets-chan</span> <span class="nv">prev-tweets-chan</span><span class="p">]</span> <span class="ss">:priority</span><span class="p">)]</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">tweets/add-tweet</span> <span class="nv">t</span> <span class="nv">app-state</span> <span class="nv">word-cloud</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">recur</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, two channels are defined. Then, inside the <em>go-block</em>, <em>alts!</em> with <em>:priority</em> takes the one of the items from the two channels, with priority on the first one. That is because live tweets shall always be processed immediately whereas previous results can wait. With this item <em>t</em> taken from one of the channels, the <em>add-tweet</em> function in the <em>tweets</em> namespace is called. Finally, the go-loop runs continously using <em>recur</em>.</p>

<p>Before looking at the <em>tweets</em> namespace, let us have a quick look at the ajax call performed in the <em>start-search</em> function above:</p>

<figure class='code'><figcaption><span>prev-search</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/ajax.cljs'>ajax.cljs (lines 35 to 40)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">prev-search</span> <span class="p">[</span><span class="nv">query-string</span> <span class="nv">size</span> <span class="nv">from</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">json-xhr</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:method</span> <span class="ss">:post</span>
</span><span class='line'>     <span class="ss">:url</span> <span class="s">&quot;/tweets/search&quot;</span>
</span><span class='line'>     <span class="ss">:data</span> <span class="p">(</span><span class="nf">query</span> <span class="nv">query-string</span> <span class="nv">size</span> <span class="nv">from</span><span class="p">)</span>
</span><span class='line'>     <span class="ss">:on-complete</span> <span class="o">#</span><span class="p">(</span><span class="nf">put!</span> <span class="nv">ajax-results-chan</span> <span class="nv">%</span><span class="p">)}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, we see a function that takes a query string, the expected number of items in the result and an offset. What it then does is call <em>json-xhr</em> from the imported <strong><a href="http://docs.closure-library.googlecode.com/git/class_goog_net_XhrIo.html">goog.net.XhrIo</a></strong> with a map specifying method, url, data and an event handler. <strong>XhrIo</strong> comes with <strong><a href="https://developers.google.com/closure/compiler/">Google&#8217;s Closure Compiler</a></strong> that is used in the ClojureScript to JavaScript compilation process.</p>

<p>The query itself is generated by the <em>query</em> function in the same namespace:</p>

<figure class='code'><figcaption><span>Ajax</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/ajax.cljs'>ajax.cljs (lines 19 to 23)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">query</span> <span class="p">[</span><span class="nv">query-string</span> <span class="nv">size</span> <span class="nv">from</span><span class="p">]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:size</span> <span class="nv">size</span> <span class="ss">:from</span> <span class="nv">from</span>
</span><span class='line'>   <span class="ss">:sort</span> <span class="p">{</span><span class="ss">:id</span> <span class="s">&quot;desc&quot;</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:query</span> <span class="p">{</span><span class="ss">:query_string</span> <span class="p">{</span><span class="ss">:default_field</span> <span class="s">&quot;text&quot;</span> <span class="ss">:default_operator</span> <span class="s">&quot;AND&quot;</span>
</span><span class='line'>                          <span class="ss">:query</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;(&quot;</span> <span class="nv">query-string</span> <span class="s">&quot;) AND lang:en&quot;</span><span class="p">)}}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function generates the map with the required properties for the ElasticSearch query on the server side. This query will eventually go on the wire as JSON.</p>

<p>Then finally as an event handler there is an anonymous function literal putting the result onto another channel for the Ajax results:</p>

<figure class='code'><figcaption><span>Ajax results channel and Go Loop</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/ajax.cljs'>ajax.cljs (lines 11 to 17)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ajax-results-chan</span> <span class="p">(</span><span class="nf">chan</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">parsed</span> <span class="p">(</span><span class="nf">js-&gt;clj</span> <span class="p">(</span><span class="nf">JSON/parse</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">ajax-results-chan</span><span class="p">))</span> <span class="ss">:keywordize-keys</span> <span class="nv">true</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">t</span> <span class="p">(</span><span class="ss">:hits</span> <span class="p">(</span><span class="ss">:hits</span> <span class="nv">parsed</span><span class="p">))]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="ss">:_id</span> <span class="nv">t</span><span class="p">)</span> <span class="mi">200</span><span class="p">))</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="p">(</span><span class="nf">timeout</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">put!</span> <span class="nv">cljs-om.core/prev-tweets-chan</span> <span class="p">(</span><span class="ss">:_source</span> <span class="nv">t</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">recur</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, the JSON for each item on the channel is parsed into a Clojure(Script) data structure, where <em>parsed</em> is a vector. Then, each item in that vector is <em>put!</em> onto the <em>prev-tweets-chan</em>. Rather, the value for the <em>:_source</em> key is used here as that is where ElasticSearch stores the original item. One thing to note here is the usage of a <strong><a href="https://clojure.github.io/core.async/#clojure.core.async/timeout">timeout</a></strong> roughly every 200 tweets. I have introduced this in order to occasionally return control to the <strong><a href="http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/">JavaScript Event Loop</a></strong> so that <strong>a)</strong> the UI gets rendered and <strong>b)</strong> the event listener for tweets from the Server Sent Event stream can do its thing. Otherwise, the application just appears to halt until all previous tweets are processed, which is really annoying. But this seems rather hacky, I would be really curious about solving this problem more elegantly.</p>

<p>With the preloading of tweets using Ajax calls covered, we can now proceed to the processing of tweets inside the <em>tweets</em> namespace. As we have seen before with the go loop alternating between channels, <em>add-tweet</em> is called for each tweet coming into the application:</p>

<figure class='code'><figcaption><span>add-tweet function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 33 to 42)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-tweet</span> <span class="p">[</span><span class="nv">tweet</span> <span class="nv">app</span> <span class="nv">word-cloud</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;increment counter, add tweet to tweets map and to sorted sets by id and by followers&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">state</span> <span class="o">@</span><span class="nv">app</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span> <span class="nb">assoc </span><span class="ss">:count</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="ss">:count</span> <span class="nv">state</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">add-to-tweets-map</span> <span class="nv">app</span> <span class="ss">:tweets-map</span> <span class="p">(</span><span class="nf">util/format-tweet</span> <span class="nv">tweet</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">util/swap-pmap</span> <span class="nv">app</span> <span class="ss">:by-followers</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="ss">:id_str</span> <span class="nv">tweet</span><span class="p">))</span> <span class="p">(</span><span class="ss">:followers_count</span> <span class="p">(</span><span class="ss">:user</span> <span class="nv">tweet</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">util/swap-pmap</span> <span class="nv">app</span> <span class="ss">:by-id</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="ss">:id_str</span> <span class="nv">tweet</span><span class="p">))</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">tweet</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">add-rt-status</span> <span class="nv">app</span> <span class="nv">tweet</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">wc/process-tweet</span> <span class="nv">app</span> <span class="p">(</span><span class="ss">:text</span> <span class="nv">tweet</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">. </span><span class="nv">word-cloud</span> <span class="p">(</span><span class="nf">redraw</span> <span class="p">(</span><span class="nf">clj-&gt;js</span> <span class="p">(</span><span class="nf">wc/get-words</span> <span class="nv">app</span> <span class="mi">250</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all, for each new tweet, the counter inside the application state is swapped with the number incremented by one. Then, <em>add-to-tweets-map</em> is called (described below), which as the name suggests adds the current tweet to the map that is found under the <em>:tweets-map</em> key in the application state. Before being added, each tweet is also processed; in that step for example user mentions and links are replaced with the correct HTML representation.</p>

<p>For a better understanding: the application allows displaying the tweets in different sort orders. Priority maps are used for maintaining the sort order. These priority maps contain nothing more than the ID of the tweet and whatever that specific map is sorted on, i.e. the number of followers. The full tweets are stored in one map with the ID of a tweet as the key and the tweet itself as the value. For displaying a sorted list of tweets in the UI, a sorted vector from the priority map is mapped by looking up each item in <em>:tweets-map</em> and using that item instead of the sorted value.</p>

<p>Here is how a tweet is added to the application state:</p>

<figure class='code'><figcaption><span>add-to-tweets-map function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 11 to 15)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-to-tweets-map</span> <span class="p">[</span><span class="nv">app</span> <span class="nv">tweets-map</span> <span class="nv">tweet</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;adds tweet to tweets-map&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span>
</span><span class='line'>         <span class="nv">assoc-in</span> <span class="p">[</span><span class="nv">tweets-map</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="ss">:id_str</span> <span class="nv">tweet</span><span class="p">))]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">util/format-tweet</span> <span class="nv">tweet</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function above takes the application state, the keyword under which the tweets-map can be found in the application state and a tweet to be added. It then swaps the application state with a new version into which the tweet is added after undergoing the <em>format-tweet</em> treatment. Note that <em>assoc-in</em> takes a vector that describes the path to the item being added or changed. The string representation of the tweet ID is converted to a keyword so that it can be used as a functionfor lookup later (as previously described). As an example, let&#8217;s say we have a tweet with ID string &#8220;12345&#8221;, then the path passed to <em>assoc-in</em> looks like this: [:tweets-map :12345]. Afterwards, the map stored under the <em>:tweets-map</em> key will have a new key <em>:12345</em> with the formatted tweet as the associated value. A call to this function will also replace an already existing item.</p>

<p><strong>TO BE CONTINUED</strong></p>

<h1>Summary</h1>

<p>Overall I find working with Clojure(Script) and Om pleasant. Working and thinking in Clojure is a lot of fun. I have heard many people complain about all the parentheses in Lisp but I do not share that sentiment. Quite the opposite, I find that <strong><a href="http://en.wikipedia.org/wiki/S-expression">s-expressions</a></strong> and the associated <strong><a href="http://en.wikipedia.org/wiki/Polish_notation">prefix notation</a></strong> add a lot of clarity without having to learn any additional, language-specific rules.</p>

<p>However I still need to understand how to better structure an application in Clojure(Script). I am not completely happy with the current architecture of the application described in this post yet. But that will hopefully improve.</p>

<p>Please comment and suggest any improvement you can think of, including typos and difficult to understand sentences. This is a work in progress, and a rather early draft at that. Any help is certainly welcome.</p>

<p>Cheers,
Matthias</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Actually I should mention <strong><a href="http://lodash.com">Lo-Dash</a></strong> instead of <strong>underscore</strong>. I use it as a drop-in replacement for underscore especially for one reason and that is <strong><a href="http://lodash.com/docs#cloneDeep">_.cloneDeep</a></strong>. The ability to deep clone a data structure makes developing an undo functionality much, much, much easier. Not as trivial as with <strong><a href="http://swannodette.github.io/2013/12/31/time-travel/">ClojureScript</a></strong> or with <strong><a href="http://matthiasnehlsen.com/01/24/scala-dot-js-and-reactjs/">Scala.js</a></strong> but it is not difficult, either.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Please let me know if you do not understand everything in here or have suggestions on how to make it simpler.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>I might edit this article should a better architecture evolve.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>That is not completely true here. The application makes use of channels for processing both previous and current tweets. What if there is still stuff on channels when the reset takes place? This still needs to be solved.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch client using ClojureScript and Om]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/17/BirdWatch-in-ClojureScript/"/>
    <updated>2014-07-17T08:30:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/17/BirdWatch-in-ClojureScript</id>
    <content type="html"><![CDATA[<p>Back in January I wanted to try out <strong><a href="https://github.com/swannodette/om">Om</a></strong>:</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/swannodette">@swannodette</a> Om looks really powerful, I think I&#39;m going to give it a try in one of the next articles.</p>&mdash; Matthias Nehlsen (@matthiasnehlsen) <a href="https://twitter.com/matthiasnehlsen/statuses/427945296971042816">January 27, 2014</a></blockquote>


<script async src="http://matthiasnehlsen.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>For those of you who do not know, <strong><a href="https://github.com/swannodette/om">Om</a></strong> is a <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> wrapper around Facebook&#8217;s <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> library. I have covered <strong>ReactJS</strong> on this blog a few times, for example in the post mentioned in the twitter conversation above. <strong>ClojureScript</strong> is very similar to <strong><a href="http://clojure.org">Clojure</a></strong>, except that it targets the browser and not the <strong><a href="http://en.wikipedia.org/wiki/Java_virtual_machine">JVM</a></strong>. Like <strong><a href="http://www.scala-js.org">Scala.js</a></strong>, ClojureScript is compiled into <strong>JavaScript</strong>.</p>

<!-- more -->


<p>Finally I got around to giving <strong>Om</strong> a spin and wrote my first application in <strong>ClojureScript</strong>. You can try it out <a href="http://birdwatch.matthiasnehlsen.com/cljs/#" target="_blank"><strong>here</strong></a>. Before, I had only read a little bit about Clojure and ClojureScript and I had also gone through <strong><a href="http://clojurekoans.com">clojurekoans</a></strong>. Then, just for the fun of it (and to see for myself if I could make it work), I wanted to write a new client for my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application, this time in ClojureScript. BirdWatch is kind of a live search engine for tweets for an area of interest, with a <strong><a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a></strong> retrieving search results from a server component, including updates to that search over a streaming connection using <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>. In the browser, some basic stats about specific tweets (like recent RTs) and about usage of words (wordcloud and trending barchart) plus a time series chart displaying the time distribution of recent tweets matching a query. The server side is written in <strong><a href="http://www.scala-lang.org">Scala</a></strong> using <strong><a href="http://www.playframework.com">Play Framework</a></strong>, however that does not need to concern us for this article as the wire format is plain <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>.</p>

<p>The UI of the new client is done in <strong><a href="https://github.com/swannodette/om">Om</a></strong> and the internal communication between application parts is realized with <strong><a href="https://github.com/clojure/core.async">Core.async</a></strong>. All the data mangling is done in ClojureScript instead of using <strong><a href="http://square.github.io/crossfilter/">crossfilter.js</a></strong> as was is case with the ReactJS and the AngularJS versions. For more information about the server side and a JavaScript version of the client side application, I can recommend <a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">this article</a>. The description of the server side is still accurate, it has not changed in the process of writing this ClojureScript version. On the client side there are version using AngularJS, ReactJS and now ClojureScript and Om.</p>

<p>This is how the UI of the application looks like now. I have also improved the application while writing this recent addition by</p>

<ul>
<li>offering additional sort orders (by favorite and by retweet within analyzed tweets)</li>
<li>enabling retweets, replies and favorites directly from within the application using web intents</li>
<li>showing photos embedded in tweets</li>
</ul>


<p>Some of these changes have made it back into the ReactJS version so far, with the AngularJS version planned to follow.</p>

<p><a href="http://birdwatch.matthiasnehlsen.com/cljs/#" target="_blank"><img src="http://matthiasnehlsen.com/images/cljs-screenshot.png" /></a></p>

<p>Click the image above to give this new client that was written in <strong>ClojureScript</strong> a try. Writing it worked surprisingly well and I have learned a lot in the process.</p>

<p>EDIT July 24th, 2014: The <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">next article</a></strong> goes into detail on how this application is implemented.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New AngularJS Meetup in Hamburg]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/08/hamburg-angularjs-meetup/"/>
    <updated>2014-07-08T09:05:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/08/hamburg-angularjs-meetup</id>
    <content type="html"><![CDATA[<p>Hamburg is the second largest city in Germany, and as such it really should have an <strong>AngularJS Meetup</strong>. It did not have one until now, so I founded one.</p>

<!-- more -->


<p>I have done server side development for the most part over the last seven months but I finally had a chance to write an internal web application at work using <strong><a href="https://angularjs.org">AngularJS</a></strong> and I was pleasantly surprised how much I enjoyed this process. AngularJS provides you with a really quite useful way of structuring an application with services, controllers, directives, centralized configuration and most importantly <strong><a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a></strong> for wiring parts of an application together.</p>

<p>While doing work on the AngularJS application I noticed that I did not really have enough people to talk to when it comes to single page applications and user experience so I started looking for a nearby <strong><a href="https://angularjs.org">AngularJS</a></strong> meetup.</p>

<p>To my surprise, there was none in Hamburg yet. After all, <strong><a href="http://en.wikipedia.org/wiki/Hamburg">Hamburg</a></strong> is the second largest city in Germany with well over 2 million people when you include the suburbs. I do believe it should have such a meetup so I founded the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/">Hamburg AngularJS Meetup</a></strong>. Please do join if you agree with me that this meetup was still missing.</p>

<p>A first Meetup is scheduled for <strong>Thursday, July 24th, 2014 at 7pm</strong>. There is no venue for the event yet, so please let me know if you would like to sponsor the meetup by providing a location or know anyone who can provide the space. There is also no agenda as of yet. Please let me know if you have anything AngularJS-related that you would like to talk about or that you are particularly interested in.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributed Atmospheric Pressure Measurement]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/06/distributed-barometer/"/>
    <updated>2014-07-06T11:58:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/06/distributed-barometer</id>
    <content type="html"><![CDATA[<p>Later this month I will be doing a hiking tour in the Alps around the <strong><a href="http://en.wikipedia.org/wiki/Matterhorn">Matterhorn</a></strong>. I do not recall exactly why I said yes to this tour; maybe because I did not know at that point that in ten days the total ascent would be <strong>10,500 meters</strong> (roughly 34,500 feet). But on the other hand, that&#8217;s an interesting challenge for a person with a sedentary job.
Now being me, I would love to have a way to track the current altitude plus the combined ascent. <strong><a href="http://en.wikipedia.org/wiki/Global_Positioning_System">GPS</a></strong> can help here, but the best sensor to have for this task appears to be a <strong><a href="http://en.wikipedia.org/wiki/Barometer">barometer</a></strong>.</p>

<!-- more -->


<p><img class="left" src="http://matthiasnehlsen.com/images/matterhorn.jpg" title="image" alt="images"></p>

<p>GPS sensors only have an accuracy of <strong><a href="http://www.xcmag.com/2011/07/gps-versus-barometric-altitude-the-definitive-answer/">±45m in the vertical axis</a></strong>, making them less than ideal for measuring combined ascent unless readings are averaged over longer periods. Averaging would not only alias the otherwise occuring zigzag lines from the measurement errors though but also real ups and downs in the terrain that really should be measured. A barometer can capture these small changes much better, however it is prone to a shift over the day as the atmospheric pressure changes with the weather. It appears as if the averaged GPS readings, while not all that useful for capturing altitude changes in unknown terrain, could be used to correct the barometric height from time to time. When the barometric height deviates more than 45m from the averaged GPS altutide, we know that a correction is due.</p>

<p>In addition to providing a higher resolution when continously measuring altitude changes, a barometric sensor also consumes much less energy than a GPS sensor, making this sensor type particularly suitable for continous monitoring.</p>

<p>Thinking about barometric sensors I found two articles (<strong><a href="http://www.forbes.com/sites/gordonkelly/2014/06/19/iphone-6-likely-to-include-barometer-for-super-accurate-local-weather/">Forbes</a></strong>, <strong><a href="http://9to5mac.com/2014/06/18/iphone-6-likely-to-sport-barometer-air-pressure-sensors-to-measure-altitude-weather/">9to5mac</a></strong>) pointing at the upcoming <strong>iPhone 6</strong> having such a sensor. First of all, <strong>Apple</strong>, that&#8217;s a little late for my tour. Can I get prototype, please? Anyhow, I find pressure sensors in connected devices really exciting, even when I cannot use the sensor for the upcoming tour just yet.</p>

<p>I am not an expert in <strong><a href="http://en.wikipedia.org/wiki/Meteorology">meteorology</a></strong>, but in my layman&#8217;s understanding of the subject, <strong><a href="http://en.wikipedia.org/wiki/Atmospheric_pressure">atmospheric pressure</a></strong> changes are one of the most essential measurable phenomena that weather forecasts revolve around. This makes total sense when you think about it. Wind brings weather change. Most of the clouds here in <strong><a href="http://en.wikipedia.org/wiki/Hamburg">Hamburg</a></strong> where I live are not formed spontaneously above my apartment building but are instead blown there by the wind from somewhere above the Atlantic Ocean. <strong><a href="http://en.wikipedia.org/wiki/Wind">Wind</a></strong> is a manifestation of atmospheric pressure change. Let&#8217;s assume that at my current location the atmospheric pressure is higher in the west and lower in the east, then in the tendency to go back to equilibrium, air will flow from the high pressure field to the low pressure field, which I will then perceive as <strong><a href="http://en.wikipedia.org/wiki/West_wind">west wind</a></strong>.</p>

<p>Have you ever noticed a gust of wind before an adverse weather event like a thunderstorm? This gust of wind, besides being the title of a song on <strong><a href="https://itunes.apple.com/en/album/g-i-r-l/id823593445">Pharell&#8217;s new album</a></strong>, is a sudden change in pressure and I am pretty sure that would be measurable by a <strong><a href="http://en.wikipedia.org/wiki/Pressure_sensor">barometric sensor</a></strong> in a mobile device. Now imagine you have such a sensor in every smartphone and all of them are constantly sending the current atmospheric pressure together with GPS coordinates. I really wonder what that would mean for the accuracy of <strong><a href="http://en.wikipedia.org/wiki/Weather_forecasting">weather forecasts</a></strong>. I suspect they could become more accurate as they will feed realtime data back into the models, allowing to correct predictions. But at the same time, I also wonder how one would process all that extra data, with millions of sensors that move instead of being in fixed places. I&#8217;m sure this will not make the predictive models simpler. There are all kinds of interesting questions around this. For example how do you know that a sensor is on the ground? A sudden pressure change could also have been caused by getting on an elevator, particularly in a high-rise building. Maybe only sensor data from moving targets should be used. How about collecting that data when a turn-by-turn navigation app is used? Then the altitude of the reading is fairly predictable, namely a few feet above the street. And the altitude of that street is typically known and does not change.</p>

<p>I&#8217;m all for using such data when it can keep me from getting wet or otherwise affected by adverse weather conditions. However, I believe there should be open standards on how this data is transmitted. I understand that this data only makes sense with embedded GPS location that ought to be precise to be most valuable. But at the same time <strong>I am not okay with my device constantly leaking my location together with identifiable data</strong>. My device ID or any other information related to me is not necessary for the noble task of making weather forecasts better and as such should not be included. In German we have a word for this: <strong>Datensparsamkeit</strong>. Martin Fowler did a <strong><a href="http://martinfowler.com/bliki/Datensparsamkeit.html">good job of translating the concept</a></strong> into English. Just because we can store every piece of information we can get our hands on does not mean that that&#8217;s always a great idea.</p>

<p>But with that being said, I find the idea of having millions of additional and moving sensors for atmospheric pressure changes <strong>fascinating</strong>. This real-time data could prove just as useful for refining weather models as it did for improving navigation by getting traffic data from smart phones moving with their owners in their cars (or not in the case of a traffic jam). By the way, does anyone know what data exactly the devices send back for live traffic? Once again, there is a case to be made for an open standard for anonymized sensor data and <strong><a href="http://martinfowler.com/bliki/Datensparsamkeit.html">Datensparsamkeit</a></strong>.</p>

<p>Until next time,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated Approach]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/02/new-approach/"/>
    <updated>2014-07-02T11:58:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/02/new-approach</id>
    <content type="html"><![CDATA[<p>So I have been suffering a little from writer&#8217;s block recently. Well, no, that is not exactly true. The problem was not getting started with a topic but rather sticking with it and continuing to work on it. But there might be a way to get back into the rhythm and that is by finishing something smaller.</p>

<!-- more -->


<p>Looking at my past articles, I seem to have a tendency to go for the long form. While I do not find that wrong as such, I do want to be able to do both long and short articles. Ideally I would have a long article (or three) in the works but at the same time publish short ideas and random ramblings in the meantime. Sometimes with code, sometimes without.</p>

<p><strong>So here&#8217;s to a new approach for this blog.</strong> I will still come out with large and (hopefully) profound articles from time to time, so nothing changes on that front. But in addition I will also more frequently post shorter notes. Or at least that&#8217;s the idea. Let&#8217;s see how it works.</p>

<p>Regarding the existing newsletter, I am not exactly sure how to leverage that. As a subscriber, you have become accustomed to getting an email once or sometimes twice per month. I don&#8217;t want to spam you much more frequently all of a sudden. Maybe I should create another newsletter for the more frequent updates? I&#8217;m curious about your thoughts. For now I will just announce this change once and then keep using the current newsletter only for the more infrequent large articles.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Framework, Server Sent Events and Internet Explorer]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/06/09/play-sse-ie/"/>
    <updated>2014-06-09T19:35:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/06/09/play-sse-ie</id>
    <content type="html"><![CDATA[<p>Next week I will be presenting at <strong><a href="http://scaladays.org">Scala Days</a></strong>. In my talk I will discuss how to build reactive applications with two-way (near) real-time communication, using the combination of <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events</a></strong> for providing clients with updates and <strong><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST calls</a></strong> for the backchannel. You may already be familiar with two examples of this architecture: <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> and <strong><a href="https://github.com/matthiasn/sse-chat">sse-chat</a></strong>. Now I was thinking about potential questions in the Q&amp;A session after the talk. One potential issue that came to mind almost immediately was the support for <strong><a href="http://en.wikipedia.org/wiki/Internet_Explorer">Internet Explorer</a></strong>. Out of the box, IE does not support <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events</a></strong>. Personally, I do not care very much about IE support. I have not used it in years before I started researching for this article, and only a low single digit percentage of visitors on my blog use IE. But I understand this can be a showstopper. So if you don&#8217;t care about IE support at all, you really don&#8217;t need to read any further. Otherwise, bear with me.</p>

<!-- more -->


<p>So I started looking for polyfills and found <strong><a href="https://github.com/Yaffle/EventSource">this one</a></strong>. From the description, it should work right away with IE 10 and above, with no changes to the server side required. What I am presenting in this article is a rather blunt fix, changing the JavaScript from the forked polyfill so that:</p>

<ul>
<li>The <strong>global EventSource object</strong> is only ever replaced if it doesn’t exist. That way I don’t have the burden of having to check if this implementation works with all currently available browser versions (and those to come). Rather, the global EventSource object from the polyfill is only created in Internet Explorer.</li>
<li>The check for the &#8220;correct&#8221; <strong>ContentType</strong> is removed. Out of the box it did not work with Play Framework, but without this check it does. I didn’t care much about changing the ContentType on the server side just to make the polyfill happy.</li>
</ul>


<p>Let&#8217;s have a quick look at the code modifications. They are really short.</p>

<figure class='code'><figcaption><span>Conditional Execution of Anonymous Function</span><a href='https://github.com/matthiasn/EventSource/blob/9d1a842c6dbd11213c0fa73505da9ba6190de000/eventsource.js'>eventsource.js (lines 18 to 22)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** modified by Matthias Nehlsen on June 9th, 2014 to add </span>
</span><span class='line'><span class="cm"> *  check without changing the indentation of the rest of </span>
</span><span class='line'><span class="cm"> *  the file so that changes can more easily be tracked. */</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">global</span><span class="p">.</span><span class="nx">EventSource</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>The block above ensures that the anonymous function creating / replacing the global EventSource object is really only executed when there is no such global object. This is done by wrapping the anonymous function creating the EventSource object in another anonymous function that does the check. The global EventSource is then created below:</p>

<figure class='code'><figcaption><span>Creating a global EventSource object</span><a href='https://github.com/matthiasn/EventSource/blob/9d1a842c6dbd11213c0fa73505da9ba6190de000/eventsource.js'>eventsource.js (lines 481 to 482)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Using EventSource PolyFill&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">global</span><span class="p">.</span><span class="nx">EventSource</span> <span class="o">=</span> <span class="nx">EventSource</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only other thing to note is that a check for the expected <em>ContentType</em> was disabled as it was incompatible with the out-of-the box behavior of Play Framework&#8217;s EventSource implementation:</p>

<figure class='code'><figcaption><span>Check for expected ContentType</span><a href='https://github.com/matthiasn/EventSource/blob/9d1a842c6dbd11213c0fa73505da9ba6190de000/eventsource.js'>eventsource.js (lines 225 to 227)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** modified by Matthias Nehlsen on June 9th, 2014 to </span>
</span><span class='line'><span class="cm"> *  remove incompatible ContentType type check. */</span>
</span><span class='line'><span class="c1">//if (status === 200 &amp;&amp; contentTypeRegExp.test(contentType)) {</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then finally all there is left to do is load this modified polyfill in the application, like this:</p>

<figure class='code'><figcaption><span>Loading polyfill in Play Framework View</span><a href='https://github.com/matthiasn/BirdWatch/blob/c0ad30aea35937d624b103ff3b43dab252af7750/app/views/index.scala.html'>index.scala.html (line 141)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/assets/javascripts/vendor/eventsource.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this JavaScript file loaded in the client side application, the application now works with Internet Explorer 10 and 11, with the potential of supporting versions 8 and 9 as well, should someone care to help. Supposedly, some padding at the beginning of an SSE connection is needed. I have no idea how to add this 2K padding, but maybe you, the reader, know how to achieve this? If so, please help. Thanks in advance. I will not fix this, instead I will side with Google. They have dropped support for IE 9 and below <strong><a href="http://googleappsupdates.blogspot.de/2013/11/end-of-support-for-internet-explorer-9.html">last year</a></strong> and I am fine with supporting what Google supports.</p>

<p>Great. Much better than having to answer “sorry, IE is not supported at all”. Blaming Microsoft alone is not going to help much when your client demands just this particular support. Now if you want to use this architecture for a reactive application and your pointy-haired boss comes along, demanding support for IE, you can put a smile on your face.</p>

<p>I am happy to have this potential showstopper out of the way. I&#8217;ve been meaning to address this problem for a while, I just dreaded the logistics of setting up a testing environment for IE, and that part was about as annoying as expected. I had to dig out an old Windows 7 image for VMWare Fusion, copy the 40GB over rather slow Wi-Fi and then do all the due updates, with multiple restarts of the VM, of course. Oh how I have missed Windows. I had almost forgotten. How can it take hours to load the updates that make me eligible for IE 10 alone? Anyhow, that&#8217;s about as much exposure to Internet Explorer as I can deal with for the moment. With Internet 10 and 11, the core functionality with the Server Sent Events works fine now.</p>

<p>The <strong><a href="http://code.shutterstock.com/rickshaw/">Rickshaw</a></strong> time series chart on the upper right in BirdWatch does not seem to work in IE, but that&#8217;s not part of the proof that the proposed architecture works with newer versions of IE. I do not plan on spending any more time making IE 8 and 9 work, but in theory it sounds like that would be possible, at least according to the documentation of <strong><a href="**[this%20one](https://github.com/Yaffle">Yaffle&#8217;s</a></strong> <strong><a href="https://github.com/Yaffle/EventSource">polyfill</a></strong>. Please feel free to fix this in case you know a solution. There&#8217;s a <strong><a href="https://github.com/matthiasn/EventSource">fork</a></strong> of the polyfill that would happily accept pull requests. Thank you.</p>

<p>Okay, until next time, I hope to see you at Scala Days. Say hi when you see me, please.
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch: AngularJS vs. ReactJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/03/31/birdwatch-with-reactjs/"/>
    <updated>2014-03-31T22:21:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/03/31/birdwatch-with-reactjs</id>
    <content type="html"><![CDATA[<p><strong>Summary:</strong> In this article I will present a new version of the BirdWatch application that uses <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side instead of <strong><a href="http://angularjs.org">AngularJS</a></strong>. Don&#8217;t worry if you liked the previous AngularJS version - I do not intend to replace it. Rather, I want to create another version of the client side web application in order to get a better feeling for the pros and cons of different frameworks and libraries. So think of it as something like the <strong><a href="http://todomvc.com">TodoMVC</a></strong> of reactive web applications. Well, not quite yet, but feel free to write another client version for comparison. EmberJS anyone?
For this new version I have also rewritten the barchart as a ReactJS component with integrated trend analysis and no dependency on <strong><a href="http://d3js.org">D3.js</a></strong>. Again, there is nothing wrong with D3; I just like to try different approaches to the same problem.</p>

<!-- more -->


<p>In this article I will not go into a lot of detail about the server side of the BirdWatch application as there&#8217;s an <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">article on that</a></strong> already. What you need to know is that there is a server side application using <strong><a href="http://www.playframework.com">Play Framework</a></strong> that connects to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> and that subscribes to a defined set of terms, meaning that it will retrieve all tweets containing at least one of these terms, up to a limit of 1% of all tweets at a given time<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Then there is a client side JavaScript application that allows users to perform a live search inside a stream of tweets, with realtime updates of the UI when new search matches come in from Twitter. Here&#8217;s how that looks like. Click the image to try out the application:</p>

<p><a href="http://birdwatch.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/bw_reactjs.png" /></a></p>

<p>Here&#8217;s an animated architectural overview, mostly meant as a teaser for the previous article which describes the server side of the application in detail. You can click it to get to that article:</p>

<p><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/" target="_blank"><img src="http://matthiasnehlsen.com/images/bw_expl_anim.gif" /></a></p>

<p>This has all worked really nicely with AngularJS for a couple of months. Now let&#8217;s see if we can build the same thing with <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side.</p>

<h2>Why would one choose ReactJS over AngularJS?</h2>

<p>In the current version of BirdWatch, AngularJS decides when to figure out if the data model changes so that it can determine when to re-render the UI. These calls can happen at any time, so they need to be idempotent <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. That requirement has been met, any call to the crossfilter service for data is indeed itempotent, but there&#8217;s a catch: every call to get data is potentially expensive, and I&#8217;d rather avoid unnecessary calls to the <strong><a href="http://square.github.io/crossfilter/">crossfilter</a></strong> service. Instead I want to decide when the client UI is rendered by actively triggering the render process. That way I have full control when and how often the UI renderer is fed with new data.</p>

<p>As discussed in my recently published <strong><a href="http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs/">article</a></strong>, ReactJS may also be a better fit when working with immutable data. That is not a concern in the current version of BirdWatch, but it may well be an issue in the future.</p>

<h2>Implementing the existing functionality with ReactJS</h2>

<p>There are four main areas of functionality in the application:</p>

<ul>
<li><p><strong>Search:</strong> The user can start a search by entering the terms into the search bar, which will refresh the data and establish a <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> connection to the server that will deliver search matches in real time. At the same time previous matches are retrieved and merged with the real time results.</p></li>
<li><p><strong>Rendering of tweets:</strong> Different sort orders of tweets are displayed in a list of what I call tweet cards. In AngularJS, directives handle the abstraction of one such tweet nicely.</p></li>
<li><p><strong>Pagination:</strong> The application loads many more tweets than can be displayed on one page (with 5000 tweets being the default). The AngularJS version implements this with a modified subset of the <strong><a href="http://angular-ui.github.io/bootstrap/">AngularUI-Bootstrap project</a></strong>.</p></li>
<li><p><strong>Charts:</strong> Different visualizations are rendered on the page. At the core, D3 does this for us. In the AngularJS version, relatively thin wrappers make <strong><a href="http://docs.angularjs.org/guide/directive">directives</a></strong> out of these charts that get wired data and that re-render when the data changes.</p></li>
<li><p><strong>Bookmarkability:</strong> users can bookmark a search and come back to it later, send it to friends, tweet about it or whatever. AngularJS provides the <strong><a href="http://docs.angularjs.org/api/ng/provider/$locationProvider">$locationProvider</a></strong> for this.</p></li>
</ul>


<p>Let&#8217;s go through these areas one by one.</p>

<h2>Search</h2>

<p>In this area, AngularJS and its two-way data-binding shine. The content of the search input element is bound to a property on the <strong>$scope</strong>, just like the button is bound to a function that is also part of the <strong>$scope</strong> and that triggers a new search. ReactJS, on the other hand, does not offer two-way binding out of the box. There are helpers to achieve this, notably <strong><a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html">ReeactLink</a></strong>, but I have not tried it. It also seems that it is generally discouraged. In this case it was fairly trivial to achieve the functionality without ReactJS; instead I am assigning the functionality using onclick for triggering the search function, and jQuery to achieve the same when enter is pressed inside the input field. AngularJS offers more of a full framework solution for such problems, but I am okay with this solution here.</p>

<figure class='code'><figcaption><span>Search Button</span><a href='https://github.com/matthiasn/BirdWatch/blob/603d4dfb85330e346afdf9241e36a62313eaa620/app/views/react_js.scala.html'>react_js.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;BirdWatch.search()&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The button is plain HTML with an onclick handler. I have assigned the <em>search</em> function to serve as the handler function, which lives in a property of the global BirdWatch object. In addition to the click handler for the button, I also wanted to be able to trigger a search when pressing ENTER inside the search field. jQuery is perfect for that:</p>

<figure class='code'><figcaption><span>Handling Enter in Search Field</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchForm&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally here is the function that triggers the search:</p>

<figure class='code'><figcaption><span>Function for triggering search</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">searchField</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#searchField&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">wordcount</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">activePage</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">crossfilter</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">(),</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#prev-size&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">searchField</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is plain old HTML / JavaScript / jQuery. You may think this to be a rather old-fashioned way of doing it. But on the upside, no special framework knowledge is required, and anyone who has done any web development in the last decade can do this without a learning curve. Alternatively, we could make a ReactJS component out of the search bar and pass the the handler function to this component as part of the <strong>props</strong> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. In this simple case I don&#8217;t believe it is necessary to create a component, but this would be the way to go about it when more complex behavior is desired.</p>

<h2>Rendering of tweets</h2>

<p>This is where it gets much more interesting. AngularJS renders the list of tweets from the data model using <strong>ng-repeat</strong> like this:</p>

<figure class='code'><figcaption><span>ng-repeat in AngularJS version</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweetCard&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;tweet in cf.tweetPage(currentPage, pageSize, sortModel)&quot;</span>
</span><span class='line'>        <span class="na">data-tweet=</span><span class="s">&quot;tweet&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <em>cf.tweetPage</em> is a function that delivers the data from the crossfilter object. The application code has little control over when this happens. It will certainly happen when explicitly calling <em>$scope.$apply</em> and also when anything else happens that has any effect on the data model, anywhere. This is what I meant when I said earlier that this may not be the most desirable thing when this function call is potentially expensive.</p>

<p>ReactJS works the other way round. The application instantiates a component for the list of tweets that knows how to render itself, and it will only subsequently do that when the application actively feeds it new data. Let&#8217;s look at that in more detail. In the HTML, there is only a single div without any special notation:</p>

<figure class='code'><figcaption><span>Tweet List Div in ReactJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/app/views/react_js.scala.html'>react_js.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in the component declaration, it looks as follows:</p>

<figure class='code'><figcaption><span>Tweet List Div in ReactJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/jsx/tweetlist.js'>tweetlist.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Component for conditional rendering of retweet count inside Tweet */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RetweetCount</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-right timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">numberFormat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span><span class="p">)}</span> <span class="nx">RT</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** single Tweet component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Tweet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;tweet&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;http://www.twitter.com/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;thumbnail&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">profile_image_url</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;http://www.twitter.com/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;username&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;username_screen&quot;</span><span class="o">&gt;&amp;</span><span class="nx">nbsp</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">64</span><span class="p">;{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-right timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">fromNow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">created_at</span><span class="p">)}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;tweettext&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">dangerouslySetInnerHTML</span><span class="o">=</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-left timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">numberFormat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">followers_count</span><span class="p">)}</span> <span class="nx">followers</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">RetweetCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">FavoriteCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">favorite_count</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Tweet list component, renders all Tweet items (above) */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TweetList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">tweetNodes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tweet</span><span class="p">,</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Tweet</span> <span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="nx">tweet</span><span class="p">}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">idx</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;tweet-list&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">tweetNodes</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** render BirdWatch components */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tweetListComp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TweetList</span> <span class="nx">tweets</span><span class="o">=</span><span class="p">{[]}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;tweet-frame&#39;</span><span class="p">));</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tweetCount</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TweetCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;tweet-count&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setTweetCount</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetCount</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="nx">n</span><span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setTweetList</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tweetList</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetListComp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span><span class="nx">tweets</span><span class="o">:</span> <span class="nx">tweetList</span><span class="p">});</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <strong>TweetList</strong> component close to the bottom. This component itself has elements of the <strong>Tweet</strong> component type as child elements which it generates inside its only method <em>render</em> by mapping data in the array to individual elements. <em>Render</em>, by the way, is the only method that a ReactJS component is required to have. In this particular component, the child elements are generated by using the map function on the props.tweet, which accordingly needs to be an array as otherwise the JavaScript map function would not be available. In the mapper function, a <strong>Tweet</strong> component is created for every element of the array, and that element is passed to the Tweet component as <strong>props</strong>.</p>

<p>The Tweet component itself also has a <em>render</em> function in which it creates a <strong>div</strong> holding the representation of a tweet. Dynamic data for this comes from accessing the tweet object that was passed in the TweetList component. Note that the code above is not regular JavaScript but JSX, which allows writing a syntax fairly similar to HTML. This JSX is cross-compiled into JavaScript during the build process. More information on this build process can be found in the paragraph and in the <strong><a href="https://github.com/matthiasn/BirdWatch/tree/master/react-js">README</a></strong>.</p>

<p>The <strong>Tweet</strong> component then includes a <strong>RetweetCount</strong> component, to which it passes the RT count as <strong>props</strong>. This component has conditional logic in which it decides itself if it wants to return an empty <strong>div</strong> or actual content. The same goes for the <strong>FollowersCount</strong> component, which I have omitted here as it follows the same principle.</p>

<h2>Pagination</h2>

<p>Unlike in the AngularJS version, where I relied on additional projects, I have implemented this from scratch with ReactJS. Here&#8217;s the entire component:</p>

<figure class='code'><figcaption><span>Pagination component</span><a href='https://github.com/matthiasn/BirdWatch/blob/b9dc0b4cf19ec47c893aed27a690230dc882d1f8/react-js/jsx/pagination.js'>pagination.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Pagination component, allows selecting the current page in the Tweet list */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PaginationItem</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">setActive</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">page</span><span class="p">)},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">active</span> <span class="o">?</span> <span class="s2">&quot;active&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">setActive</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="nx">a</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">page</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Pagination</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">toggleLive</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">toggleLive</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleFirst</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleLast</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">numPages</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleNext</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setNext</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handlePrevious</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPrev</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">numPages</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">numPages</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">paginationItems</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">numPages</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">PaginationItem</span> <span class="nx">page</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="p">}</span> <span class="nx">active</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">activePage</span><span class="p">}</span> <span class="nx">setPage</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pagination-mini&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">live</span> <span class="o">?</span> <span class="s2">&quot;active&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">toggleLive</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Live</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleFirst</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">First</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handlePrevious</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Previous</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">paginationItems</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNext</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Next</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleLast</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Last</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pagination</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Pagination</span> <span class="nx">numPages</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;pagination&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setPagination</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="nx">pagination</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setPaginationHandlers</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">handlers</span><span class="p">)</span> <span class="p">{</span> <span class="nx">pagination</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">handlers</span><span class="p">);</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, we have two components, one for each item and one that combines the individual items. In the Pagination component, we first determine the minimum of either the number of pages (passed in as <strong>props</strong>) or 25 in order to render a maximum of 25 pages. Then we do a map on this the resulting range (with the range being created by an <strong><a href="http://underscorejs.org">underscore</a></strong> function), rendering one PaginationItem component for each of these pages. So far this is comparable to the components we have already seen above. What is new here is that the <em>handler functions</em> are also passed as <strong>props</strong> and assigned by the component. The nice thing about this is that this way we can also dynamically assign handler functions. We could just as well call functions on the global application object inside the handlers, but conceptually I find it cleaner to think about the component only ever receiving props, without needing to know anything about the application it is embedded in.</p>

<h2>Bookmarkability</h2>

<p>At first I did not really know how to achieve this feature using ReactJS. I have seen examples using <strong><a href="http://backbonejs.org">Backbone</a></strong> and its <strong><a href="http://backbonetutorials.com/what-is-a-router/">router</a></strong>, which would make sense for more complex applications. One such example is <strong><a href="https://medium.com/react-tutorials/c00be0cf1592">this article</a></strong> and another one is <strong><a href="http://webdesignporto.com/react-js-with-backbone-router-and-local-storage/">this article</a></strong>. For this application, introducing Backbone seemed like overkill though, so I was looking for a simpler approach. Turns out achieving this is super simple using <strong><a href="http://jquery.com">jQuery</a></strong> and the plain old <strong><a href="http://www.w3.org/DOM/">DOM API</a></strong>. For the search function I had already created a jQuery object:</p>

<figure class='code'><figcaption><span>searchField jQuery object</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">searchField</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#searchField&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then inside the search function, I simply set the <strong>window.location.hash</strong> with a <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">URI encoded</a></strong> version of the search term:</p>

<figure class='code'><figcaption><span>setting location hash when searching</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when loading the page, I read the location hash into the search field and call <em>search()</em>, which reads the content of the search field and triggers the search with whatever is in there:</p>

<figure class='code'><figcaption><span>trigger search on page load</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Build system</h2>

<p>To round things off, I have configured a <strong><a href="http://gruntjs.com">grunt-based</a></strong> build system that automatically <strong><a href="http://en.wikipedia.org/wiki/Source-to-source_compiler">transpiles</a></strong> JSX into plain old JavaScript and then concatenates the files into a single JavaScript file. I have also included tasks for <strong><a href="http://www.jshint.com">JsHint</a></strong> and <strong><a href="https://github.com/es-analysis/plato">Plato code analysis</a></strong> to improve code quality. Ideally there should be additional tasks for a CSS preprocessor such as <strong><a href="http://lesscss.org">LESS</a></strong> and minification of HTML, CSS and JavaScript files to achieve the best user experience possible, most notably fast load times. Maybe I&#8217;ll get around to that at some point in time. I should also do the same for the AngularJS version.</p>

<h2>Building an SVG Bar Chart with ReactJS (without D3.js)</h2>

<p><strong><a href="http://d3js.org">D3.js</a></strong> is an amazing technology and really great visualizations have been built with it. However it also has a considerably steep learning curve. I personally find ReactJS easier to reason about because unlike D3.js it does not have the notion of <strong><em>update</em></strong>. Instead, we always pass it the entire data and it will put the changes into effect itself through an intelligent diffing mechanism where it compares current and previous versions of a (fast) virtual DOM and only puts the detected changes into effect in the (slow) actual DOM. Now I thought it would be nice if this concept could aso be applied to <strong><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG (scalable vector graphics)</a></strong> in addition to HTML. Turns out the same principles apply, and accordingly I found it fairly simple to re-build the bar chart and have ReactJS instead of D3 create the SVG inside the <strong><a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a></strong>. The resulting code is much shorter than the previous D3 version despite a lot of added functionality. The previous version was a simplistic bar chart, whereas the new version has a built-in trend analysis using <strong><a href="https://github.com/Tom-Alexander/regression-js">regression-js</a></strong>, a neat little regression analysis library. In this new chart each bar is aware of its history and determines its trends using linear regression. Here&#8217;s how that looks like:</p>

<p><img src="http://matthiasnehlsen.com/images/react-barchart.png" /></p>

<p>Each bar has two associated trend indicators, one to show recent movements in the ranking and the other to show an overall trend of the word occurrence. The trends are determined using a simple linear regression, where the slope of the resulting function directly translates into an upward or downward trend. I don&#8217;t have the time to go into detail about the implementation of this chart today, but this topic should make for an interesting article in the future.</p>

<h1>Conclusion</h1>

<p>ReactJS nicely complements the rendering of the UI of the BirdWatch application. From a bird&#8217;s-eye view, it is really not more than a function that accepts data and that, as a side effect, effects a DOM representation in line with the data provided. It does the rendering in a very efficient way and it is low-maintenance; it does not require any more attention than the call necessary to inform it about data changes. I find its data flow model very easy to reason about, simpler in fact than the multitude of concepts one needs to think about when building an application with AngularJS. So far AngularJS has also worked really well for this application, so I&#8217;d say both are suitable approaches to single page web applications. For now I&#8217;m curious to know your opinion. You can find the source code on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>. A live version is available in two versions: using <strong><a href="http://birdwatch.matthiasnehlsen.com/"> ReactJS </a></strong> and using <strong><a href="http://birdwatch.matthiasnehlsen.com/angular/#/">AngularJS</a></strong>.</p>

<p>Until next time,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The list of technical terms I use for the live demo under birdwatch.matthiasnehlsen.com easily fits into this cap, in which case the application will receive all these tweets. The term <strong>Obama</strong> also usually fits into this limit. The term <strong>love</strong> on the other hand doesn&rsquo;t. If you were to download BirdWatch from GitHub, create a Twitter API key and replace the list of software terms with only the word <strong>love</strong>, I bet you will reach the 1% limit any second of the day. However not to worry, Twitter will still deliver at the rate limit. When I last tried it, it was about 4 million tweets per day. Sure, you might lose tweets doing this, but there&rsquo;s not need to worry when you are looking for popular tweets as they will appear time and time again as a retweet, making it highly unlikely to miss them over time. Only the current retweet count may lag behind when the last update as a retweet was dropped.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><strong>Idempotent</strong>: This basically means that it must be possible to call something multiple times without additional side-effects, if any at all. Idempotency, for example, is also essential in scenarios where some service guarantees an at-least-once delivery. In that case you don&rsquo;t want to run into trouble (like wrongfully incrementing a counter) when that service delivers more than once.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><strong>Props</strong> in ReactJS refers to immutable data dynamically passed to a component. The component will then render itself according to the data it is fed. Functions, being first class in JavaScript, can also be passed as props. JavaScript does not actually know immutable data structures, but conceptionally we should treat any data passed to a component as immutable as it will make our component much easier to reason about. <a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ElasticSearch 1.0.0 - Breaking Changes]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/02/16/elasticsearch-v1/"/>
    <updated>2014-02-16T18:50:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/02/16/elasticsearch-v1</id>
    <content type="html"><![CDATA[<p><strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong> 1.0.0 is out, hooray! Great stuff, congrats to everyone involved. Not that I had any complaints about <strong>v0.9</strong>, but still, this is a great achievement. One of the changes is some <strong><a href="http://www.elasticsearch.org/blog/percolator-redesign-blog-post/">major rework</a></strong> of the <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-percolate.html">Percolation Query API</a></strong>, making it much more powerful than before. Unfortunately, the update broke the percolation query mechanism in the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application. But the fix wasn&#8217;t very hard. So in today&#8217;s article, I will revisit the topic of Percolation Queries by explaining what they are, how the new version has become more powerful and what was needed to fix my application. Please refer to this earlier <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">article</a></strong> if you want to know more about the overall architecture of the <strong>BirdWatch</strong> application.</p>

<!-- more -->


<p>After running <code>brew update</code> and <code>brew upgrade</code> I noticed that live query result updates in my local installation did not work any longer. Pressing <em>F5</em> did show new intermittent Tweets though, so the system did not appear completely broken. A look into the ElasticSearch changelog quickly revealed that there had been some major rework on the Percolation API. Exactly this API is used for matching new Tweets to currently established streaming connections.</p>

<h2>So what is this percolation query thing?</h2>

<p>A percolation query is a query like any other, with one difference: the query is not run against existing data but against future data, item by item as the data is inserted into an index. For that the query itself is stored in ElasticSearch and then each item (Tweet in this case) that is stored is also presented to the percolator mechanism to find the queries that have this item as a result. This resulting query ID is then used to find the streaming connection that is interested in matches to this query and stream the matched Tweet to the connected client immediately. This might sound a little abstract, so let me provide an example:</p>

<p>You are interested in Tweets that have the words <strong>Scala</strong> and <strong>Akka</strong> in them. Your query then looks like this: &#8220;scala AND akka&#8221;. Well, there is a little more to it, like which fields to use as a default, but for this example the simplification should suffice. First the query is run against existing data, for example returning the last 5000 items that match. But you are also interested in live data, not only in the past. So then the query is registered in the percolation query index, using the <strong><a href="http://de.wikipedia.org/wiki/SHA-2">SHA-256</a></strong> hash as the ID. Now when a Tweet comes along that has these words in them, it is presented to the percolator, which returns the ID of the query, potentially among others that match. This query ID is then used to find the streaming connection to your web client so that the Tweet can be streamed to you immediately.</p>

<p>Internally, ElasticSearch stores all the percolation queries in memory. It then creates a temporary index for each document that is to be matched against all the queries and then runs all these queries against that index in order to determine matching queries.</p>

<h2>Changes in ElasticSearch v1.0.0</h2>

<p>In previous versions of Elasticsearch there was a single, specialized index for percolation among cluster of nodes. The problem with that was that it did not scale particularly well. This limitation has been removed in the latest version. Instead the percolation queries can be distributed over any number of shards, all of which will then be asked to percolate a document against the stored queries. With the change, now the percolation query mechanism should scale nicely, whereas before the performance would degrade relatively soon when there was a large number of queries to run against a new document. Every query still has to run over a new document that is tested for a match, but at least that work can now be distributed over many nodes. Also there is nothing special about the percolation index any longer, it is just a regular index.</p>

<p>Let us look at an example using <strong>curl</strong>. We have three persisted queries in our index:</p>

<figure class='code'><figcaption><span>Percolation Queries </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">curl</span> <span class="s1">&#39;localhost:9200/persistent_searches/.percolator/_search?pretty=true&#39;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;took&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;timed_out&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;hits&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;max_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hits&quot;</span> <span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;38a0963a6364b09ad867aa9a66c6d009673c21e182015461da236ec361877f77&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(java) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T19:19:32.237Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;684888c0ebb17f374298b65ee2807526c066094c701bcc7ebbe1c1095f494fc1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(*) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T19:35:54.332Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;49d0feca545a82d29fffbdf6749dcf0086f9c44f6faa9b8e1e2e008b5716e488&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(akka scala) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T20:00:04.312Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I insert a tweet in English that contains the words <strong>Akka</strong> and <strong>Scala</strong>, two of these queries should match. The second query matches anything that is in English and the third more specifically matches anything with these words. Let&#8217;s see:</p>

<figure class='code'><figcaption><span>Percolation Queries </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">curl</span> <span class="s1">&#39;localhost:9200/persistent_searches/tweets/_percolate?pretty=true&#39;</span> <span class="o">-</span><span class="nx">d</span> <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">&gt;     &quot;doc&quot; : {</span>
</span><span class='line'><span class="s1">&gt;         &quot;text&quot; : &quot;blah, blah, akka blah, scala blah, blah&quot;,</span>
</span><span class='line'><span class="s1">&gt;         &quot;lang&quot; : &quot;en&quot;</span>
</span><span class='line'><span class="s1">&gt;     }</span>
</span><span class='line'><span class="s1">&gt; }&#39;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;took&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;matches&quot;</span> <span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;684888c0ebb17f374298b65ee2807526c066094c701bcc7ebbe1c1095f494fc1&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;49d0feca545a82d29fffbdf6749dcf0086f9c44f6faa9b8e1e2e008b5716e488&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Changes to the BirdWatch code</h2>

<p>The URL format has changed, I have created the <strong>persistent_searches</strong> index, into which the queries of type <strong>.percolator</strong> are inserted. We have seen these URLs in action above already.</p>

<p>As mentioned above, percolation queries are now stored in a regular index that behaves like any other (because it <strong>is</strong> a standard index). This also means that the index is dynamically created when first addressed, so we no longer need the initialization step for creating the index (using curl on the command line) before successfully running the application for the first time. That&#8217;s great as I&#8217;ve had a few users run into that problem before.</p>

<p>In previous versions of ElasticSearch, there was no result header. Instead there was only a simple array of the matched query IDs. In <strong>v1</strong>, there is now a result header, just like in regular ElasticSearch queries, and the <em>matches</em> array. This array contains one object per resulting percolation query. Each of these match objects not only contains the <em>id</em> of the matching query but also the <em>index</em> where this search was stored. In this application we do not need any of this, so we can parse only the IDs of the matching queries:</p>

<figure class='code'><figcaption><span>Twitter Client</span><a href='https://github.com/matthiasn/BirdWatch/blob/0ce1b15c27eb1ec9cbf29d9e95953cca68404cc0/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Takes JSON and matches it with percolation queries in ElasticSearch</span>
</span><span class='line'><span class="cm">  * @param json JsValue to match against </span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">matchAndPush</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;doc&quot;</span> <span class="o">-&gt;</span> <span class="n">json</span><span class="o">)).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">res</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;matches&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]].</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">matches</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">items</span> <span class="k">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">m</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">m</span> <span class="o">\</span> <span class="s">&quot;_id&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>        <span class="n">jsonTweetsChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Matches</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">HashSet</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">++</span> <span class="n">items</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, the tweet is <strong>POSTed</strong> to the <em>elasticPercolatorURL</em> inside the <em>doc</em> property of a <strong>JSON</strong> object. The result <em>res</em> is then parsed for the <em>matches</em> array as a List[Jsvalue], which is then mapped into a List[String] with the matching query IDs. Finally, a HashSet[String] is built from this list and pushed into the <em>jsonTweetsChannel</em> together with the json inside a <strong>Matches</strong> object.</p>

<p>Okay, that&#8217;s all for this article. Initially I wanted it to be about replacing <strong>AngularJS</strong> with <strong>ReactJS</strong>, but then I did not have enough time left before my vacation and after running into this problem. So that article is next, probably some time later this month.</p>

<p>Cheers,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala.js and ReactJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs/"/>
    <updated>2014-01-24T12:45:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs</id>
    <content type="html"><![CDATA[<p>In this article I will present a simple reactive web application using <strong><a href="http://www.scala-js.org">Scala.js</a></strong> and <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side. It is based on <strong><a href="https://github.com/matthiasn/sse-chat">sse-chat</a></strong>, an application I initially wrote for demonstrating the use of <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">AngularJS with Play Framework</a></strong>. I then rewrote the client for an article about <strong><a href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/">using ReactJS on the client side</a></strong>. In the latest version now, there is an additional client that connects to the same server and utilizes Scala.js to build the web client. I recently gave a talk about this at Ping Conference in Budapest, <strong><a href="http://m.ustream.tv/recorded/42780242">check it out</a></strong> if you&#8217;re interested. I discovered ReactJS through <strong><a href="http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/">David Nolen&#8217;s blog</a></strong> and his excellent <strong><a href="https://github.com/swannodette/om">OM library</a></strong> which combines ReactJS with <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong>. His <strong><a href="http://swannodette.github.io/2013/12/31/time-travel/">second article on Om</a></strong> also inspired me to try out an <strong>undo</strong> functionality with the immutable data structures that Scala.js has to offer. For learning more about ReactJS, I recommend going through the <strong><a href="http://facebook.github.io/react/docs/tutorial.html">tutorial</a></strong> and also reading my last <strong><a href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/">blog post</a></strong>.</p>

<!-- more -->


<h1>Why would someone want Scala on the client in the first place?</h1>

<p>Great question, I am glad you asked. A couple of things come to my mind:</p>

<ul>
<li><p>If you work with Scala on the server side, you will be familiar with its powerful collection library. You will be able to use it instead of wrapping your head around stuff like <strong><a href="http://underscorejs.org">underscore</a></strong>. Nothing wrong with underscore, it just adds to the things we have to think about when writing an application.</p></li>
<li><p>JavaScript, while being powerful in its own right, is quite different from Scala. If you are working in Scala on the backend anyways, you can avoid context switches. These inevitably occur when going back and forth between Scala and JavaScript.</p></li>
<li><p>Immutable data structures are powerful and make reasoning about an application much more straightforward. Implementing an <strong>undo</strong> functionality becomes almost trivial with this approach.</p></li>
</ul>


<p>Here is the new client in action. Note that <strong>undo</strong> will revert the application state by one step (including name changes and such). <strong>Undo all</strong> will go through all steps until the beginning of time at a fast pace.</p>

<iframe width="420" height="600" src="http://sse-chat.matthiasnehlsen.com/react-scalajs-opt" frameborder="0"></iframe>




<br />


<br />


<h1>Architectural Overview</h1>

<p>The server side has stayed the same with the different clients. All clients (AngularJS, ReactJS, ReactJS and Scala.js) co-exist in the same project on <strong><a href="https://github.com/matthiasn/sse-chat">GitHub</a></strong>. I would like to refer you to <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">this article</a></strong> if you want to learn more about the server side. From the client&#8217;s perspective, there is a <strong><a href="https://developer.mozilla.org/en-US/docs/Server-sent_events/Using_server-sent_events">Server Sent Event</a></strong> stream of messages for a particular chat room that the client subscribes to via an <strong><a href="http://www.w3.org/TR/2011/WD-eventsource-20110208/">EventSource</a></strong> object. New messages are POSTed using an <strong><a href="http://de.wikipedia.org/wiki/XMLHttpRequest">XmlHttpRequest</a></strong> object (facilitated by <strong><a href="http://jquery.com/">jQuery</a></strong>). Users can change their names, they can select the chat room and they can submit messages to the chat room they are connected to. Romeo and Juliet are having a conversation in room 1, just to make it a little more interesting to watch.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-chat-scalajs.png"></p>

<p>Application state is represented by a Scala <strong><a href="http://www.scala-lang.org/old/node/107">Case Class</a></strong>. A case class object stores the current name of the user, the name of the room and the last 4 messages. The undo functionality is modeled through a <strong>Stack</strong>. Each time information changes, a copy of the head of the stack is made and a new version of the application state with the desired change is pushed on top of the stack. Thus going back in time becomes easy: the combination of pop and peek will go back one step in time. Remember that a <strong><a href="http://en.wikibooks.org/wiki/Data_Structures/Stacks_and_Queues">Stack</a></strong> is a <strong>LIFO</strong> (last-in-first-out) data structure that typically offers <em>push</em> for putting a new item on top of a stack, <em>pop</em> for removing the top element (with potentially consuming it) and <em>peek</em> or <em>top</em> for accessing the top element without removing it. In Scala&#8217;s stack <em>peek</em> is called <em>head</em> as a more general abstract term to get the first element of a collection.</p>

<p>Application state, in its current version, is passed to ReactJS for full render every single time something changes. This may sound like a lot of overhead if React completely re-rendered the DOM every single time. Luckily, it does not need to do that. Instead it utilizes a fast <strong><a href="http://facebook.github.io/react/index.html">Virtual DOM</a></strong>. It then diffs subsequent version of this virtual DOM and only manipulates the actual browser DOM where changes have occurred. This is really fast. If you run the chat app demo above for a while (or interact with it multiple times) so that the stack contains sufficient elements (hundreds), you should see changes in the browser at a full <strong>60 frames per second</strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/undo-all-60fps.png" title="images" alt="images"></p>

<p>React&#8217;s rendering performance can still be optimized, ut it runs fine at 60 fps as it is. <strong>Tip: You want 60fps</strong> in your application all the time, otherwise the user may experience jerky and overall unpleasant scrolling if anything that happens takes longer than the time between each frame. For 60fps that means every action must be finished within 16ms, preferably faster.</p>

<h1>Source Code</h1>

<p>So without further ado, let&#8217;s have a look at how to implement the client side chat functionality. What I suggest here is probably far from ideal, but it&#8217;s a start. Please let me know about improvements you think should be made, ideally as a pull request.</p>

<p>First we will look at the main application logic:</p>

<figure class='code'><figcaption><span>Main Application</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/SseChat.scala'>SseChat.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** current version of application state modeled as immutable case class */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">AppState</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">msgs</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** Application state history modeled as stack. New versions of state get pushed onto stack.</span>
</span><span class='line'><span class="cm">   *  Previous states are available with a combination of pop and peek (called head in Scala implementation) */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stack</span> <span class="k">=</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">AppState</span><span class="o">](</span><span class="nc">InterOp</span><span class="o">.</span><span class="n">triggerReact</span><span class="o">)</span>
</span><span class='line'>  <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Utils</span><span class="o">.</span><span class="n">getInitialState</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** undo state change by popping stack and trigger rendering (which reads the head) */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undo</span><span class="o">(</span><span class="n">all</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** perform undo repeatedly until only initial element left, with interval duration between steps */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">undo</span><span class="o">()</span>
</span><span class='line'>      <span class="nc">InterOp</span><span class="o">.</span><span class="n">setTimeout</span><span class="o">(</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="o">),</span> <span class="n">interval</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** functions generating new version of state which are then pushed onto stack using updateState() */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUser</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">user</span> <span class="k">=</span> <span class="n">name</span><span class="o">))</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">msgs</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">msgs</span><span class="o">.</span><span class="n">takeRight</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">:+</span> <span class="n">msg</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoom</span><span class="o">(</span><span class="n">newRoom</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">room</span> <span class="k">=</span> <span class="n">newRoom</span><span class="o">))</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span><span class="o">,</span> <span class="nc">InterOp</span><span class="o">.</span><span class="n">addMsg</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span><span class="o">,</span> <span class="nc">InterOp</span><span class="o">.</span><span class="n">addMsg</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all, the following is happening:</p>

<ul>
<li><p>There is a case class for capturing each individual step of the application state.</p></li>
<li><p>A stack takes care of managing a history of application states. This stack is aware of changes. When such a change occurs, it will call the function specified upon initialization, in this case <em>InterOp.triggerReact</em>.</p></li>
<li><p>Undo pops the application state representation on top of the stack, causing <em>triggerReact</em> with the previous state.</p></li>
<li><p><em>UndoAll</em> steps through the entire history until application startup.</p></li>
<li><p>Setters obtain the top of the stack, copy and modify it and push the result on top of the stack (again causing a re-render).</p></li>
<li><p>Finally, in <em>main</em>  the application is initialized by starting the SSE connection.</p></li>
</ul>


<p>Next there is the <strong>InterOp</strong> file:</p>

<figure class='code'><figcaption><span>InterOp</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/InterOp.scala'>InterOp.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.scalajs.js</span>
</span><span class='line'><span class="k">import</span> <span class="nn">js.Dynamic.</span><span class="o">{</span> <span class="n">global</span> <span class="k">=&gt;</span> <span class="n">g</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">ChatMsgTrait</span> <span class="k">extends</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">text</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">user</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">time</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">room</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Scala representation of SseChatApp JavaScript object holding the JS side of the app */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">SseChatApp</span> <span class="k">extends</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">submitMessage</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">listen</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">handler</span><span class="k">:</span> <span class="kt">js.Function1</span><span class="o">[</span><span class="kt">ChatMsgTrait</span>, <span class="kt">Unit</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUserProps</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoomProps</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setMsgsProps</span><span class="o">(</span><span class="n">msgs</span><span class="k">:</span> <span class="kt">js.Array</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setStackSizeProps</span><span class="o">(</span><span class="n">stackSize</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setApp</span><span class="o">(</span><span class="n">interOp</span><span class="k">:</span> <span class="kt">InterOp.</span><span class="k">type</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** methods of this object are individually exported in startup.js (to avoid having the closure compiler rename them) */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">InterOp</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">triggerReact</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">state</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setUserProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">user</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setRoomProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setMsgsProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">msgs</span><span class="o">.</span><span class="n">toArray</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setStackSizeProps</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUser</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoom</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">setRoom</span><span class="o">(</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">submitMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="n">room</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="n">user</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">submitMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">undo</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">undo</span><span class="o">()</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setTimeout</span><span class="o">(</span><span class="n">fn</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">,</span> <span class="n">millis</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">setTimeout</span><span class="o">(</span><span class="n">fn</span><span class="o">,</span> <span class="n">millis</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go through this file step by step:</p>

<ul>
<li><p><strong>ChatMsgTrait</strong> represents an individual message.</p></li>
<li><p>The <strong>SseChatApp</strong> object represents a JavaScript object outside the Scala.js application. This makes the specified functions available from Scala.js code.</p></li>
<li><p>The <strong>InterOp</strong> object itself contains functions that are exported so that they are accessible from the outside world. We will look at the export mechanism below. As an example of such an exported function, <em>setUser</em> allows the ReactJS application to call the App.setRoom function.</p></li>
</ul>


<p>Next we have the change-aware stack implementation:</p>

<figure class='code'><figcaption><span>Stack implementation</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/ChangeAwareStack.scala'>ChangeAwareStack.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.Stack</span>
</span><span class='line'><span class="c1">// custom stack implementation based on mutable Stack for any type T</span>
</span><span class='line'><span class="c1">// takes callback function argument, which it will call on changes with the current head after the change</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Stack</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">push</span><span class="o">(</span><span class="n">elem</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">res</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">elem</span><span class="o">)</span>
</span><span class='line'>    <span class="n">onChange</span><span class="o">()</span>
</span><span class='line'>    <span class="n">res</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">pop</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">res</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span>
</span><span class='line'>    <span class="n">onChange</span><span class="o">()</span>
</span><span class='line'>    <span class="n">res</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">peek</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">head</span>  <span class="c1">// convenience method since stack implementation does not implement peek()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ChangeAwareStack</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation is straightforward:</p>

<ul>
<li><p><strong>ChangeAwareStack[T]</strong> extends <strong>scala.collection.mutable.Stack[T]</strong> and takes a function that is called when the data on the stack changes.</p></li>
<li><p><em>push</em> and <em>pop</em> are overridden, calling the function each overrides plus additionally calling the onChange functions.</p></li>
<li><p><em>peek</em> is just another name for <em>head</em>.</p></li>
<li><p>Finally a companion object allows instantiation without using <strong>new</strong>.</p></li>
</ul>


<p>Functions from the <strong>InterOp</strong> object are then exported with specified names; this happens in order to protect their respective names. Otherwise, the <strong><a href="https://developers.google.com/closure/compiler/">Google Closure Compiler</a></strong> would rename them. Without exporting the functions, they would also not be publicly accessible at all after the closure compiler optimization phase.</p>

<figure class='code'><figcaption><span>Exported Functions</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/js/startup.js'>startup.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ScalaJS</span><span class="p">.</span><span class="nx">modules</span><span class="p">.</span><span class="nx">com_matthiasnehlsen_sseChat_App</span><span class="p">().</span><span class="nx">main</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ScalaApp</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span> <span class="o">=</span> <span class="nx">ScalaJS</span><span class="p">.</span><span class="nx">modules</span><span class="p">.</span><span class="nx">com_matthiasnehlsen_sseChat_InterOp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;setUser&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">setUser__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;setRoom&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">setRoom__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;undo&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">undo__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;undoAll&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">undoAll__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;submitMsg&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">addMsg__Lcom_matthiasnehlsen_sseChat_ChatMsgTrait__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;triggerReact&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">triggerReact__V</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">[</span><span class="s1">&#39;ScalaApp&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides naming the exported functions by putting them in an object on the global scope, there is also a call to the <em>main</em> method of the Scala.js application. Personally, I am not terribly happy with putting anything at all on the global scope. Right now I have two global objects, one for the React side of things and one for the exported functions from the Scala.js application. This could quite easily be brought down to one by exporting the functions as properties of the same object used by the ReactJS application. I am just too lazy to do this right now. Please let me know if you have any ideas on how to reduce this to zero objects on the global scope.</p>

<p>Now let&#8217;s have a look at an excerpt of the ReactJS application, written in JSX. Please note that for simplicity reasons I am running the JSX to JavaScript in your browser. You don&#8217;t want to do that in a production system.</p>

<figure class='code'><figcaption><span>ReactJS application (excerpt)</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/public/js/react-app-scalajs.js'>react-app-scalajs.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** undo component*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">UndoBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleUndo</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">undo</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleUndoAll</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">undoAll</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;undo&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Undo&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleUndo</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Undo All&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleUndoAll</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span> <span class="nx">Stack</span> <span class="nx">size</span><span class="o">:</span>  <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">undoSize</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>     <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** ChatApp is the main component in this application, it holds all state, which is passed down to child components</span>
</span><span class='line'><span class="cm"> *  only as immutable props */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ChatApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">setUser</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleRoomChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">setRoom</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">UndoBox</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">}</span> <span class="nx">undoSize</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">stackSize</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">NameRoomBox</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span> <span class="nx">handleNameChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span>
</span><span class='line'>            <span class="nx">room</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">room</span><span class="p">}</span> <span class="nx">handleRoomChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleRoomChange</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">MsgList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">msgs</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">SaySomethingBox</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** render top-level ChatApp component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tlComp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">ChatApp</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="nx">ScalaApp</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;chat-app&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** pass props to top level component */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tlComp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** application ready, call initial trigger so that name and room get loaded without receiving message */</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">triggerReact</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>UndoBox</strong> is one of the application&#8217;s components, handling the undo functionality described above. All it does is assigning handlers to the buttons, in which the functions passed in as props are called.</p></li>
<li><p><strong>ChatApp</strong> is the main component of the application, it wires together the individual components and passes through the individual props.</p></li>
<li><p><strong>tlComp</strong> is the rendered top level component. In this call, we specify where to render the component and we also pass in the handler functions as props.</p></li>
<li><p><em>SseChat.setProps</em> is the function that passes props to the top level component. Once the JSX is compiled and initialized, this will replace the placeholder function inside react-interop.js.</p></li>
<li><p>At the end of the file, <em>ScalaApp.triggerReact</em> is called. This is done only to render the initial state (with a random name) independent of a message sent by the server. It just makes the initial rendering a bit smoother; otherwise it will not be needed.</p></li>
</ul>


<p>Finally, we have some JavaScript code for interoperability and communication with the server side:</p>

<figure class='code'><figcaption><span>ReactJS application (excerpt)</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/public/js/react-interop.js'>react-interop.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SseChatApp</span> <span class="o">=</span> <span class="nx">SseChatApp</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">listen</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">chatFeed</span><span class="p">;</span> <span class="c1">// holds SSE streaming connection for chat messages for current room</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// returns function that takes room as argument</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">chatFeed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="c1">// if initialized, close before starting new connection</span>
</span><span class='line'>        <span class="nx">chatFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/chatFeed/&quot;</span> <span class="o">+</span> <span class="nx">room</span><span class="p">);</span> <span class="c1">// (re-)initializes connection</span>
</span><span class='line'>        <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">handler</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">));</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// attach addMsg event handler</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** POST chat message */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">submitMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/chat&quot;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msg</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">contentType</span><span class="o">:</span> <span class="s2">&quot;application/json; charset=utf-8&quot;</span><span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** placeholder until replaced with real implementation upon compiling / initializing JSX */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * individual setProps because otherwise the closure compiler renamed function names on application state</span>
</span><span class='line'><span class="cm"> * case class object (would be more elegant with a single case class object)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setUserProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">user</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setRoomProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">room</span><span class="o">:</span> <span class="nx">room</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setMsgsProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msgs</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">msgs</span><span class="o">:</span> <span class="nx">msgs</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setStackSizeProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">stackSize</span><span class="p">)</span> <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">stackSize</span><span class="o">:</span> <span class="nx">stackSize</span> <span class="p">});</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><em>listen</em> is a function that is called for establishing a Server Sent Event connection to the server. Upon file loading, a self calling function closes over the ChatFeed variable so that it becomes accessible (and cancellable) on subsequent calls. This self-call then returns the actual function that allows establishing (and replacing) a connection to the stream for a particular room.</p></li>
<li><p><em>submitMsg</em> <strong>POST</strong>s a message to the server.</p></li>
<li><p>There are multiple functions setting props in the top level ReactJS component, such as <em>SseChatApp.setMsgsProps</em>. <em>SseChatApp.setProps</em> is a placeholder, it gets replaced once the JSX compiler has run and the ReactJS application has been loaded (see above).</p></li>
</ul>


<h1>Conclusion</h1>

<p>Scala.js is an interesting approach for client side development and certainly a technology to watch, particularly when you are working with <strong><a href="http://www.scala-lang.org/">Scala</a></strong> on the server side anyhow. It is still in the experimental phase, so I probably won&#8217;t have the Next Big Thing depend on it yet, but it may get there if there is enough interest in the community.</p>

<p><strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> is a library I already fully recommend. Working with it has been a breeze so far and it took a lot less time to get familiar with its features in comparison to <strong><a href="http://angularjs.org/">AngularJS</a></strong>. Its approach to immutable data is very natural for a functional programmer.
It is great to only have to think about components and then be able to build your application around that in the way you like it, instead of being forced to stick to a prescribed way of doing things.</p>

<p>I hope you found this useful; as always let me know what you think.</p>

<p>Until next time,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Framework and Facebook's React library]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/"/>
    <updated>2014-01-05T23:30:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library</id>
    <content type="html"><![CDATA[<p>Over the holidays I discovered Facebook&#8217;s <strong><a href="http://facebook.github.io/react">React</a></strong>, an interesting library for generating reactive user interfaces. I wanted to try it out in a real-world application, and I thought of one such application I still had running as a demo: <strong><a href="https://github.com/matthiasn/sse-chat">sse-chat</a></strong>, a little chat application I wrote last summer to learn how to make <strong><a href="http://www.playframework.com/">Play Framework</a></strong> and <strong><a href="http://angularjs.org/">AngularJS</a></strong> cooperate in a very basic way. So I thought, why not rewrite the client side using <strong><a href="http://facebook.github.io/react">React</a></strong>, offering the exact same functionality as the <strong><a href="http://angularjs.org/">AngularJS</a></strong> version. Both are also available in the new version with no changes to the backend code except for the added route, as both versions can be accessed in parallel.</p>

<!-- more -->


<p>The constraint of making it behave exactly like the AngularJS version was a great practice and it actually only took me an afternoon to complete. Touching the existing demo version also had me notice that the live version of it had been up for like 4 months or so, without any trouble. I have the same experience with my <strong><a href="http://birdwatch.matthiasnehlsen.com/#/">BirdWatch</a></strong> application. Kudos to the Play Framework and Akka developers for enabling such reliable server systems.</p>

<p>Here&#8217;s the new version using <strong>React</strong> instead of <strong>AngularJS</strong>:</p>

<iframe width="420" height="475" src="http://sse-chat.matthiasnehlsen.com/react" frameborder="0"></iframe>


<p>You can open the AngularJS version of the demo inside the <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">article from last summer</a></strong> in another browser and communicate between the two, they share the same backend. Romeo and Juliet are having a chat in room 1, but hey, why not. Better than you just chatting with yourself. You can learn more about the server side in the previous article. In this article we will look exclusively at the web client. Here&#8217;s an overview of the architecture with React:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/react-sse-chat.png" title="image" alt="images"></p>

<p>So what is different with the <strong>React</strong> library? It offers a <strong>declarative</strong> approach just like AngularJS, but it is subtantially different in many quite interesting ways:</p>

<ul>
<li><strong>Components</strong> are the basic building blocks, they encapsulate markup and logic together in one place.</li>
<li>Components receive <strong>immutable</strong> data (called <strong>props</strong>) from parent elements.</li>
<li>Components can have state if necessary.</li>
<li>React <strong>prefers immutable</strong> props over mutable state wherever possible, making state changes much easier to reason about.</li>
<li>Each component knows how to <strong>render itself</strong>.</li>
<li>Components can have other components as children. They can pass their own state or props to these as immutable props.</li>
<li>The entire DOM is rendered into a (fast) <strong>virtual DOM</strong> with every change made. Changes can either come from mutated state or from parent elements as immutable props.</li>
<li>This virtual DOM is then <strong>diffed</strong> against a representation of the current DOM, with the actual DOM only being manipulated where new and old versions differ.</li>
<li>Data coming from business logic outside will not be touched; React can work with <strong>immutable data</strong> thoughout.</li>
<li>Hierarchical components, props, state, handlers. That&#8217;s pretty much it, no more rather unintuitive concepts to understand.</li>
</ul>


<h2>How is it different from AngularJS?</h2>

<p>What I find most intriguing here is how React can work with immutable data. AngularJS, on the other hand needs to modify data that is used in <strong>$scope</strong> in order to keep track of changes.</p>

<p>I tried to use AngularJS with <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> a few months back and I ran into a problem with <strong><a href="http://stackoverflow.com/questions/19863873/angularjs-infinite-digest-loop-when-no-scope-changes">infinite digest loops (StackOverflow)</a></strong>, something I quite honestly didn&#8217;t want to know about. So the problem seemed to be, and please correct me if I&#8217;m wrong, that ClojureScript was handing a shiny new data structure to AngularJS over and over again in order to guarantee immutability internally, just like Underscore generated a new data structure on every call to filter (see the StackOverflow discussion cited above). Angular needs to modify data in order to keep track of updates though, resulting in an infinite cycle that it fortunately is clever enough to stop after a few iterations. Let&#8217;s have a quick look at what Angular does with data. It needs to mark individual elements in a collection with a <strong>hashKey</strong> property in order to keep track of their changes:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/ng-hash-key.png" title="image" alt="images"></p>

<p>Now that&#8217;s a problem when the data is considered immutable. I assume ClojureScript delivered fresh JavaScript objects from the ClojureScript data structures at the edge of the application where I called a function from Angular, with the result being that on subsequent calls the hashKey was always missing, making Angular upset. Let&#8217;s emulate this behavior by getting the data for the ng-repeat from a function call that is guaranteed to deliver an array consisting of shiny new objects on every call:</p>

<figure class='code'><figcaption><span>Causing an Infinite Digest Loop in Angular</span><a href='https://github.com/matthiasn/sse-chat/blob/e0b55172eede0f265cedf03cde46ae6b39639e82/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">msgs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">msgs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msgs</span><span class="p">)),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we also need to change the index.html to have the ng-repeat get the data from a function call, but just follow the link in the code block above to see the full source code for the branch I have created. With these changes in place, every subsequent call to the <strong><em>msgs</em></strong> function will be an array with newly generated objects, causing the following error on every single change to the application state, each of which triggers the digest cycle:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/ng-digest.png" title="image" alt="images"></p>

<p>Note that the error output in the browser console is 23KB in size, even when using the minified production version of Angular, so I can only assume this is real problem.</p>

<p>Now in my daytime job I mostly write Scala code and I really like the peace of mind that immutability can give us, so I&#8217;d rather not have to depend on letting the UI part of the web application modify the data model just to keep track of changes. I want to further explore immutability in the browser, for example by using ClojureScript or the younger <strong><a href="http://www.scala-js.org/">Scala.js</a></strong>, which also allows working with immutable data structures. I have only played around a little bit with the latter, but it certainly is an interesting approach.</p>

<p>A nice example of working with immutable data (from ClojureScript) and React is David Nolen&#8217;s great <strong><a href="https://github.com/swannodette/om">Om library</a></strong>. Immutability allows for amazing features like a simple undo functionality, even saving the entire history of state mutation during the lifecycle of the application. It shouldn&#8217;t be too difficult to achieve the same in Scala.js, for example by modelling the application state as an immutable data structure and then pushing each version into an array that is then used as a stack. Pop the last state and render what you can peek at, undo done. Conceptually this is really simple to think about iff (if and only if) your UI rendering code requires no state of its own and simply renders an immutable data structure, which React is capable of.</p>

<h2>Source code time</h2>

<p>Let&#8217;s now have a look at the actual source code of the new React based client written in JavaScript and <strong><a href="http://facebook.github.io/react/docs/jsx-in-depth.html">JSX</a></strong>. JSX is a JavaScript XML syntax, which is transformed into plain old JavaScript using a preprocessor. It makes writing DOM elements simpler, however there is no need to use it; instead we can write a React application in (somewhat clunkier) JavaScript code directly instead. It is recommended to do the conversion on the server side, for example in a grunt task, but there is a client-side script for development as well. I chose to ignore the recommendation in this demo for simplicity; your browser will handle the conversion just fine. However for a commercial product I would certainly follow the recommendation to make the client side loading experience as smooth as possible.</p>

<p>The HTML for our app becomes very simple. In this application it is called react.scala.html, but that&#8217;s really only because it made the hookup to a route easier, otherwise there is no good reason to use a play/scala template here:</p>

<figure class='code'><figcaption><span>react.scala.html</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/app/views/react.scala.html'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;chat-app&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//fb.me/react-0.8.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//fb.me/JSXTransformer-0.8.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/jsx&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/js/react-app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we do above is provide a DOM element hosting the application markup plus loading the necessary scripts. All the interesting stuff happens inside <strong>react.app.js</strong>, which is loaded last. Let us go through, component by component, starting from the top of the hierarchy with the <strong>ChatApp</strong> component:</p>

<figure class='code'><figcaption><span>ChatApp component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** randomly generate initial user name */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">initialName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Jane Doe #&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** ChatApp is the main component in this application, it holds all state, which is passed down to child components</span>
</span><span class='line'><span class="cm"> *  only as immutable props */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ChatApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">room</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">initialName</span><span class="p">()</span> <span class="p">};</span>  <span class="c1">// creates initial application state</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">componentWillMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">room</span><span class="p">);</span>  <span class="c1">// called on initial render of the application</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>  <span class="c1">// update name state with new value in text box</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleRoomChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">room</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>  <span class="c1">// update room state with the newly selected value</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>  <span class="c1">// re-initialize SSE stream with new room</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">addMsg</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">));</span>  <span class="c1">// push message into state.data array</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">data</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="mi">4</span><span class="p">)});</span>  <span class="c1">// replace state.data with up to last 5 entries</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">listen</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">chatFeed</span><span class="p">;</span>            <span class="c1">// holds SSE streaming connection for chat messages for current room</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">room</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">// returns function that takes room as argument</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">chatFeed</span><span class="p">)</span> <span class="p">{</span> <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span> <span class="p">}</span>    <span class="c1">// if initialized, close before starting new connection</span>
</span><span class='line'>            <span class="nx">chatFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/chatFeed/room&quot;</span> <span class="o">+</span> <span class="nx">room</span><span class="p">);</span>       <span class="c1">// (re-)initializes connection</span>
</span><span class='line'>            <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addMsg</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>  <span class="c1">// attach addMsg event handler</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}(),</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">NameRoomBox</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">handleNameChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span>
</span><span class='line'>                <span class="nx">handleRoomChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleRoomChange</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">MsgList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">SaySomethingBox</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">room</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">room</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this simple example, the ChatApp component is where most of the application logic lives in. I would probably prefer if it lived somewhere completely outside of React in more complex applications, for example in ClojureScript or Scala.js code, or in well-organized JavaScript code using underscore. Then not even the top element of the React application would need to have state at all. But in this simple example it should suffice to keep everything together in the top-level React component. So what goes on in said component?</p>

<ul>
<li>Inside the <strong><em>getInitialState function</em></strong>, the <strong>initial state</strong> is provided.</li>
<li>The <strong><em>listen</em></strong> function initiates the SSE connection for the current chat room, potentially closing an already established connection. It is organized as an enclosing function that is immediately called upon initialization of the component. That initial call sets up a chatFeed var and returns another function that henceforth lives inside the <strong><em>listen</em></strong> property of the component. This function can then be called when an open connection to the SSE stream for the current room is desired.</li>
<li>The <strong><em>addMsg</em></strong> function mutates component state by calling <strong>this.setState</strong>.</li>
<li>The <strong><em>handleRoomChange</em></strong> and <strong>handleNameChange</strong> functions modify <strong>room</strong> and <strong>name</strong> state. <strong><em>handleRoomChange</em></strong> also calls listen again to re-establish the SSE stream for the new room.</li>
<li>The <strong><em>componentWillMount</em></strong> function establishes the SSE connection by calling <strong><em>listen(room)</em></strong>, once, upon initialization of the component.</li>
</ul>


<p>Next let&#8217;s look at the first child component of the single <strong>ChatApp</strong> component.</p>

<figure class='code'><figcaption><span>NameRoomBox component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** name and room selection component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NameRoomBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">roomOpts</span><span class="o">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">option</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">room</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Room</span> <span class="p">{</span><span class="nx">room</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/option&gt; }),</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="nx">Your</span> <span class="nx">Name</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;user&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;userField&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class='line'>                <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">select</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;roomSelect&quot;</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">handleRoomChange</span><span class="p">}</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">room</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">roomOpts</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/select&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <strong>NameRoomBox</strong> component, only two things actually happen:</p>

<ul>
<li>The <strong>roomOpts</strong> property is initialized with a list of all 5 room <option> elements. The JSX transpiler thankfully does this for us.</li>
<li>The <strong><em>render</em></strong> function returns a <code>&lt;div&gt;</code> with an <code>&lt;input&gt;</code> for the name and a <code>&lt;select&gt;</code> for the room inside, using the <code>&lt;option&gt;</code>elements created in the first step. It also attaches the handler functions provided inside <strong>props</strong> to respond to user input.</li>
</ul>


<p>The next component inside <strong>ChatApp</strong> is the <strong>MsgList</strong> component:</p>

<figure class='code'><figcaption><span>MsgList component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** chat messages list component, renders all ChatMsg items (above) */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MsgList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">msgNodes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">ChatMsg</span> <span class="nx">user</span><span class="o">=</span><span class="p">{</span><span class="nx">msg</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span> <span class="nx">time</span><span class="o">=</span><span class="p">{</span><span class="nx">msg</span><span class="p">.</span><span class="nx">time</span><span class="p">}</span> <span class="nx">text</span><span class="o">=</span><span class="p">{</span><span class="nx">msg</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;chat&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">msgNodes</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>MsgList</strong> component only has one function: <strong><em>render</em></strong>, which takes the array of messages provided as props and maps it into individual <strong>ChatMsg</strong> components, which we will look at next:</p>

<figure class='code'><figcaption><span>ChatMsg component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** single chat message component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ChatMsg</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;msg &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span> <span class="o">===</span> <span class="s2">&quot;Juliet&quot;</span> <span class="o">?</span> <span class="s2">&quot;juliet&quot;</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span> <span class="o">?</span> <span class="s2">&quot;others&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)}</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">time</span><span class="p">}</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span> <span class="nx">says</span><span class="o">:</span> <span class="o">&lt;</span><span class="err">/strong&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>ChatMsg</strong> component above only knows how to render itself. Depending on the name of the user sending a message, it is rendered in different colors by assigning the element different CSS classes. Now the last component to look at is the <strong>SaySomethingBox</strong>:</p>

<figure class='code'><figcaption><span>SaySomethingBox component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** chat message input component*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SaySomethingBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleSubmit</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span> <span class="nx">user</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">time</span><span class="o">:</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toUTCString</span><span class="p">(),</span> <span class="nx">room</span><span class="o">:</span> <span class="s2">&quot;room&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">room</span> <span class="p">};</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/chat&quot;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msg</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">contentType</span><span class="o">:</span><span class="s2">&quot;application/json; charset=utf-8&quot;</span><span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span><span class="s2">&quot;json&quot;</span><span class="p">});</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">().</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="c1">// empty text field</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;textField&quot;</span> <span class="nx">ref</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;Say something&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;input-block-level&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn btn-primary&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Submit&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>     <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <strong>SaySomethingBox</strong> component, two things happen:
+ The <strong><em>render</em></strong> function renders the UI and attaches the <strong><em>handleSubmit</em></strong> function to the events fired by either submitting the form by pressing enter inside the <code>&lt;input&gt;</code> element or clicking the submit button.
+ The <strong><em>handleSubmit</em></strong> function POSTs the text in the <code>&lt;input&gt;</code> field to the server using jQuery&#8217;s <code>$.ajax</code> function. It uses the <strong>name</strong> and <strong>room</strong> from <strong>props</strong> to construct the JSON message. The message POSTing logic could just as well live inside the top level component, maybe it should, but I don&#8217;t feel like changing it right now.</p>

<p>That&#8217;s pretty much it, with one last function call to get the whole application started:</p>

<figure class='code'><figcaption><span>React.renderComponent</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** render top-level ChatApp component */</span>
</span><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">ChatApp</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;chat-app&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p><strong><a href="http://facebook.github.io/react">React</a></strong> offers an intriguing way of rendering potentially immutable data into a virtual DOM with every single change of the data. This virtual DOM will then be diffed against the current DOM (or, more likely, the previous version of the virtual DOM, but just guessing there) and then only the changes are performed on the real DOM, limiting the supposedly slow DOM manipulations to an absolute minimum. I have yet to convince myself about this, but reportedly this whole process is very fast, allowing for 60 FPS even in a mobile WebView, with JavaScript performaning a lot worse than in &#8220;real&#8221; browsers such as Mobile Safari, Mobile Chrome and any recent Desktop browser. React is also conceptually very simple; there are not a lot of things to understand. However I do feel that I need to develop better ideas on how to structure a larger application.</p>

<p>So far all this may sound like a lot of praise for React, but let me emphasize where <strong>AngularJS</strong> really has the edge at this point:</p>

<ul>
<li>Workable best practices for organizing large applications.</li>
<li>Many more online resources. I don&#8217;t feel much love for Angular&#8217;s own documentation, but at least there are plenty of great tutorials and blog articles about it out there.</li>
<li>Reasonably mature support for automated building and testing.</li>
</ul>


<p>So, will I continue using AngularJS? <strong>Yes</strong>. Am I curious about doing more with React? <strong>Another yes</strong>. I need a larger project in order to experience React in a more complex setting. Oh, there&#8217;s one project that comes to mind, but that&#8217;s a story for another day. Before I forget: you can find the source code for the application on <strong><a href="https://github.com/matthiasn/sse-chat">GitHub</a></strong>.</p>

<p>Cheers,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year's Resolution]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/12/31/new-years-resolution/"/>
    <updated>2013-12-31T19:40:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/12/31/new-years-resolution</id>
    <content type="html"><![CDATA[<p>I never really thought much of New Year’s resolutions because I could never live up to them. 2013 was different though. One year ago my resolution was to start writing a blog and to create one or more open source projects, just for the fun of it. And this time I actually succeeded. So I thought I might continue with this resolution thing.</p>

<!-- more -->


<p>2013 has been pretty good for me, for the most part at least, except for the fact that my beloved bike was stolen from inside the apartment building two days ago, thanks to modern battery technology allowing for cordless angle grinders. But I am digressing. Usually I am a fan of powerful batteries. In terms of learning more about software, it has been great. I have started writing this blog and I have created my first ever open source project, <strong><a href="http://birdwatch.matthiasnehlsen.com/">BirdWatch</a></strong>, and it has been cool to build it and improve it. Along the way it has also been great to learn more about <strong><a href="http://www.scala-lang.org">Scala</a></strong>, <strong><a href="http://www.playframework.com">Play Framework</a></strong>, <strong><a href="http://angularjs.org">AngularJS</a></strong> and JavaScript in general.</p>

<p>I have also written a few articles that I really like. Not all of them, of course, but there are a few. I find this particularly rewarding to watch after a good friend of mine, a journalist and professional writer, had set somewhat different expectations. I asked him early on how long it had taken him until he was completely satisfied with his output on a regular basis, like looking at an article the next day and not wanting to rewrite it for the umpteenth time. He said that it had taken him about seven years of writing professionally, full time. So I can either consider myself lucky that I am happy with a decent share of the articles, or maybe I just have low standards, or both.</p>

<p>I also recently started working on an AngularJS based blogging engine, which I have not published yet. It offers live preview and animated code blocks, among other things. It is pretty much production ready, I find, I am just lacking the time to actually bring it to the point that I want to see it published. Or maybe I should just embrace the imperfection and publish it as is. Maybe there is someone who already finds it useful and wants to put some effort in it. One should be embarrassed of one&#8217;s first release anyways, right?</p>

<p>Recently I started asking myself if working on a blogging engine may be some elaborate procrastination strategy on my part, in order to have an excuse to not actually write. Octopress works reasonably well, after all. On the other hand, I do not really like the authoring process all that much, particularly when it comes to embedding source code, which I find quite unsatisfying.</p>

<p>I also finally started working on a book about three months ago, after having been approached by editors a few times who had read one or more of the articles that I also like. I will talk more about the content of the book in due course. Writing a book is an interesting endeavor and quite different from writing a blog.</p>

<p>So what do I want to do differently in 2014 when it comes to the blog, book writing and authoring fun, open source toy projects?</p>

<ul>
<li><p>More frequent blog posts. I would like to publish stuff more often, even if that means shorter articles. I bet some readers will be happy with that; I know that my articles so far have not exactly been short. I am aiming for two fixed publications per month, maybe around the 5th and the 20th of each month, give or take. I am aware that this puts additional pressure on me, but I think it will be better to get into a good rhythm there.</p></li>
<li><p>Morning pages. I have been introduced to this concept by the <strong><a href="http://pragprog.com/book/ahptl/pragmatic-thinking-and-learning">Pragmatic Programmer</a></strong> series and I have found it to be great to do an unfiltered first-thing-in-the-morning brain dump. I just don’t do it regularly enough yet. One point where I don’t agree with the concept as introduced in the book is that it needs to be on paper, not on screen. I find that restriction to be somewhat pointless because it ends up with me not ever looking at the output again. And I find that typing does not keep me from getting whatever idea out of my brain, into a form that is full-text searchable.</p></li>
<li><p>Quite the contrary, I want the thoughts I write down not only to be searchable but also be tagged by both subject and people. That way I feel I could bundle thoughts better, particularly about ideas that are not concrete enough yet to have found their way into a to-do list. I would like to write a tool for doing so, maybe with an AngularJS frontend and backed by ElasticSearch. Could be another project on github, this time something I am actually using on a daily basis. But then again, this may just be one of these procrastination strategies. Time will tell.</p></li>
<li><p>I want to check my own github profile less often. It is really cool to watch your projects receiving stars from other developers who find something useful or otherwise cool. But it can become quite addictive to check the github app on my smartphone to see if anything has changed, in particular when something has changed only recently. So less of that. Once a day or so is plenty.</p></li>
<li><p>I need to become better at leaving work at work. As interesting as the engineering problems there might be, I should not think about them at all outside of work. I have plenty of other areas I want to focus on, like this blog, the book or one of my next toy projects.</p></li>
<li><p>I need to make more time for physical exercise. I really perform better in all areas and I feel better when I have worked out three or four times per week. So I need to get back into that habit.</p></li>
<li><p>I want to do more in <strong><a href="http://clojure.org">Clojure</a></strong>. I have spent some time with the language and it resonates really well with the way I am thinking.</p></li>
<li><p>I want to <strong><a href="http://learnyouahaskell.com">learn me a Haskell for great good</a></strong>, just for the fun of it.</p></li>
</ul>


<p>Well, this is it for now. Let’s see how many of these I can actually put into practice. So many interesting things to explore, so little time.</p>

<p>Have a great 2014, everyone.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Template with Live Reload and 100/100 PageSpeed]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/11/23/live-page-reload-on-any-device/"/>
    <updated>2013-11-23T18:36:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/11/23/live-page-reload-on-any-device</id>
    <content type="html"><![CDATA[<p>A few weeks ago I started working on the follow-up to my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> project. This new project is another single page application based on <strong><a href="http://angularjs.org">AngularJS</a></strong>, but that is not part of the story I am going to tell you today at all. Instead, today I will talk about <strong>speed</strong>. As in, how long does it take for a web page to load, on a mobile device? I was doing some research by opening different websites under suboptimal conditions, such as 3G with only two to three bars, or even worse the dreaded <strong>E</strong> with four to five bars. Not terribly difficult to simulate, I only need to disable the Wifi and walk into different corners of my apartment for that. Opening my own blog made me sad: with the bad 3G connection it took like <strong>10 seconds</strong> for the index page to show anything at all. No way I would ever wait that long for any page to load. And I would quite likely not even try again. So I went on a quest to make this better. The result is of course on <strong><a href="https://github.com/matthiasn/live-html5">GitHub</a></strong>.</p>

<!-- more -->


<p>So what happens when the browser loads a page? First a DNS lookup takes place, translating the human-readable domain name into an IP address. Then that domain is contacted using an HTTP GET request for the particular URL. If no specific file is given in the request, a server will usually try to return a file named <strong>index.html</strong> inside the folder that maps to the request URL. This <strong>index.html</strong> then typically contains multiple links to stylesheets and scripts, all of which trigger the same cascade (minus the DNS lookup if subsequent requests point to the same domain). Many of the resources are blocking; the page will only display after they are loaded.</p>

<p>We can examine the request behavior by looking at a timeline chart, like this one for the index page of this blog:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/gtmetrix-blog.png" title="image" alt="gtmetrix result for matthiasnehlsen.com"></p>

<p>You will notice that the <strong>DOM loaded</strong> event fired after more than an entire second (the blue line), or a little less than 200ms after the blocking screen.css has finished loading.</p>

<p>I have used <strong><a href="http://gtmetrix.com">GTmetrix</a></strong> for generating the charts. The numbers are comparable to what I can measure in Chrome Developer Tools, with a decent DSL subscription. So presumably they are much better than what a suboptimal mobile connection would yield.</p>

<p>Now pre-LTE mobile networks have much longer network round-trip times than copper or fiber-based tethered networks, even under ideal conditions. And things of course do not degrade gracefully when the signal deteriorates.</p>

<p>I wanted to know how much worse network round-trip times actually are on mobile networks, so I measured a <strong><a href="http://en.wikipedia.org/wiki/Ping_(networking_utility)">ping</a></strong> to the domain of this blog with a free iPhone app called <strong><a href="https://itunes.apple.com/us/app/network-ping-lite/id289967115">Ping Lite</a></strong>.</p>

<p>As a baseline measurement, I did the ping over Wi-Fi + DSL and got around 55ms on average:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/iphone_ping_wlan.png" title="image" alt="iPhone ping wifi"></p>

<p>Interestingly this is about 25ms slower than what I got with the command line ping on my Mac on the same network. I have no idea where this delay comes from, could be something in iOS or in the Ping Lite app. But it doesn&#8217;t really matter; a 25ms delay is not near as noticeable as the delay introduced by switching to a mobile network. Using 3G under ideal conditions (five bars) I consistently got a little less than 500ms:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/iphone_ping_3g.png" title="image" alt="iPhone ping 3G"></p>

<p>That is much worse than the Wi-Fi connection indeed, particularly when multiple files need to be loaded; then these times really add up. Not a big surprise that the Edge connection is even worse, particularly in terms of consistency:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/iphone_ping_edge.png" title="image" alt="iPhone ping EDGE"></p>

<p>Thinking about the timeline, it is not hard to imagine what influence the higher round-trip times will have on the <strong>DOM loaded</strong> event when potentially multiple blocking requests have to be completed before the browser renders the page.</p>

<p>So what can be improved here? Three things came to my mind:</p>

<ul>
<li>Loading external stylesheets takes additional round trips. These are blocking and the page will only render when all the requests are completed. Stylesheets could in theory be loaded asynchronously, but a flash of unstyled content (FOUC) would then occur. Frankly, I&#8217;d rather not have the page load at all than subjecting anyone to that. But why not <strong>inline</strong> all of the CSS in the index.html file in the first place?</li>
<li>No compression was used so far; that alone should cut down the time until <strong>DOM loaded</strong> by substantially shortening the gray portion of the timeline bars.</li>
<li>The CSS seems fairly <strong>large</strong>; there is no way that 37.8KB of styling are necessary for what is rendered on the page. Add up the computed styles of every single element of the page and you will end up with a few Kilobytes at most. Everything else is dead weight.</li>
</ul>


<p>So I decided to try inlining custom CSS in the HTML file and then compressing the file using gzip. I was also interested in the fairly new CSS3 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes">Flexbox Layout</a></strong>, so I decided to write the CSS based on flexbox by hand instead of using <strong><a href="http://getbootstrap.com">Bootstrap</a></strong>. That way I should be able to avoid loading tens of unnecessary stylesheet Kilobytes. You can find out more about flexbox in this great <strong><a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/">tutorial</a></strong>. Note that everything presented in this article would work equally well with <strong><a href="http://getbootstrap.com">Twitter Bootstrap</a></strong>, particularly when you work with the <strong><a href="https://github.com/twbs/bootstrap">Bootstrap LESS source</a>, and honestly there is no reason not to. LESS is a delight, I fand that it makes CSS more approachable from a developers perspective. LESS also makes it easy to only include the Bootstrap parts that are used on the page, making the download much smaller. On the other hand, the distribution version of a popular version from a </strong>CDN** (content delivery network) has the advantage that it will quite likely come from the browser cache, considering how ubiquously Bootstrap is used these days. It seems to be a good idea to avoid delivering the distribution version from your own server, particularly when uncompressed and not minified. Waiting for those extra almost 100 Kilobytes will drive visitors away.</p>

<p>At the end, I find either option viable. What I want to avoid isI would just like to bri</p>

<p>But if I decide to deliver the CSS myself, it should be as concise as possible.</p>

<p>I set up a build system based on <strong><a href="http://gruntjs.com">grunt</a></strong> and started trying out flexbox. It turned out that my frustration tolerance for reloading the page on my mobile devices was so low that I shortly thereafter found myself working on a live <strong>CSS reload</strong> feature. After covering <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> more than once on this blog, I thought I might as well utilize SSE for notifying the browser about file system changes. Detecting file system changes is a solved problem, so all it took was transmitting the events to the browser and have a script on the client side initiate a page reload / refresh. To my surprise, SSE support has only <strong><a href="http://caniuse.com/eventsource">recently come to Android</a></strong>, requiring either the KitKat built-in browser, or Chrome for Android version 30. Things worked well with Chrome 30 on Jelly Bean and with mobile Safari on iOS 6 and 7. I cannot say anything about older versions or other browsers. Please report if things fail in your browser, or better submit a fix.</p>

<p>For the CSS authoring I have chosen <strong><a href="http://lesscss.org">LESS</a></strong> because it makes the whole CSS authoring process a lot smoother. LESS mixins really help in getting rid of a lot of repetition. During the authoring of the page I am using browser-side LESS>>CSS compilation using <strong><a href="http://lesscss.org">less.js</a></strong>. That turned out to be an excellent choice. I stumbled upon the <strong>less.refresh()</strong> function, which has the awesome feature of refreshing the style <strong>without</strong> triggering an entire page reload.</p>

<p>The refresh function combined with the file system refresh messages sent over the SSE connection
 With that feature, I could really focus on minute changes to the CSS without the page jumping at all, even on the mobile device. The video below will illustrate this nicely.</p>

<p>Have a look what this means in practice:</p>

<div class="video-container">
    <iframe width="320" height="180" src="http://www.youtube.com/embed/mNxFQva-Shw"></iframe>
</div>


<p>Things look decent for flexbox in terms of <strong><a href="http://caniuse.com/flexbox">compatibility</a></strong>. In the mobile world, flexbox has been supported since Android 2.1 and iOS 3.1, and by now it is supported on at least the latest browser version on each platform, which should cover the vast majority of mobile devices out there. On the desktop side of things, flexbox has also been supported for a while on different platforms, even on IE since version 10. This is in contrast to SSE, which Microsoft apparently does not want to support at all. But there is one <strong>caveat</strong>: Flexbox exists in different versions, with the old ones prefixed. For -webkit, even different prefixed versions exist. In itself that is not a huge problem, particularly if you use <strong><a href="http://lesscss.org/#-mixins">LESS mixins</a></strong> so you do not have to continuously repeat yourself. But it is still a quite annoying because it means optimizing for different browser versions. Well, nothing new in the world of browser compatibility issues.</p>

<p>I spent some time with the flexbox CSS and the layout of the sample index.html in the <strong><a href="https://github.com/matthiasn/live-html5">live-html5</a></strong> project looks fine to me when viewed with the latest versions of all major browsers, but I have not had the time to even out edges in older versions, particularly in Firefox and IE. If you see a problem there, please fix it and submit a pull request. Old browsers have not been the focus of my experiments much. No reason why they shouldn&#8217;t be supported by the template as well as possible though. Thanks!</p>

<p>Anyways, so all that worked nicely, with a responsive layout with an <strong>aside</strong> element on the right side if the media query detects a wide browser page (e.g. desktop or iPad in landscape orientation) and a stacked layout otherwise. You have seen it in the video above, it is simple and seems to work fine. It is also <strong><a href="http://validator.w3.org/check?uri=http%3A%2F%2Fmatthiasn.github.io%2Flive-html5%2F&amp;charset=%28detect+automatically%29&amp;doctype=Inline&amp;group=0">valid HTML5</a></strong>.</p>

<p>Finally, when I revisited the page speed issue, I implemented automatic CSS inlining, minification and compression. Grunt is great for that, unless you actually like mindless and repetitive tasks. Have a look at the <strong><a href="http://matthiasn.github.io/live-html5/">project description</a></strong> and <strong><a href="https://github.com/matthiasn/live-html5">code</a></strong> to find out more about the build task.</p>

<p>Here is the final result of Google PageSpeed Insights after all the automated optimizations:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed-100.png" title="image" alt="pagespeed 100 result"></p>

<p>Great, this is what I wanted to see. Let us have a look at timeline chart for the sample page now. Arguably the complexity of this page is higher than the blog index page, so I think this is a fair comparison:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/gtmetrix-live-html5.png" title="image" alt="gtmetrix result for optimized live-html5 page"></p>

<p>The <strong>DOM loaded</strong> event now occurs after 86ms, which is more than 12 times faster than what we saw for the index page of the blog initially. It also happens after loading only 7.7KB. That will load much faster over a suboptimal mobile connection for sure. Note that the remaining two resources are not important for the perceived speed. All that matters is the HTML and the embedded styles. The picture is at the bottom of the page on a small screen anyways, and I bet no visitor will give up because a <strong><a href="http://fontawesome.io">font-awesome symbol</a></strong> renders with some delay.</p>

<p>This concludes the quest for speed. The sample page loads as I wanted it to, with nothing less than a 100/100 score on Google PageSpeed Insights. Flexbox seems to work fine particularly for a mobile audience. Finally, the build system removes the pain of optimizing things by hand.</p>

<p>I find the presented solutions particularly sweet as they work together. But you might find individual parts useful as well. I am particularly thinking about the live reload server / client pattern; it will work equally well in a project that uses Bootstrap or whatever. You are not even bound to LESS. You can still use less.js for loading and refreshing CSS without a page refresh. The refreshed CSS could equally well be generated by a <strong><a href="http://sass-lang.com">SASS</a></strong> based CSS build system watching file folders. Or you just edit plain old CSS by hand if that makes you feel good.</p>

<p>In fact I have made the page refresh feature work with <strong><a href="http://www.playframework.com">Play Framework</a></strong>. For that the server.js will need to be started in whichever folder you want to watch and the script snippet needs do be loaded during development. The script would by default not be allowed to contact the <strong><a href="https://github.com/matthiasn/live-html5/blob/master/scripts/server.js">server.js</a></strong> backend because it runs on a different port. The <strong><a href="http://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy</a></strong> of the browser prohibits this. But an instance of nginx can run in front of both server and serve all resources on the same port, including the Server Sent Event stream. You can find the <strong><a href="https://github.com/matthiasn/live-html5/blob/master/conf/nginx.conf">nginx configuration file</a></strong> in the <strong>conf</strong> folder of the project. This even works with the partial CSS reload feature by loading the CSS file(s) as LESS and embedding the <strong><a href="http://lesscss.org">less.js</a></strong> script. I&#8217;d be happy to write an article about this, should the demand present itself.</p>

<h2>Contributions</h2>

<p>I am using this particular project to learn more about the technologies involved. Please submit pull requests wherever you see potential for improvements.</p>

<h2>Outlook</h2>

<p>In this article I have talked about some implementation details for an optimized delivery of a static page to mobile devices. Along the way I have also presented a convenience feature, the smooth live reload particularly for CSS but also for other resources.</p>

<p>I can report that this kind of build system and the live reload feature are also useful when building a single page application. In my new project which I have mentioned in the beginning I am taking the reload feature further by also using it for updating the data model. With that, page refreshes based on  data model changes become equally smooth as the CSS refreshes presented here. But more on that in future articles. As usual, you can find the code on <strong><a href="https://github.com/matthiasn/live-html5">GitHub</a></strong>.</p>

<p>Cheers,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Crossfilter with AngularJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/09/15/using-crossfilter-with-angularjs/"/>
    <updated>2013-09-15T20:40:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/09/15/using-crossfilter-with-angularjs</id>
    <content type="html"><![CDATA[<p>So far I have found my <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application nice to look at but not terribly useful as an original way of finding information. Let&#8217;s face it - the vast majority of tweets are not terribly useful. But there are some in there that are highly relevant. What are their characteristics? At the most basic level, they come from people with huge numbers of followers and / or have been re-tweeted a lot. It&#8217;s these tweets that have a large audience, not the ones from users with low follower counts. The latter make up the majority of the chatter, though. How do we find these more relevant tweets within an observation period?</p>

<!-- more -->


<p>I am running a private instance of this application which is listening to tweets on US politics. In this instance of the application I have been increasingly annoyed by an overwhelming amount of irrelevancy. I&#8217;d search for &#8220;Obama Syria&#8221; and get shiploads of tweets from crazies; finding the relevant stuff was next to impossible when I only had the result set sorted by time.</p>

<p><strong><a href="http://square.github.io/crossfilter/">Crossfilter</a></strong> to the rescue. Over the weekend I finally had time to integrate it into the project. Now you will be able to sort tweets not only in natural order (by time) but also by the number of followers of the author</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/cf_followers.png" title="image" alt="images"></p>

<p>or the number of times a particular tweet has been retweeted. As usual you can <strong><a href="http://birdwatch.matthiasnehlsen.com">try this out</a></strong>.</p>

<p> <img class="left" src="http://matthiasnehlsen.com/images/cf_retweets.png" title="image" alt="images"></p>

<p>The re-tweets sort order currently evaluates the number of total re-tweets during the entire lifecycle of the tweet, which makes this sort order somewhat biased towards older tweets that were re-tweeted a lot in the past but not necessarily proportionately often during the observation time, which is the time span between now (whenever looking at the page as searches are live) and the oldest tweet in the data set. One additional metric could be the number of retweets of a tweet during the observation period, not the total number. That should not be all that difficult using crossfilter.</p>

<p>Let&#8217;s have a look at the source code. The <strong><a href="http://square.github.io/crossfilter/">Crossfilter</a></strong> object lives in an <strong><a href="http://angularjs.org">AngularJS</a></strong> service, which is a singleton within the application. The functionality is then exposed through exported functions for adding data, clearing the <strong><a href="http://square.github.io/crossfilter/">crossfilter</a></strong> and retrieving items for the paginated tweets page.</p>

<figure class='code'><figcaption><span>Crossfilter service</span><a href='https://github.com/matthiasn/BirdWatch/blob/ff861aa0df86c0c0ea2a078a0c3af50a6bc877b1/app/assets/javascripts/services/crossfilter.js'>crossfilter.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// crossfilter service</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">).</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;cf&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// crossfilter object: browser side analytics library, holds array type data (w/incremental updates).</span>
</span><span class='line'>    <span class="c1">// dimensions are fast queries on data, e.g. view sorted by followers_count or retweet_count of the original message</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">([]);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetIdDim</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">followersDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">followers_count</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetsDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalIdDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// freeze imposes filter on crossfilter that only shows anything older than and including the latest</span>
</span><span class='line'>    <span class="c1">// tweet at the time of calling freeze. Accordingly unfreeze clears the filter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">freeze</span>    <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">]);</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">unfreeze</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">add</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>     <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="p">};</span>                            <span class="c1">// add new items, as array</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">clear</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">};</span>                             <span class="c1">// reset crossfilter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">noItems</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">();</span> <span class="p">};</span>                        <span class="c1">// crossfilter size total</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">numPages</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">/</span> <span class="nx">pageSize</span><span class="p">);</span> <span class="p">};</span>  <span class="c1">// number of pages</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// predicates</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweeted</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mapper functions</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalTweet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">);</span> <span class="p">};</span>   <span class="c1">// returns original tweet</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetId</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">};</span>                                    <span class="c1">// returns tweet id</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetCount</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">retweeted</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span> <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">maxRetweets</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">retweet_count</span> <span class="o">=</span> <span class="nx">retweetCount</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">top</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}));</span>
</span><span class='line'>        <span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// deliver tweets for current page. fetches all tweets up to the current page,</span>
</span><span class='line'>    <span class="c1">// throws tweets for previous pages away.</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">tweetPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentPage</span><span class="p">,</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">,</span> <span class="nx">live</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">fetchTweets</span><span class="p">(</span><span class="nx">currentPage</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">),</span> <span class="p">(</span><span class="nx">currentPage</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// fetch tweets from crossfilter dimension associated with particular sort order up to the current page,</span>
</span><span class='line'>    <span class="c1">// potentially mapped and filtered</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fetchTweets</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span>      <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;latest&quot;</span><span class="p">)</span>    <span class="p">{</span> <span class="k">return</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">);</span> <span class="p">}</span>    <span class="c1">// latest: desc order of tweets by ID</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;followers&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">followersDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">maxRetweets</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>   <span class="c1">// desc order of tweets by followers</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;retweets&quot;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// descending order of tweets by total retweets of original message</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">first</span><span class="p">(</span>               <span class="c1">// filtered to be unique, would appear for each retweet in window otherwise</span>
</span><span class='line'>              <span class="nx">_</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">retweetsDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">retweeted</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">originalTweet</span><span class="p">),</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">tweetId</span><span class="p">),</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[];</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on the selected sort order different dimensions are used to generate the paginated tweets list. Sorting by time of tweeting is achieved with a dimension sorting by tweet IDs (which are in chronological order). Another dimension sorts tweets by the follower count of the tweet author. In this case, maxRetweets (mapper function) looks up all retweets within the data set in memory and sets the retweet count to the highest value found. The tweets with the highest number of retweets are found using the retweets dimension. Within this dimension multiple versions of the same original tweet are returned when the tweet has been retweeted multiple times during the observation period. The _.uniq function from <strong><a href="http://underscorejs.org/">underscore.js</a></strong> is used to filter out those duplicate entries. The descending order of retweet_count in the returned array from the dimension guarantees that the version of a retweet with the highest re-tweet count is found first and retained.</p>

<p>The paginated data is generated by retrieving all items from the selected dimension up to the current page. The _.rest function from <strong><a href="http://underscorejs.org/">underscore.js</a></strong> then drops the items for all pages that come before the current page.</p>

<p><strong><a href="http://angularjs.org">AngularJS</a></strong> then takes care of rendering a view by calling the tweetPage function from the crossfilter service every time the UI is updated. This means that the visual representation of the data is always up to date, with automatic updates for example when a tweet in the followers order is retweeted again. All that without having to manipulate the DOM directly, thanks to
<strong><a href="http://angularjs.org">AngularJS</a></strong>.</p>

<p>Evaluating the crossfilter dimension functions again and again can be problematic when tens of individual tweets per second arrive through the <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> connection with the server, though. In order to avoid evaluating the <strong><a href="http://square.github.io/crossfilter/">crossfilter</a></strong> functions multiple times per second I use _.throttle in the registerCallback function in controllers.js:</p>

<figure class='code'><figcaption><span>Insertion Cache inside Controller</span><a href='https://github.com/matthiasn/BirdWatch/blob/ff861aa0df86c0c0ea2a078a0c3af50a6bc877b1/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">insertionCache</span> <span class="o">=</span> <span class="nx">insertionCache</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>    <span class="c1">// every received item is appended to insertionCache.</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">throttle</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>                       <span class="c1">// throttle because every insertion triggers expensive</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">insertionCache</span><span class="p">);</span>  <span class="c1">// $scope.apply(), insert cache once every 3 seconds,</span>
</span><span class='line'>    <span class="nx">insertionCache</span> <span class="o">=</span> <span class="p">[];</span>                      <span class="c1">// then empty cache.</span>
</span><span class='line'><span class="p">},</span> <span class="mi">3000</span><span class="p">)();</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, you can now increase the number of pre-loaded tweets to up to 20,000 under <strong>settings</strong>. That may slow the application down, though. A lot of things aren&#8217;t perfect yet, but overall it seems to be working fine.</p>

<p>Anyhow, I will go into more detail later. The source code for the entire application can be found on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>. My <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">previous article</a></strong> is the place to go for an explanation of the overall architecture of the application. It is a work in progress and I will get back to it in the next couple of days. For now I just wanted to give you a quick update on what I have been up to this weekend.</p>

<p>Until next time,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch explained]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/"/>
    <updated>2013-09-10T22:54:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained</id>
    <content type="html"><![CDATA[<p><strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> is an <strong><a href="https://github.com/matthiasn/BirdWatch">open-source</a></strong> reactive web application that consumes the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> for a selection of terms. It processes those matching tweets in a server side application that is based on <strong><a href="http://www.playframework.com">Play Framework</a></strong>. The tweets are then stored inside <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>, where they are available for complex full-text searches.
On the client side, a <strong><a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a></strong> based on <strong><a href="http://angularjs.org">AngularJS</a></strong> allows the user to perform a live search for tweets with certain keywords and to do some analysis on them, such as word count statistics, activity over time and sorting results by followers and retweet counts.</p>

<!-- more -->


<p>Searches are conducted in real time thanks to so called <strong><a href="http://www.elasticsearch.org/guide/reference/api/percolate/">Percolation queries</a></strong> within ElasticSearch. Besides being used to retrieve previous matches, each search is also registered with ElasticSearch. New tweets are then matched against existing queries and delivered to the client via <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>. This will be explained in more detail in the ElasticSearch section towards the end of this article. The client side visualizations based on <strong><a href="http://d3js.org">D3.js</a></strong> are then updated with those new search results.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_beer.png" title="image" alt="images"></p>

<p>Here is an architectural overview with a focus on the <strong><a href="https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala">Twitter client</a></strong>:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_anim.gif" title="image" alt="images"></p>

<h3>TwitterClient Actor</h3>

<p>This server side application component establishes the communication with Twitter and then monitors the connection with a supervisor actor. The connection may be disrupted, but the supervisor will then notice inactivity and start a new connection.</p>

<p>So what is an Actor?</p>

<blockquote><p>Actors are very lightweight concurrent entities. They process messages asynchronously using an event-driven receive loop. Pattern matching against messages is a convenient way to express an actor&#8217;s behavior. They raise the abstraction level and make it much easier to write, test, understand and maintain concurrent and/or distributed systems. You focus on workflow—how the messages flow in the system—instead of low level primitives like threads, locks and socket IO.</p><footer><strong>Akka Actors</strong> <cite><a href='http://akka.io'>http://akka.io</a></cite></footer></blockquote>


<p>The underlying Actor Model as a model of concurrent computation was first described in a 1973 paper by Carl Hewitt, Peter Bishop and Richard Steiger. I can recommend this <strong><a href="http://channel9.msdn.com/Shows/Going+Deep/Hewitt-Meijer-and-Szyperski-The-Actor-Model-everything-you-wanted-to-know-but-were-afraid-to-ask">video</a></strong> in which Carl Hewitt explains the Actor Model 39 years after its initial inception. Be warned of Erik Meijers vibrant shirt, you may want to dial down the color saturation of your screen ;-) Other than that, I found this video really helpful in getting a better understanding of the subject.</p>

<p>Let&#8217;s have a look at the source code. The Twitter client establishes a connection to the Twitter streaming endpoint using the <strong><a href="http://www.playframework.com/documentation/2.1.3/ScalaWS">Play WS API</a></strong>. This connection stays open indefinitely. The remote side then delivers new tweets in byte array chunks whenever a match for the specified set of topics has been tweeted. This set of topics is passed in via a query string parameter (see <strong>start()</strong> function). The URL for starting a streaming API client has the following format:</p>

<p><small><strong>https://stream.twitter.com/1.1/statuses/filter.json?track=angularjs,playframework,elasticsearch</strong></small></p>

<figure class='code'><figcaption><span>WS Connection</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Starts new WS connection to Twitter Streaming API. Twitter disconnects the previous one automatically. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Starting client for topics &quot;</span> <span class="o">+</span> <span class="n">topics</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="n">twitterURL</span> <span class="o">+</span> <span class="n">topics</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;%2C&quot;</span><span class="o">).</span><span class="n">replace</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">,</span> <span class="s">&quot;%20&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">withTimeout</span><span class="o">(-</span><span class="mi">1</span><span class="o">).</span><span class="n">sign</span><span class="o">(</span><span class="nc">OAuthCalculator</span><span class="o">(</span><span class="nc">Conf</span><span class="o">.</span><span class="n">consumerKey</span><span class="o">,</span> <span class="nc">Conf</span><span class="o">.</span><span class="n">accessToken</span><span class="o">)).</span><span class="n">get</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="n">tweetIteratee</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The supervisor monitors the connection through TweetReceived messages it receives for each tweet and that indicate when the last tweet was received. CheckStatus messages are sent to the supervisor at regular intervals and prompt it to check when the last tweet was received. If the time span is too long, the supervisor will treat the connection as dead and establish a new one.</p>

<figure class='code'><figcaption><span>Connection Supervisor</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Actor taking care of monitoring the WS connection */</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Supervisor</span><span class="o">(</span><span class="n">eventStream</span><span class="k">:</span> <span class="kt">akka.event.EventStream</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">lastTweetReceived</span> <span class="k">=</span> <span class="mi">0L</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">lastBackOff</span> <span class="k">=</span> <span class="mi">0L</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Receives control messages for starting / restarting supervised client and adding or removing topics */</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">AddTopic</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="n">topics</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">RemoveTopic</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">topics</span><span class="o">.</span><span class="n">remove</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span> <span class="n">start</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">CheckStatus</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">lastTweetReceived</span> <span class="o">&gt;</span> <span class="n">retryInterval</span> <span class="o">&amp;&amp;</span> <span class="n">now</span> <span class="o">-</span> <span class="n">lastBackOff</span> <span class="o">&gt;</span> <span class="n">backOffInterval</span><span class="o">)</span> <span class="n">start</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">BackOff</span> <span class="k">=&gt;</span> <span class="n">lastBackOff</span> <span class="k">=</span> <span class="n">now</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">TweetReceived</span> <span class="k">=&gt;</span> <span class="n">lastTweetReceived</span> <span class="k">=</span> <span class="n">now</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The WS client receives tweets as byte array chunk and passes them to the TweetIteratee function.</p>

<figure class='code'><figcaption><span>Tweet Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Iteratee for processing each chunk from Twitter stream of Tweets. Parses Json chunks </span>
</span><span class='line'><span class="cm">    * as Tweet instances and publishes them to eventStream. */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">chunk</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">chunk</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">supervisor</span> <span class="o">!</span> <span class="nc">TweetReceived</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">chunkString</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="s">&quot;Easy there, Turbo. Too many requests recently. Enhance your calm.&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">supervisor</span> <span class="o">!</span> <span class="nc">BackOff</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>      <span class="o">(</span><span class="n">json</span> <span class="o">\</span> <span class="s">&quot;id_str&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">map</span> <span class="o">{</span> <span class="n">id</span> <span class="k">=&gt;</span> <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticTweetURL</span> <span class="o">+</span> <span class="n">id</span><span class="o">).</span><span class="n">put</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">matchAndPush</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The TweetIteratee function once again uses an asynchronous <strong><a href="http://www.playframework.com/documentation/2.1.3/ScalaWS">WS client</a></strong> to insert the <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> representation of the tweet into the ElasticSearch index. It then calls the matchAndPush function with the tweet as a JsValue. It also checks if Twitter finds that you have been calling the Streaming API too often, which has happened to me during the development process, most likely due to some mistakes on my part. In that case the chunk coming in through the open connection to Twitter contained the &#8220;Easy there, Turbo…&#8221; string you will find in the code above. I found that the best way to deal with that was to implement a backoff strategy, which is initiated by sending a BackOff message to the Supervisor actor. The receive method of the actor then performs pattern matching on incoming messages. In the case of receiving a BackOff case object, it will set the lastBackOff timestamp, keeping it from reconnecting until the backOffInterval has passed (see CheckStatus in the earlier code block).</p>

<figure class='code'><figcaption><span>Matching Tweets with Queries</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Takes JSON and matches it with percolation queries in ElasticSearch</span>
</span><span class='line'><span class="cm">    * @param json JsValue to match against </span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">matchAndPush</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;doc&quot;</span> <span class="o">-&gt;</span> <span class="n">json</span><span class="o">)).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">res</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;matches&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]].</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">m</span> <span class="k">=&gt;</span> <span class="n">jsonTweetsChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Matches</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">HashSet</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">++</span> <span class="n">m</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MatchAndPush then matches the tweet with pre-registered queries by POSTing it to the percolation query endpoint of ElasticSearch, which returns a list of the matched query IDs. The query IDs are hashes of the query string itself. That way each query will only be inserted once instead of individually for every client. The tweet is then combined with the query IDs for matching searches and pushed into the tweets channel of Concurrent.broadcast. The controller action responsible for streaming tweets to web clients will then attach an Emuratee / Iteratee chain which determines if the tweet is to be relayed to a particular client or not, depending on the hash of the search string.</p>

<h3>Controller</h3>

<p>Now let&#8217;s have a look at the controller of the application which serves:</p>

<ul>
<li>the main page</li>
<li>previous tweets that match a search</li>
<li>a <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> stream with future matches for the query.</li>
</ul>


<p>The endpoints for these actions are defined in the routes file:</p>

<figure class='code'><figcaption><span>Application Routes</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/conf/routes'>routes </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>GET        /                     controllers.BirdWatch.index
</span><span class='line'>GET        /tweetFeed            controllers.BirdWatch.tweetFeed(q: String ?= &quot;*&quot;)
</span><span class='line'>POST       /tweets/search        controllers.BirdWatch.search
</span></code></pre></td></tr></table></div></figure>


<p>Here is an overview of the controller actions:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/controller.png" title="image" alt="images"></p>

<p>Let&#8217;s start with code for the <strong>index</strong> action which serves the main page. The HTML comes from a rendered view, which in this case is almost entirely plain HTML, except that the some configuration parameters for Google Analytics are inserted here. This has the advantage that the instance specific configuration can be kept in the application.conf file.</p>

<figure class='code'><figcaption><span>Index Action</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller action serving single page application */</span>
</span><span class='line'><span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Conf</span><span class="o">.</span><span class="n">getOrEmpty</span><span class="o">(</span><span class="s">&quot;ga.hostname&quot;</span><span class="o">),</span> <span class="nc">Conf</span><span class="o">.</span><span class="n">getOrEmpty</span><span class="o">(</span><span class="s">&quot;ga.domain&quot;</span><span class="o">),</span> <span class="nc">Conf</span><span class="o">.</span><span class="n">getOrEmpty</span><span class="o">(</span><span class="s">&quot;ga.id&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>search</strong> action serves search results from <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>. The search itself is POSTed in <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> format and passed straight through to ElasticSearch. The WS client is used to make a request to a local instance of <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>. The future response to this request is then mapped into the response of the search action. The <strong>search</strong> controller action is really only a proxy for development purposes. My <strong><a href="http://birdwatch.matthiasnehlsen.com">deployed instance</a></strong> of the application has <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> running in front of it, which for this route directly talks to ElasticSearch instead of keeping the <strong><a href="http://en.wikipedia.org/wiki/Garbage_collection">garbage collection</a></strong> mechanism of the <strong><a href="http://en.wikipedia.org/wiki/Java_virtual_machine">JVM</a></strong> busy with unprocessed data. We will have a look at <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> configuration further down in this article.</p>

<figure class='code'><figcaption><span>Search Action</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller for serving main BirdWatch page including the SSE connection */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">BirdWatch</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** Controller Action serving Tweets as JSON going backwards in time. Query passed in as JSON */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">search</span> <span class="k">=</span>  <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">url</span> <span class="k">=</span>  <span class="n">elasticTweetURL</span> <span class="o">+</span> <span class="s">&quot;_search&quot;</span>
</span><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="n">body</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span> <span class="n">res</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&#8217;ll get to the most complicated part: serving the live stream for a search in the <strong>tweetFeed</strong> action. This controller makes use of the <strong><a href="http://www.playframework.com/documentation/2.1.3/Iteratees">Iteratee</a></strong> library from Play Framework. I wrote an <strong><a href="http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence/">article about Iteratees</a></strong> a while back. I haven&#8217;t read it in a while, it may need some revision but you might still find it useful. It’s rather long, but then this article isn’t exactly what you would call short either.</p>

<p>The client establishes a connection to the streaming endpoint served by the <strong>tweetFeed</strong> action, which then delivers the results - not all at once, but in chunks whenever new data is available for this request. This data originates from the <strong><a href="http://www.playframework.com/documentation/2.2.0/api/scala/index.html#play.api.libs.iteratee.Enumerator">Enumerator</a></strong> from the <strong><a href="http://www.playframework.com/documentation/2.2.0/api/scala/index.html#play.api.libs.iteratee.Concurrent$">Concurrent.broadcast</a></strong> object (provided by Play Framework) which we have seen above. <strong><a href="http://www.playframework.com/documentation/2.2.0/api/scala/index.html#play.api.libs.iteratee.Iteratee">Iteratees</a></strong> can attach to this Enumerator. In essence, Iteratees are functions that define what to do with each new piece of information. Enumeratees are transformer functions that can be placed in between the Enumerator as the source and the Iteratee as the final sink of this information. As to the streaming action, the <strong>Ok.feed</strong> itself represents the Iteratee, doing nothing more than delivering each chunk to the connected client. Iteratees can also hold an accumulator for the current state of an ongoing computation, in which case the individual Iteratee becomes the representation of a step of an ongoing computation, but that feature of Iteratees is not used in this use case.</p>

<p>Enumeratees are then placed between the source and the sink, forming a processing chain. This is the most interesting part of the code:</p>

<figure class='code'><figcaption><span>Streaming Action and Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span> <span class="o">+</span> <span class="n">queryID</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">query</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">res</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">.</span><span class="n">feed</span><span class="o">(</span><span class="nc">TwitterClient</span><span class="o">.</span><span class="n">jsonTweetsOut</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesFilter</span><span class="o">(</span><span class="n">queryID</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesToJson</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">connDeathWatch</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">)</span>  <span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the action we establish a connection to ElasticSearch by posting the query as a percolation query (see <strong>ElasticSearch section</strong> below). The ID of the query is determined by hashing the entire query using SHA-256. That way repeated queries always have the same ID within ElasticSearch. Once that request is complete, we respond to the client with a feed that contains the following processing chain:</p>

<ul>
<li>Tweets with matched query IDs originate from the TwitterClient.jsonTweetsOut Enumerator.</li>
<li>The matchesFilter Enumeratee checks if the matches set contains the query hash. If not, no further actions will take place.</li>
<li>A buffer ensures that the application is not held up if the sink is too slow, for example, when a client connection suffers from network congestion. Tweets will be dropped when the buffer is full, which won&#8217;t be much of an issue because if your connection is so slow, you probably don&#8217;t want to use this application in the first place.</li>
<li>Matches are converted to JSON</li>
<li>The connection uptime is monitored. In this Enumeratee the duration of the connection will be logged.</li>
<li>The data is converted to comply with the <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> specifications.</li>
</ul>


<p>Below, you&#8217;ll find the entire code related to the streaming endpoint. The Enumeratees are adapters between the Enumerator from the TwitterClient where the Tweets originate and the chunked response we pass back to the client. They can either transform elements passing through the chain from one type to another, filter them based on a predicate function or buffer them.</p>

<figure class='code'><figcaption><span>Streaming Action and Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller for serving main BirdWatch page including the SSE connection */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">BirdWatch</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** calculates milliseconds between passed in DateTime and time of function call */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">duration</span><span class="o">(</span><span class="n">since</span><span class="k">:</span> <span class="kt">DateTime</span><span class="o">)</span> <span class="k">=</span> <span class="nc">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">getMillis</span> <span class="o">-</span> <span class="n">since</span><span class="o">.</span><span class="n">getMillis</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Enumeratee for detecting disconnect of SSE stream */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">connDeathWatch</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">Request</span><span class="o">[</span><span class="kt">AnyContent</span><span class="o">],</span> <span class="n">since</span><span class="k">:</span> <span class="kt">DateTime</span><span class="o">)</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">onIterateeDone</span> <span class="o">{</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Logger</span><span class="o">.</span><span class="n">logRequest</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="s">&quot;SSE disconnected&quot;</span><span class="o">,</span> <span class="mi">200</span><span class="o">,</span> <span class="n">duration</span><span class="o">(</span><span class="n">since</span><span class="o">))}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Filtering Enumeratee applying containsAll function */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">matchesFilter</span><span class="o">(</span><span class="n">qID</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">filter</span><span class="o">[</span><span class="kt">Matches</span><span class="o">]</span> <span class="o">{</span> <span class="n">pm</span> <span class="k">=&gt;</span> <span class="n">pm</span><span class="o">.</span><span class="n">matches</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">qID</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Enumeratee: TweetMatches to Tweet adapter */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">matchesToJson</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">Matches</span>, <span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">[</span><span class="kt">Matches</span><span class="o">]</span> <span class="o">{</span> <span class="n">pm</span> <span class="k">=&gt;</span> <span class="n">pm</span><span class="o">.</span><span class="n">json</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Serves Tweets as Server Sent Events over HTTP connection TODO: change to POST */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">tweetFeed</span><span class="o">(</span><span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Logger</span><span class="o">.</span><span class="n">logRequest</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="s">&quot;/tweetFeed?q=&quot;</span> <span class="o">+</span> <span class="n">q</span><span class="o">,</span> <span class="mi">200</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">query</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;query&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;query_string&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;default_field&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;text&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;default_operator&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;AND&quot;</span><span class="o">,</span> <span class="s">&quot;query&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">q</span> <span class="o">+</span> <span class="s">&quot;) AND lang:en&quot;</span><span class="o">))),</span>
</span><span class='line'>        <span class="s">&quot;timestamp&quot;</span> <span class="o">-&gt;</span> <span class="n">dtFormat</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">))</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/** identify queries by hash, only store unique queries once */</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">md</span> <span class="k">=</span> <span class="nc">MessageDigest</span><span class="o">.</span><span class="n">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-256&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">queryID</span> <span class="k">=</span> <span class="n">md</span><span class="o">.</span><span class="n">digest</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="n">getBytes</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="s">&quot;%02x&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="k">_</span><span class="o">)).</span><span class="n">mkString</span>
</span><span class='line'>
</span><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span> <span class="o">+</span> <span class="n">queryID</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">query</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">res</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">.</span><span class="n">feed</span><span class="o">(</span><span class="nc">TwitterClient</span><span class="o">.</span><span class="n">jsonTweetsOut</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesFilter</span><span class="o">(</span><span class="n">queryID</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesToJson</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">connDeathWatch</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">)</span>  <span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AngularJS Client</h3>

<p><strong><a href="http://angularjs.org">AngularJS</a></strong> is a modern approach to <strong><a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Applications</a></strong>. It is said to teach the browser new tricks. It also brings the <strong>fun</strong> back to developing Single Page applications. <strong>Seriously</strong>. So what is so special about it? It&#8217;s approach is a declarative one. This means that we declare how UI elements are supposed to look like depending on the application state, but we do not have to concern ourselves with how exactly this is achieved. This might not sound like much at first, but it really does make all the difference. No more direct DOM manipulation with jQuery or the like. Instead we create new elements as so called directives that know how to lay themselves out on the page. These elements are then used in the page markup, as if they existed all along in HTML. We will look at that in more detail for the TweetCard directive, which shows a simple custom directive.</p>

<p>Here&#8217;s the overall architecture of the AngularJS application:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_angular1.png" title="image" alt="images"></p>

<p>There are singleton services in the application that only get instantiated once for the lifecycle of the application. First there is the tweets service which takes care of the communication with the server side. It pre-loads existing tweets and also establishes a <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> connection for future search results. This service allows the registration of a callback function which is called with search results, no matter if from previous tweets or from the SSE connection.</p>

<figure class='code'><figcaption><span>Tweets Service in AngularJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/services/tweets.js'>tweets.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** tweets service, load previous tweets and receives subsequent live tweets for given query */</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;tweets&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">utils</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetFeed</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetsCache</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** callback function to perform when new tweet(s) arrive */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">onNewTweets</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">registerCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span> <span class="nx">onNewTweets</span> <span class="o">=</span> <span class="nx">callback</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Load previous Tweets, paginated. Recursive function, calls itself with the next chunk to load until</span>
</span><span class='line'><span class="cm">     *  eventually n, the remaining tweets to load, is not larger than 0 any longer. guarantees at least n hits</span>
</span><span class='line'><span class="cm">     *  if available, potentially more if (n % chunkSize != 0) */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">loadPrev</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$http</span><span class="p">({</span><span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">buildQuery</span><span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">offset</span><span class="p">),</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/tweets/search&quot;</span><span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">onNewTweets</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">_source</span><span class="p">;</span> <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">));</span>
</span><span class='line'>                    <span class="nx">loadPrev</span><span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">n</span> <span class="o">-</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">offset</span> <span class="o">+</span> <span class="nx">chunkSize</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Start Listening for Tweets with given query */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">queryString</span><span class="p">,</span> <span class="nx">prevSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">tweetFeed</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">searchString</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">queryString</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">searchString</span> <span class="o">=</span> <span class="nx">queryString</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="nx">searchString</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** handle incoming tweets: add to tweetsCache array, run callback at most every second */</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cachedCallback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">tweetsCache</span> <span class="o">=</span> <span class="nx">tweetsCache</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">)));</span>
</span><span class='line'>            <span class="nx">_</span><span class="p">.</span><span class="nx">throttle</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>        <span class="c1">// throttle because insertion too expensive on high traffic searches</span>
</span><span class='line'>                <span class="nx">onNewTweets</span><span class="p">(</span><span class="nx">tweetsCache</span><span class="p">);</span>  <span class="c1">// run callback with all items in cache</span>
</span><span class='line'>                <span class="nx">tweetsCache</span> <span class="o">=</span> <span class="p">[];</span>          <span class="c1">// then empty cache.</span>
</span><span class='line'>            <span class="p">},</span> <span class="mi">1000</span><span class="p">)();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">tweetFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/tweetFeed?q=&quot;</span> <span class="o">+</span> <span class="nx">searchString</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">tweetFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nx">cachedCallback</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">loadPrev</span><span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">prevSize</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// load previous tweets in chunks of size 500</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">search</span><span class="o">:</span> <span class="nx">search</span><span class="p">,</span> <span class="nx">registerCallback</span><span class="o">:</span> <span class="nx">registerCallback</span><span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only other components that knows anything about this service is controller which provides the callback function that specifies what needs to happen with each new tweet / array of tweets. This allows for a proper decoupling of the services.</p>

<figure class='code'><figcaption><span>AngularJS Controller</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Controllers */</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.controllers&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">,</span> <span class="s1">&#39;charts.barchart&#39;</span><span class="p">,</span> <span class="s1">&#39;charts.wordcloud&#39;</span><span class="p">,</span> <span class="s1">&#39;ui.bootstrap&#39;</span><span class="p">]).</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;BirdWatchCtrl&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">utils</span><span class="p">,</span> <span class="nx">barchart</span><span class="p">,</span> <span class="nx">wordcloud</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">wordCount</span><span class="p">,</span> <span class="nx">cf</span><span class="p">,</span> <span class="nx">tweets</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSizeOpts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;100&#39;</span><span class="p">,</span> <span class="s1">&#39;500&#39;</span><span class="p">,</span> <span class="s1">&#39;1000&#39;</span><span class="p">,</span> <span class="s1">&#39;2000&#39;</span><span class="p">,</span> <span class="s1">&#39;5000&#39;</span><span class="p">,</span> <span class="s1">&#39;10000&#39;</span><span class="p">,</span> <span class="s1">&#39;20000&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSize</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSizeOpts</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">pageSizeOpts</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">pageSize</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">pageSizeOpts</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">toggleLive</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>                             <span class="c1">// freezes view when switched off by having the</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span><span class="p">)</span> <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">freeze</span><span class="p">();</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">unfreeze</span><span class="p">();</span> <span class="p">}</span> <span class="c1">// crossfilter limit results to tweets older</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span> <span class="o">=</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span><span class="p">;</span>                               <span class="c1">// than the latest at the time of calling freeze()</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span> <span class="o">=</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">().</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">legalStuff</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">legalStuff</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">cf</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">sortModel</span> <span class="o">=</span> <span class="s1">&#39;latest&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">words</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** Add a string to the search bar when for example clicking on a chart element */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">addSearchString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">searchString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span> <span class="o">=</span> <span class="nx">searchString</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">searchString</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span> <span class="o">+=</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">searchString</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>  <span class="c1">// Term should appear immediately, not only after search returns</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** update UI every ten seconds to keep time ago for tweets accurate */</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">onTimeout</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">updateTimeout</span> <span class="o">=</span> <span class="nx">$timeout</span><span class="p">(</span><span class="nx">onTimeout</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">updateTimeout</span> <span class="o">=</span> <span class="nx">onTimeout</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** actions to perform when new tweets are available through the streaming connection */</span>
</span><span class='line'>        <span class="nx">tweets</span><span class="p">.</span><span class="nx">registerCallback</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">words</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">.</span><span class="nx">getWords</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">cf</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** Search for Tweets with given query, run on startup */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span> <span class="o">=</span> <span class="nx">wordCount</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">tweets</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSize</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">cf</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller provides the $scope for the associated view, which is written as HTML, with some custom AngularJS code. The $scope variables are fairly straighforward, AngularJS two-way binds items in the view to the $scope so that when the value in either changes, the other updates as well. An example of this two-way data binding is the search text field. The binding to $scope.searchText is defined in the view:</p>

<figure class='code'><figcaption><span>Main View</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="c">&lt;!-- Search field in NavBar --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-form pull-left col-lg-6 input-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;search()&quot;</span> <span class="na">class=</span><span class="s">&quot;input-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;searchText&quot;</span>
</span><span class='line'>                    <span class="na">placeholder=</span><span class="s">&quot;Example search: java (job OR jobs OR hiring)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;input-group-btn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;search()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-search&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with this binding in place, modifying the content of the search field mutates $scope.searchText and vice versa. Changing the $scope.searchText programmatically would update the content of the search field as well. There is no need to concern ourselves with complicated ways of manipulating the DOM directly. This is probably the main reason why code in AngularJS tends to be much shorter than in more traditional approaches.</p>

<p>We briefly talked about directives above. Let&#8217;s have a look at one simple directive to get a better understanding, the TweetCard directive. A directive can either be an entirely new element or apply to a class. In this case we are using the class approach. Any element on the page that has class of <strong>tweetCard</strong> will be rendered by AngularJS according to the code in the directive. In this particular case the code is very simple:</p>

<figure class='code'><figcaption><span>TweetCard Directive</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/directives.js'>directives.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.directives&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;charts.barchart&#39;</span><span class="p">,</span> <span class="s1">&#39;charts.wordcloud&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="cm">/** Tweet Card Layout (with external template)*/</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;tweetCard&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span> <span class="nx">tweet</span><span class="o">:</span> <span class="s2">&quot;=tweet&quot;</span> <span class="p">},</span>
</span><span class='line'>            <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;/assets/templates/tweetCard.tpl.html&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>All that happens here is a $scope variable named tweet is assigned, which becomes available for two-way data binding inside the template code:</p>

<figure class='code'><figcaption><span>TweetCard Template Markup</span><a href='http://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/public/templates/tweetCard.tpl.html'>tweetCard.tpl.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.twitter.com/&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;thumbnail&quot;</span> <span class="na">src=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">tooltip-placement=</span><span class="s">&quot;bottom&quot;</span> <span class="na">tooltip=</span><span class="s">&quot;click to visit Twitter profile&quot;</span>
</span><span class='line'>       <span class="na">href=</span><span class="s">&quot;http://www.twitter.com/&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;username&quot;</span> <span class="na">ng-bind=</span><span class="s">&quot;tweet.user.name&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;username_screen&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;#64;</span><span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pull-right timeInterval&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweettext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-bind-html-unsafe=</span><span class="s">&quot;tweet.htmlText&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pull-left timeInterval&quot;</span><span class="nt">&gt;</span> followers<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;tweet.retweeted_status.retweet_count&quot;</span> <span class="na">class=</span><span class="s">&quot;pull-right timeInterval&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             retweets<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;tweet.retweet_count&quot;</span> <span class="na">class=</span><span class="s">&quot;pull-right timeInterval&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             retweets<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now whenever the underlying data representation in the model changes, the rendering of the tweetCard changes as well thanks to two-way data binding. The more complicated markup of the tweetCard is encapsulated in the template, using the directive from the view becomes simple and concise:</p>

<figure class='code'><figcaption><span>Repeated Tweet Directive in View</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweetCard&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;tweet in cf.tweetPage(currentPage, pageSize, sortModel)&quot;</span>
</span><span class='line'>        <span class="na">data-tweet=</span><span class="s">&quot;tweet&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above a div of class tweetCard is declared with data-ng-repeat, which means that the element is repeated for each element in the result of the cf.tweetPage function. For each individual item (for <strong>tweet</strong> in cf.tweetPage), data-tweet is assigned with the item. It could also have been data-ng-repeat=&#8221;item in …&#8221; data-tweet=&#8221;item&#8221;, the names correspond here.</p>

<p>Here&#8217;s how the $scope of an individual tweetCard element looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_tweetcard_scope.png" title="image" alt="images"></p>

<p>Above we can see that the $scope of the TweetCard contains the previously assigned tweet object which becomes available to the template code for two-way data binding. The two-way data binding can be seen in action here when sorting the tweets by retweet count. For popular tweets that get retweeted a lot we can grab some popcorn and watch the visual representation of the tweet change in the browser based on data model changes.</p>

<h3>Visualizations using D3.js</h3>

<p><strong><a href="http://d3js.org">D3.js</a></strong> is a JavaScript library for data-driven visualizations that render SVG in the browser. There are excellent tutorials out there, the project homepage is a great place to start. I won&#8217;t go into much detail here, but for a better understanding of what is happening, here is some D3.js code from this application together with the resulting SVG in the DOM:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_d3js1.png" title="image" alt="images"></p>

<p>What we see above on the left side is that <strong>rect</strong>s (rectangles) get rendered depending on the data that is provided to the D3 code on the right side. This is why the library is said to be data-driven, the data drives what gets rendered on the page.</p>

<h3>Data Analysis using crossfilter.js</h3>

<p><strong><a href="http://square.github.io/crossfilter/">Crossfilter</a></strong> is a JavaScript library for exploring large datasets in the browser. This is achieved by defining dimensions on which to dissect the data. A dimension is a kind of sorted index where the indexing function is provided in the dimension constructor:</p>

<figure class='code'><figcaption><span>Crossfilter Service</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/services/crossfilter.js'>crossfilter.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// crossfilter service</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;cf&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// crossfilter object: browser side analytics library, holds array type data (w/incremental updates).</span>
</span><span class='line'>    <span class="c1">// dimensions are fast queries on data, e.g. view sorted by followers_count or retweet_count of the original message</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">([]);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetIdDim</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">followersDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">followers_count</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetsDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalIdDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Higher-order function, returns a function that rounds time down. Interval s is specified in seconds.</span>
</span><span class='line'>    <span class="c1">// Example: returned function makes Jan 1, 2012, 16:45:00 out of Jan 1, 2012, 16:45:55 when interval is 60s</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">dateRound</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">s</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">created_at</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">byMinGrp</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span>      <span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">by15MinGrp</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span>   <span class="mi">15</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">byHourGrp</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span>   <span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">by6HourGrp</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span> <span class="mi">6</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">byDayGrp</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span><span class="mi">24</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">timeseries</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">if</span> <span class="p">(</span><span class="nx">byMinGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">)</span>   <span class="p">{</span> <span class="k">return</span> <span class="nx">byMinGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">by15MinGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">48</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">by15MinGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">byHourGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">96</span><span class="p">)</span>  <span class="p">{</span> <span class="k">return</span> <span class="nx">byHourGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">by6HourGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">by6HourGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>                             <span class="p">{</span> <span class="k">return</span> <span class="nx">byDayGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// freeze imposes filter on crossfilter that only shows anything older than and including the latest</span>
</span><span class='line'>    <span class="c1">// tweet at the time of calling freeze. Accordingly unfreeze clears the filter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">freeze</span>    <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">]);</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">unfreeze</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">add</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>     <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="p">};</span>                            <span class="c1">// add new items, as array</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">clear</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">};</span>                             <span class="c1">// reset crossfilter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">noItems</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">();</span> <span class="p">};</span>                        <span class="c1">// crossfilter size total</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">numPages</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">/</span> <span class="nx">pageSize</span><span class="p">);</span> <span class="p">};</span>  <span class="c1">// number of pages</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// predicates</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweeted</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mapper functions</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalTweet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">);</span> <span class="p">};</span>   <span class="c1">// returns original tweet</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetId</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">};</span>                                    <span class="c1">// returns tweet id</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetCount</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">retweeted</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span> <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">maxRetweets</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">retweet_count</span> <span class="o">=</span> <span class="nx">retweetCount</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">top</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}));</span>
</span><span class='line'>        <span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// deliver tweets for current page. fetches all tweets up to the current page,</span>
</span><span class='line'>    <span class="c1">// throws tweets for previous pages away.</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">tweetPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentPage</span><span class="p">,</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">fetchTweets</span><span class="p">(</span><span class="nx">currentPage</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">),</span> <span class="p">(</span><span class="nx">currentPage</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// fetch tweets from crossfilter dimension associated with particular sort order up to the current page,</span>
</span><span class='line'>    <span class="c1">// potentially mapped and filtered</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fetchTweets</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span>      <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;latest&quot;</span><span class="p">)</span>    <span class="p">{</span> <span class="k">return</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">);</span> <span class="p">}</span>    <span class="c1">// latest: desc order of tweets by ID</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;followers&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">followersDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">maxRetweets</span><span class="p">);</span> <span class="p">}</span> <span class="c1">// desc order of tweets by followers</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;retweets&quot;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// descending order of tweets by total retweets of original message</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">first</span><span class="p">(</span>               <span class="c1">// filtered to be unique, would appear for each retweet in window otherwise</span>
</span><span class='line'>              <span class="nx">_</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">retweetsDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">retweeted</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">originalTweet</span><span class="p">),</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">tweetId</span><span class="p">),</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[];</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple example is the <strong>followersDim</strong> dimension. The function provided does nothing but return the number of followers of the author of the Tweet. The dimension then provides access to the data set sorted by the followers count.</p>

<p>Dimensions can also be grouped, as can be seen with the different timing dimensions. In order to get all Tweets for a particular time span of say the hour between 4pm and 5pm of a particular day, the creation time for each Tweet is rounded down to the nearest hour and then the dimension is grouped by the hours. This powers the &#8216;Activity by Time Unit&#8217; chart in which the number of Tweets for the current search is broken down into time units of varying length, depending on the total time span.</p>

<h3>ElasticSearch</h3>

<p><strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong> is a distributed open source search engine. The more obvious feature is that it provides full-text search over our entire dataset, which by the time of the writing of this article consists of about ten million tweets.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_elastic1.png" title="image" alt="images"></p>

<p>The less obvious but very useful feature is that of the so called <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html">Percolation Queries</a></strong>. These are kind of reverse searches that allow the registration of an observing real-time search in the percolation index. Each new tweet is then presented to the percolation endpoint of ElasticSearch to determine which of the registered searches match on the new item. This allows us to notify the web clients on each new match for the current search (also see the controller description on the server side above). The IDs of the queries could be generated randomly. I have chosen a different approach here and use SHA-256 hashes of the search text instead. That way each unique query (e.g. &#8220;shutdown beer&#8221;) only ever gets inserted (and matched against) once.</p>

<h3>nginx Proxy</h3>

<p>In a production environment it might make sense to not expose applications to the outside world directly but instead have a reverse proxy in between which responds to all requests and routes the requests to the proper IP-address / port internally.</p>

<p>This can be useful for the following reasons:</p>

<ul>
<li>Load Balancing. The reverse proxy can talk to multiple server backends and distribute the load among them.</li>
<li>Static file serving. Some implementations can serve static files much faster with less overhead than a solution based on the JVM.</li>
<li>SSL encryption. Not all application servers support SSL themselved, but all we need then is a proxy that does.</li>
<li>Using multiple server backend that run on different ports.</li>
<li>Serving multiple domain names.</li>
</ul>


<p>I am using <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> as a reverse proxy for two instances of the application on the same server, one for tech-related stuff <strong><a href="http://birdwatch.matthiasnehlsen.com">birdwatch.matthiasnehlsen.com</a></strong> and the other for things related to US politics <strong><a href="http://beltway.matthiasnehlsen.com">beltway.matthiasnehlsen.com</a></strong>. That works really well, I have found nginx to be rock solid and very fast.</p>

<p>Here is the configuration file:</p>

<figure class='code'><figcaption><span>nginx config nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user www-data;
</span><span class='line'>worker_processes 4;
</span><span class='line'>pid /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 15000;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  proxy_buffering    off;
</span><span class='line'>  proxy_set_header   X-Real-IP $remote_addr;
</span><span class='line'>  proxy_set_header   X-Scheme $scheme;
</span><span class='line'>  proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>  proxy_set_header   Host $http_host;
</span><span class='line'>
</span><span class='line'>  upstream elastic {
</span><span class='line'>    server 127.0.0.1:9200;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen               80;
</span><span class='line'>    keepalive_timeout    70;
</span><span class='line'>    server_name birdwatch.matthiasnehlsen.com;
</span><span class='line'>
</span><span class='line'>    location /tweets/search {
</span><span class='line'>      proxy_pass  http://elastic/birdwatch_tech/tweets/_search;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>      proxy_pass  http://127.0.0.1:9000;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen               80;
</span><span class='line'>    keepalive_timeout    70;
</span><span class='line'>    server_name beltway.matthiasnehlsen.com;
</span><span class='line'>
</span><span class='line'>    location /tweets/search {
</span><span class='line'>      proxy_pass  http://elastic/birdwatch_beltway/tweets/_search;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>      proxy_pass  http://127.0.0.1:9001;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Note the two server blocks in the configuration above for the two separate domains, each of which maps to one backend Play application. It would also be possible to have multiple backends for the same domain name and then let nginx balance the load between the multiple backends. There is only one shared ElasticSearch backend for the two domains, but /tweets/search maps to different indices depending on the domain name. In a development configuration this endpoint would be handled directly by the Play application, but for production I let nginx handle this transparently.</p>

<p>Okay, this concludes the explanation of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> toy project. Hope you enjoyed this rather long article. Please let me know if there is any need for clarification.</p>

<p>Cheers,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch v0.2: Tweet Stream Analysis with AngularJS, ElasticSearch and Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/08/13/birdwatch-angularjs-elasticsearch-play/"/>
    <updated>2013-08-13T10:08:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/08/13/birdwatch-angularjs-elasticsearch-play</id>
    <content type="html"><![CDATA[<p>I am happy to get a huge update of the BirdWatch application out of the way. The changes are a lot more than what I would normally have wanted to work in for a single article, but then again there is enough interesting stuff going on in this new version that calls for multiple blog articles. Initially this application was only meant to be an exercise in streaming information to web clients. But along the way I noticed that this application can be useful and interesting beyond being a mere learning exercise. Let me explain what it has evolved to:</p>

<!-- more -->


<p>BirdWatch is an open-source real-time tweet search engine for a defined area of interest, and  I am running a <a target="_blank" href="http://birdwatch.matthiasnehlsen.com"><strong>public instance</strong></a> for software engineering related tweets. The application subscribes to all tweets containing at least one out of a set of terms (such as AngularJS, Java, JavaScript, MongoDB, Python, Scala, …). The application receives all those tweets immediately through the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong>. The limitation here is that the delivery is capped at one percent of all tweets. This is plenty for a well defined area of interest, considering that Twitter processes more than <strong><a href="http://articles.washingtonpost.com/2013-03-21/business/37889387_1_tweets-jack-dorsey-twitter">400 million tweets per day</a></strong>.</p>

<p>Here is how it looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/130812-screenshot.png" title="image" alt="images"></p>

<p>As you can see above, there is now a search bar which allows you to narrow down the selection of tweets the application reasons about. Any search result is bookmarkable, making it easy not only to revisit the search at a later time but also to pass around the link. A link represents the result for the query at the time the link is opened, not at the time it is bookmarked. The application will then load a user-selectable amount of recent tweets matching the search criteria plus any new match for as long as the browser window is open.</p>

<p>Here are some examples.</p>

<p>You&#8217;re a Java developer and you&#8217;re looking for a new job? Try this search: <a target="_blank" href="http://birdwatch.matthiasnehlsen.com/#/(job%20OR%20hiring)%20java"><strong>java (job OR hiring)</strong></a></p>

<p>You want to limit your job search to London? No problem. Here you go: <a target="_blank" href="http://birdwatch.matthiasnehlsen.com/#/(job%20OR%20hiring)%20java"><strong>java (job OR hiring) london</strong></a></p>

<p>You&#8217;re interested in tweets about Python the language but not about <a target="_blank" href="http://www.youtube.com/watch?v=kQFKtI6gn9Y&list=TLbNXOyfwTL14"><strong>Monty Python</strong></a>: <a target="_blank" href="http://birdwatch.matthiasnehlsen.com/#/python%20-monty"><strong>python -monty</strong></a></p>

<p>Well, you get the idea. <strong>AND</strong> is the standard operator, it is applied unless <strong>OR</strong> is specifically used between two terms.</p>

<p>You can download the application and run it for a different area of your choosing. Personally, I&#8217;ve been running an instance that listens to tweets related to U.S. politics, an area I have been interested in ever since I lived in Washington DC in 2009/2010. Usually I have found that a quick look at the application before  watching video podcasts of my favorite political shows would show me what is then talked about in the shows. I may decide to run the application publicly for this interest area at some point as well, but for that I want to have more sophisticated analytics and charts in place. I have plenty of ideas in that area, but for now I want to get this out instead of working on the project by myself for another couple of weeks. I am also looking for contributions here, particularly in the area of great looking and useful charts.</p>

<p>So how can this be improved in the future? A stream of tweets filtered by topic area is a rich data set; the current charts really only scratch the surface of what is possible here. I would like to visualize the most often mentioned links so that I can see at a glance, which newspaper articles and other links are most talked about. This analysis could even be weighted by how many followers the person tweeting about a link has. After all, more followers mean that more people will be exposed to the link. Also there could be some visualizations about how tweets develop over time. What are the characteristics of people retweeting something? Is it picked up by someone with many followers and then later on by many people with few followers? Or is it the other way around? Get involved, there are plenty of options on how to work with the data.</p>

<p>You can find a brief overview of the technology in the project description on <a target="_blank" href="https://github.com/matthiasn/BirdWatch"><strong>Github</strong></a>.</p>

<p>In the future I will probably write some articles that further explain different parts of the application. Let me know what you are particularly interested in.</p>

<p>Alright, this is it for today. Until next time.
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transforming Log Events into Information]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/07/09/transforming-logs-into-information/"/>
    <updated>2013-07-09T14:14:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/07/09/transforming-logs-into-information</id>
    <content type="html"><![CDATA[<p>Last week I was dealing with an odd behavior of the chat application demo I was running for <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">this article</a></strong>. The issue was timing-related and there were no actual exceptions that would have helped in identifying the problem. How are you going to even notice spikes and pauses in potentially thousands of lines in a logfile? I was upset, mostly with myself for not finding the issue earlier, and I promised myself to find a better tool. I needed a way to transform the raw logging data into useful information so I could first understand and then tackle the problem. In this article I will show what I have put together over the weekend. <strong>Part I</strong> describes the general approach and applies to any application out there, no matter what language or framework you are using. <strong>Part II</strong> describes one possible implementation of this approach using <strong><a href="http://www.playframework.com">Play Framework</a></strong>.</p>

<!-- more -->


<h3>Part I: Mining log data with Kibana and ElasticSearch</h3>

<p>I needed a way to filter events by event type and then visualize the events in a timeline, where vertical bars would indicate the number of items for a given time period. That would have made it immediately obvious that something was causing a delay in the delivery of messages to web clients.</p>

<p>I will be using <strong><a href="http://three.kibana.org">Kibana</a></strong> for this, a tool for analyzing <strong><a href="http://logstash.net">logstash</a></strong> data that is stored within <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>. Let me introduce these components quickly:</p>

<ul>
<li><p><strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong> is a really powerful open-source search engine based on <strong><a href="http://lucene.apache.org/core/">Apache Lucene</a></strong>. I have used it before and I know from experience that it works really well.</p></li>
<li><p><strong><a href="http://logstash.net">logstash</a></strong> is a tool that collects all your logs from any application and transfers them into ElasticSearch from where they can be searched and analyzed.</p></li>
<li><p><strong><a href="http://three.kibana.org">Kibana</a></strong> is a data analysis tool that makes it super simple to create your own dashboards for analyzing logstash data. The latest version is written using <strong><a href="http://angularjs.org">AngularJS</a></strong>.</p></li>
</ul>


<p>While <strong><a href="http://logstash.net">logstash</a></strong> is great for collecting and parsing logfiles and  storing them in a daily index in <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>, there is no good reason to dump the log data into a text file first and then have it parsed later. Instead we can generate <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> in the logstash format directly within an application and put it into ElasticSearch using the <strong><a href="http://www.elasticsearch.org/guide/reference/api/">REST API</a></strong>. It will then be immediately available for analysis within <strong><a href="http://three.kibana.org">Kibana</a></strong>.</p>

<p>Let&#8217;s look at this in action before going into details. We will be using a new branch of <strong><a href="https://github.com/matthiasn/sse-chat/tree/130707-kibana-demo">sse-chat</a></strong> for this. This simple chat application demo is logging the start and end time of SSE streams plus the delivery of individual messages from Romeo and Juliet, more about that <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">here</a></strong>. The data is from actual visits. For privacy reasons I am only logging country and region, not the city and most importantly not the IP address. I do believe that this will leave your privacy as a visitor uncompromised. But please let me know if you have other thoughts on the subject. You can have a look at the <strong><a href="https://github.com/matthiasn/sse-chat">source code</a></strong> if you are interested in what exactly is being logged.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/kibana.png" title="image" alt="images"></p>

<p><strong><a href="http://kibana.matthiasnehlsen.com/#/dashboard/elasticsearch/sse-chat" target="_blank">CLICK HERE</a></strong> to see a live version. The dashboard is interactive, so please play with it.</p>

<p>You can then open the <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/" target="_blank">article with the chat demo</a></strong> in another window. Your visit should show up within the refresh interval, and then again once you either close the window or refresh it.</p>

<p>Here is another dashboard, this one shows all the messages that have been delivered over SSE. This is the one that would have helped me finding the timing issues I have mentioned in the beginning:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/kibana2.png" title="image" alt="images"></p>

<p><strong><a href="http://kibana.matthiasnehlsen.com/#/dashboard/elasticsearch/sse-chat2" target="_blank">CLICK HERE</a></strong> to have a look for yourself.</p>

<p>Note that <strong><a href="http://three.kibana.org">Kibana</a></strong> comes with the tools to configure dashboards as you need them. This really only takes minutes for a simple dashboard and there is no coding involved.</p>

<p>Making this logging approach to logging work is really simple. All you need to do is have your web application generate log data in the proper format and <strong><a href="http://tools.ietf.org/html/rfc2616#section-9.5">POST</a></strong> it into the ElasticSearch index for the current day. This is how your <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> log items could look like if you want to use Kibana out of the box:</p>

<figure class='code'><figcaption><span>JSON item for SSE disconnect </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>  <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;logstash-2013.07.07&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;play&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;@source&quot;</span><span class="o">:</span><span class="s2">&quot;sse-chat&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@tags&quot;</span><span class="o">:</span><span class="p">[],</span>
</span><span class='line'>      <span class="s2">&quot;@fields&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;instanceID&quot;</span><span class="o">:</span><span class="s2">&quot;sse-chat&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;request&quot;</span><span class="o">:</span><span class="s2">&quot;GET /chatFeed/room1&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;requestID&quot;</span><span class="o">:</span><span class="mi">64</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;user-agent&quot;</span><span class="o">:</span><span class="s2">&quot;Mozilla/5.0 […]&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;httpCode&quot;</span><span class="o">:</span><span class="mi">200</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;duration_ms&quot;</span><span class="o">:</span><span class="mi">2036</span><span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;@timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2013-07-07T23:15:12.803Z&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@source_host&quot;</span><span class="o">:</span><span class="s2">&quot;mn.local&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@source_path&quot;</span><span class="o">:</span><span class="s2">&quot;GET /chatFeed/room1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@message&quot;</span><span class="o">:</span><span class="s2">&quot;SSE disconnected&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@type&quot;</span><span class="o">:</span><span class="s2">&quot;INFO&quot;</span> <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should be fairly easy to generate, with any modern web framework. Logstash uses a daily index for log items. That makes it easy to archive or purge older entries. Kibana makes this transparent, it automatically pulls in the correct indices when a query spans multiple days. Field names starting with &#8216;@&#8217; are predefined by logstash. The predefined fields would be better than textfile-based logging on their own because of the full-text search capabilities within ElasticSearch. It becomes extremely handy once you start making use of &#8216;@fields&#8217;: you can store arbitrary <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> in here and use the fields in the Kibana dashboard later. For example I am storing the geolocation data in here, in addition to data about browser and OS. It can be anything. All of the fields will become available in within Kibana, no further work necessary.</p>

<p>A major advantage of the approach described above is that you can easily integrate all your other logs as well and search them in the same tool. Please refer to the <strong><a href="http://logstash.net/docs/1.1.13/">logstash</a></strong> documentation for that.</p>

<h3>Part II: Implementation using Play Framework and Scala</h3>

<p>Let us implement this in Scala and Play using the <strong><a href="https://github.com/matthiasn/sse-chat/tree/130707-kibana-demo">sse-chat sample application</a></strong>. You may want to stop reading here if you are using a framework other than Play. However, you made it this far; you might as well have a look at an approach with Play Framework. You may find it worth considering for your next project, who knows.</p>

<p>So without further ado, here is the Logger object:</p>

<figure class='code'><figcaption><span>Logger Object (partially) Controller</span><a href='https://github.com/matthiasn/sse-chat/blob/4f118e5e73b17036ab0168ba78faa2061074a259/app/utilities/Logger.scala'>Logger.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** LogStash-format logger, allows passing anything that can </span>
</span><span class='line'><span class="cm"> * be expressed as a JsValue in addition to standard fields</span>
</span><span class='line'><span class="cm"> * @param sourcePath  source path of event </span>
</span><span class='line'><span class="cm"> * @param msg         event message   </span>
</span><span class='line'><span class="cm"> * @param eventType   event type</span>
</span><span class='line'><span class="cm"> * @param fields      arbitrary data as JsValue</span>
</span><span class='line'><span class="cm"> **/</span>
</span><span class='line'><span class="k">def</span> <span class="n">log</span><span class="o">(</span><span class="n">sourcePath</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">eventType</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">fields</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">now</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">logItem</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;@source&quot;</span> <span class="o">-&gt;</span> <span class="n">instanceID</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@tags&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsArray</span><span class="o">(),</span>
</span><span class='line'>      <span class="s">&quot;@fields&quot;</span> <span class="o">-&gt;</span> <span class="n">fields</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@timestamp&quot;</span> <span class="o">-&gt;</span> <span class="n">dtFormat</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="n">now</span><span class="o">),</span>
</span><span class='line'>      <span class="s">&quot;@source_host&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;mn.local&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@source_path&quot;</span> <span class="o">-&gt;</span> <span class="n">sourcePath</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@message&quot;</span> <span class="o">-&gt;</span> <span class="n">msg</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@type&quot;</span> <span class="o">-&gt;</span> <span class="n">eventType</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>    <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticURL</span> <span class="o">+</span> <span class="s">&quot;/logstash-&quot;</span> <span class="o">+</span> <span class="n">indexFmt</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="n">now</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;/play&quot;</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">logItem</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above I am showing the basic logging functionality. All I am doing is to create a logstash-formatted <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> object and then POSTing it into the ElasticSearch index for the current day. Note that I am using UTC, this is more a personal preference than anything. Kibana will convert this to your local time if you so choose. The Geo-IP lookup is not the topic of this article, but have a look at the full source code, it should be pretty self-explanatory if you understand the code above. I&#8217;d be happy to add a section on this if there is demand.</p>

<p>Eventually I&#8217;d like to make an independent module out of this. First I would like to collect some ideas as to what the functionality should be, though. One thing I want to add is a controller that allows switching individual log events on and off, no matter if the application is run in production or development mode. That would make it possible to peek into a production environment and have fine-grained controlled over which events are logged.</p>

<p>So for now I have integrated the Logger object into a <strong><a href="https://github.com/matthiasn/sse-chat/tree/130707-kibana-demo">new branch of the sse-chat project</a></strong>. Copy and paste that into your own project as you see fit. And please let me know what other functionality you would like to see, I&#8217;ll be happy to integrate it into the planned module.</p>

<p>Cheers,
Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Follow-Up: AngularJS and Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/07/03/angularjs-and-play-maintenance/"/>
    <updated>2013-07-03T14:45:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/07/03/angularjs-and-play-maintenance</id>
    <content type="html"><![CDATA[<p>This is the follow-up on last week&#8217;s article about <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">AngularJS and Play Framework</a></strong>. I want to share with you the problems that I encountered on the server side while running the demo as well as my ideas of how to deal with comparable problems more efficiently in the future. I have not encountered any AngularJS-related problems with the chat application so we won&#8217;t deal with it today. I&#8217;ll have more on <strong><a href="http://angularjs.org">AngularJS</a></strong> next week.</p>

<!-- more -->


<h3>So, what was the problem?</h3>

<p>The article was online and the demo was running. Load on the server was not very high, I saw up to 60 users connected at the same time, so really not a load substantial enough that could cause problems. Yet sometimes when I connected, the chat room would load, but messages from the Shakespeare-reciting actors would not be delivered. I first suspected that the actors had crashed and no proper supervision strategy was in place. But there was nothing in the logs. Most of the time, everything did work, and when things didn‘t, I just restarted the server, scratching my head as to what the problem could be. I couldn‘t reproduce the problem in my dev environment, so there was really only one option: debug the system running on the server. Thanks to <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>, restarting a server is not a big deal, the SSE connection will reconnect automatically. Sure, messages that occur between dropped connection and reconnect will be lost, but that‘s not a problem for my demo, and nothing that can‘t be solved if need be.</p>

<p>Still, it doesn‘t feel right to keep inserting the logging code, recompiling and restarting an application in a &#8220;production&#8221; environment that has users connected to it. After experimenting with log levels and putting <strong>println</strong> statements into the code and then observing the shell, I eventually noticed a <strong>connection timeout</strong> error and afterwards a flood of message deliveries to all connected clients. What was going on here?</p>

<p>There was really only one explanation that made any sense to me: occasionally one of the connected clients would not properly disconnect, maybe on a mobile connection, and then that connection would time out after a while. So far so good. But why would that hold up other clients? Could it be that <strong><a href="https://github.com/playframework/Play20/tree/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.broadcast</a></strong> really came to a complete halt when any one of the attached <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumeratee">Enumeratee</a></strong> / <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Iteratee">Iteratee</a></strong> chains took longer than usual? Turns out the answer is yes, unless extra steps are taken. Let‘s look at a simple example. I recommend you fire up the Play / Scala REPL using <strong>play console</strong> and copy &amp; paste the code below:</p>

<figure class='code'><figcaption><span>No Buffer </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.iteratee.</span><span class="o">{</span><span class="nc">Concurrent</span><span class="o">,</span> <span class="nc">Enumeratee</span><span class="o">,</span> <span class="nc">Iteratee</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">channel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee1</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">i</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span> <span class="o">};</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee1: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee1</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee2</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span> <span class="n">i</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee2: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee2</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">50</span><span class="o">)</span> <span class="o">{</span> <span class="n">channel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above we create Enumerator and Channel through Concurrent.broadcast and attach two Iteratees, one of which occasionally puts its thread to sleep for 5 seconds. It holds up the other attached Iteratee as well. That&#8217;s not what I need here. How can we overcome this? By inserting a buffering Enumeratee:</p>

<figure class='code'><figcaption><span>With Buffer </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.iteratee.</span><span class="o">{</span><span class="nc">Concurrent</span><span class="o">,</span> <span class="nc">Enumeratee</span><span class="o">,</span> <span class="nc">Iteratee</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">channel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee1</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">i</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span> <span class="o">};</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee1: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee1</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee2</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span> <span class="n">i</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee2: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee2</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">50</span><span class="o">)</span> <span class="o">{</span> <span class="n">channel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the application behaves more like I would expect; individual Iteratees do not hold up everything any longer. Instead the buffering Enumeratee receives the messages, buffers them and frees up Concurrent.broadcast to call the next Iteratee with the current message. The buffer also drops messages when it is full.</p>

<p>Now after adding the buffering Enumeratee to the chat application, everything works just fine, as long as the individual buffers are large enough.</p>

<figure class='code'><figcaption><span>Chat Controller</span><a href='https://github.com/matthiasn/sse-chat/blob/678a02671a63fc50dc0da34ffe452b4f472e972e/app/controllers/ChatApplication.scala'>ChatApplication.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller action serving activity based on room */</span>
</span><span class='line'><span class="k">def</span> <span class="n">chatFeed</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">chatOut</span> <span class="o">&amp;&gt;</span> <span class="n">filter</span><span class="o">(</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>    <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
</span><span class='line'>    <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How can I handle a problem like this better the next time?</h3>

<p>Unit testing would hardly have helped here, unless we tested for the scenario of an incorrectly closed the WS connection. Better knowledge about the timing of events through better logging would have helped immensely, though. Logging to files is not extremely useful when trying to find anomalies like the aforementioned timeouts and spikes directly thereafter; at least my eyes are not good at detecting this in plain text.</p>

<p>What I would like to have instead is a fully searchable log in a webclient. I am thinking about something like <strong><a href="http://three.kibana.org/about.html">Kibana 3</a></strong>. With graphs as shown in the demo, the problem would have been immediately obvious. Long streaks of smooth delivery and then all of a sudden no messages dispatched to clients for two minutes and then the system catching up with a big spike.</p>

<p>So I am looking into combining <strong><a href="http://three.kibana.org/about.html">Kibana 3</a></strong> with a logging object in Play that receives all loggable events and which, depending on the environment (dev or production), by default either processes them further or not, with further configuration of the defaults for each logging type when specified. The logging object could then also expose an endpoint that allows switching individual loggers on or off during execution, without restarting the application. That way we could easily peek into a running instance in a production environment and watch what is going on, right now. I started working on this and I will present something here soon. Having such a logging system available will be a great help for all projects in the pipeline. I would like to shift my focus back to the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> project rather sooner than later, but first I want to have the right tools in place.</p>

<p>-Matthias</p>

<p>Below are some books that I have found useful and I hope will be helpful for you as well. You can support this blog by clicking on the slideshow and buying anything on Amazon, no matter if it is a listed item or not. <strong>Thank you!</strong> Your support will allow me to write more articles like this one.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>

]]></content>
  </entry>
  
</feed>
