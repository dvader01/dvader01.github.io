<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2014-10-03T21:14:28+02:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a System in #Clojure - Part 2]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/10/01/Building-System-in-Clojure-2/"/>
    <updated>2014-10-01T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/10/01/Building-System-in-Clojure-2</id>
    <content type="html"><![CDATA[<p><strong>TL;DR: transducers in Clojure, component lifecycle, more core.async. If any of that is of interest to you at all, you may want to read the following article.</strong></p>

<!-- more -->


<p><strong>Attention, Attention:</strong> This article is somewhat <strong>work in progress</strong> still. Right now I am working on animations for illustrating stuff. Come back in a day or two for those. Please <strong>provide feedback</strong> already wherever you see potential improvements.</p>

<p>Hello and welcome back to this series of articles about building a system in <strong><a href="http://clojure.org/">Clojure</a></strong>. Last week, we had a first look at dependency injection using the <strong><a href="https://github.com/stuartsierra/component">component library</a></strong> combined with a hint of channel decoupling power. You may want to read <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">that article first</a></strong> if you haven’t done so already.</p>

<p>In this installment, we will look into the first component, the <strong>twitter client</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It seems like the natural component to start with as it is our application’s point of entry for twitter’s <strong>streaming data</strong>. Since we haven’t done so already, we will also look at the lifecycle of a component. Before that, because this component happens to use them, we will look at transducers, a <strong><a href="http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming">recent addition</a></strong> to Clojure. First, though, we will look at the problem at hand, without any language- or library-specific implementation details.</p>

<h2>Twitter Client</h2>

<p>Let’s start in <strong><a href="https://www.youtube.com/watch?v=f84n5oFoZBc">hammock mode</a></strong>, without code. What is the problem we are trying to solve? It all starts with the tweet stream from the twitter API. Very briefly, the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> allows us to subscribe to a (near) real time stream of tweets that contain one or more terms out of a set of terms. In the live instance under <strong><a href="http://birdwatch2.matthiasnehlsen.com/#*">http://birdwatch2.matthiasnehlsen.com</a></strong> these terms at the moment happen to be &#8220;Ferguson&#8221;, &#8220;ISIS&#8221;, and &#8220;Ebola&#8221; - I am interested in all these topics. As long as that subscription does not hit a hard ceiling of <strong>1%</strong> of all the tweets flowing through twitter’s system, we can be sure that we will retrieve all of them. Otherwise the stream will be throttled to a maximum of <strong>1%</strong> of what is tweeted at any moment in time. <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Here is how that stream looks like when each chunk is simply printed to the console:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/streaming-api.gif" title="animated gif of streaming API output" alt="animated gif of streaming API output"></p>

<p>For reasons unbeknownst to me, tweets stopped respecting the chunk borders for the last half year. Instead, tweets occasionally span two or three chunks. This makes processing the tweets a little more complicated than we might wish for. One tweet per chunk is straightforward:</p>

<pre><code>Receive chunk -&gt; parse JSON into map -&gt; put on conveyor belt (channel)
</code></pre>

<p>That looks like functional programming, right? No state to be kept anywhere, just functions producing results that are passed into other functions. But as desirable as that sounds, it does not align with reality. Instead, we need logical reasoning and state. What is the instruction we would give a sentient being? Imagine an intelligent agent standing between two conveyor belts. Imagine that agent being you. Here we go:</p>

<p>“On your left side, there’s a conveyor belt that keeps delivering hundred dollar bills. Put all of them on the other conveyor belt. Some of them come out cut into multiple pieces. These fragments are in correct order. Scotch tape is over there.”</p>

<p>I think we would all know what to do. There is a space where you park fragments of not-yet-complete bills / tweets. Then, with every new fragment, you inspect if the bill is complete and if so, put it back together and pass it on. Let’s try that in code. First, we will need to introduce <strong>transducers</strong> though.</p>

<h2>Transducers</h2>

<blockquote><p>Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts, and they&#8217;re coming to Clojure core and core.async.</p><footer><strong>Rich Hickey</strong> <cite><a href='http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming'>Cognitect Blog, August 6, 2014</a></cite></footer></blockquote>


<p>In a way, a transducer is the <strong>essence</strong> of a computation over data, without being bound to any kind of collection or data structure. Above, before we had to concern ourselves with the incomplete fragments, there was one step of the computation that we could <strong>model as a transducer</strong>: the part where we wanted to parse JSON into a map data structure.</p>

<p>Imagine we wanted to transform a vector of JSON strings into a vector of such parsed maps. We could simply do this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the above is bound to the data structure, in this case a vector. That does not have to be the case, though. Rich Hickey provides a good example in his <strong><a href="https://www.youtube.com/watch?v=6mTbuzafcII">transducers talk</a></strong>, likening the above to having to tell the guys processing luggage at the airport the same instructions twice, once for trolleys and again for conveyor belts, where in reality that should not matter.</p>

<p>We could, for example, not only run the mapping function over every item in a vector but also reuse the same function on every item in a channel, stream or whatever.</p>

<p>With Clojure 1.7, we can now create such a transducing function by simply leaving out the data structure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">xform</span> <span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can apply this transducing function to different kinds of data structures. For example, we could transform all entries from a vector into another vector, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="nv">xform</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or into a sequence, like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">sequence</span> <span class="nv">xform</span> <span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;:1}&quot;</span> <span class="s">&quot;{\&quot;bar\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>It may not look terribly useful so far. But this can also be applied to a channel. Say, we want to create a channel that accepts JSON strings and transforms each message into a Clojure map. Simple:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">chan</span> <span class="mi">1</span> <span class="nv">xform</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above creates a channel with a buffer size of one that applies the transducer to every element.</p>

<p>But this does not help in our initial case here, where we know that some of the chunks are not complete but instead have to be glued together with the next one or two pieces. For that, we will need some kind of <strong>state</strong>. In the example above, that would be the space where we place fragments of a hundred dollar bill. But what if we want to see this aggregation process as a <strong>black box</strong>? Then, the aggregation cannot really have outside state. What if one such transducer could have local state that is contained and not accessible from the outside? It turns out this is where stateful transducers can help.</p>

<p>Here’s how that looks like in code:</p>

<figure class='code'><figcaption><span>stateful streaming-buffer transducer processing.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">streaming-buffer</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">buff</span> <span class="p">(</span><span class="nf">atom</span> <span class="s">&quot;&quot;</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">r</span> <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">json-lines</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">str </span><span class="o">@</span><span class="nv">buff</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">insert-newline</span><span class="p">)</span> <span class="p">(</span><span class="nf">str/split-lines</span><span class="p">))</span>
</span><span class='line'>              <span class="nv">to-process</span> <span class="p">(</span><span class="nb">butlast </span><span class="nv">json-lines</span><span class="p">)]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">reset!</span> <span class="nv">buff</span> <span class="p">(</span><span class="nb">last </span><span class="nv">json-lines</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="nv">to-process</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">step</span> <span class="nv">r</span> <span class="nv">to-process</span><span class="p">)</span> <span class="nv">r</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go through this line by line. We have a (private) function named <strong>streaming-buffer</strong> that does not take any arguments. It returns a function that accepts the step function. This step function is the function that will be applied to every step from then on. This function then first creates the local state as an atom<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> which we will use as a buffer to store incomplete tweet fragments<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. Next, this function returns another function which accepts two parameters, r for result and x for the current data item (in this case the - potentially incomplete - chunk).</p>

<p>In the first line of the let binding, we use the <strong><a href="http://clojuredocs.org/clojure.core/-%3E">-> (thread-first)</a></strong> macro. This macro makes the code more legible by simply passing the result of each function call as the first argument of the next function. Here, specifically, we <strong>1)</strong> concatenate the buffer with the new chunk, <strong>2)</strong> add newlines where missing<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, and <strong>3)</strong> split the string into a sequence on the line breaks.</p>

<p>Now, we cannot immediately process all those items in the resulting sequence. We know that all are complete except for the last one as otherwise there would not have been another tweet to the right of them. But the last one may not be complete. Accordingly, we derive</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">butlast </span><span class="nv">json-lines</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>under the name <strong>to-process</strong>. Then, we reset the buffer to whatever is in that last string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">buff</span> <span class="p">(</span><span class="nb">last </span><span class="nv">json-lines</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we have <strong>reduce</strong> call the <strong>step</strong> function for every item in <strong>to-process</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">if </span><span class="nv">to-process</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">step</span> <span class="nv">r</span> <span class="nv">to-process</span><span class="p">)</span> <span class="nv">r</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way, only complete JSON strings are pushed down to the next operation, whereas intermediate JSON string fragments are kept locally and not passed on until certainly complete. That&#8217;s all that was needed to make the tweets whole again. Next, we compose this with the JSON parsing transducer we have already met above so that this <strong>streaming-buffer</strong> transducer runs first and passes its result to the <strong>JSON parser</strong>.</p>

<p>Let&#8217;s create a vector of JSON fragment and try it out. We already established that transducers can used on different data structures, thus it should work equally well on a vector. Here&#8217;s the vector for the test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;{\&quot;foo\&quot;&quot;</span> <span class="s">&quot;:1}\n{\&quot;bar\&quot;:&quot;</span> <span class="s">&quot;42}&quot;</span> <span class="s">&quot;{\&quot;baz\&quot;:42}&quot;</span> <span class="s">&quot;{\&quot;bla\&quot;:42}&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can check on the REPL if this will produce three complete JSON strings. It is expected here that the last one is lost. Once the collection to process is empty, the <strong>arity-1</strong> (single argument) function is called a final time, which really only returns the aggregate at that point:</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"foo\"" ":1}\n{\"bar\":" "42}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (into [] (streaming-buffer) chunks)
["{\"foo\":1}" "{\"bar\":42}" "{\"baz\":42}"]
</code></pre>

<p>What somewhat confused me at first is what the step function actually was. Let&#8217;s find out by printing it when the arity-1 function is called. We can modify the fourth line of <strong>stream-buffer</strong> like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>      <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">step</span><span class="p">)</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we run the same as above on the REPL, we see what the step function actually is:</p>

<pre><code>birdwatch.twitterclient.processing=&gt; (into [] (streaming-buffer) chunks)
#&lt;core$conj_BANG_ clojure.core$conj_BANG_@5fd837a&gt;
["{\"foo\":1}" "{\"bar\":42}" "{\"baz\":42}"]
</code></pre>

<p>Interesting, the step function is <strong>conj!</strong> which, according to the <strong><a href="https://github.com/clojure/clojure/blob/clojure-1.7.0-alpha2/src/clj/clojure/core.clj#L3208">source</a></strong>, adds <strong>x</strong> to a <strong>transient collection</strong><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<p>The step function is different when we use the transducer on a channel, but more about that when we use it in that scenario.</p>

<p>There&#8217;s more to do before we can <strong>compose all transducers</strong> and attach them to the appropriate channel. Specifically, we can receive valid JSON from Twitter, which is not a tweet. This happens, for example, when we get a notification that we lag behind in consuming the stream. In that case we only want to pass on the parsed map if it is likely that it was a tweet and otherwise log it as an error. There is one <strong>key</strong> that all tweets have in common which does not seem to appear in any status messages from twitter: <strong>:text</strong>. We can thus use that key as the <strong>predicate</strong> for recognizing a tweet:</p>

<figure class='code'><figcaption><span>tweet? predicate function processing.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">tweet?</span> <span class="p">[</span><span class="nv">data</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Checks if data is a tweet. If so, pass on, otherwise log error.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">text</span> <span class="p">(</span><span class="ss">:text</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when-not </span><span class="nv">text</span> <span class="p">(</span><span class="nf">log/error</span> <span class="s">&quot;error-msg&quot;</span> <span class="nv">data</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">text</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we also want to log the count of tweets received since the application started. Let&#8217;s do this only for full thousands. We will need some kind of counter to keep track of the count. Let&#8217;s create another <strong>stateful transducer</strong>:</p>

<figure class='code'><figcaption><span>stateful count transducer processing.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">log-count</span> <span class="p">[</span><span class="nv">last-received</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Stateful transducer, counts processed items and updating last-received atom. Logs progress every 1000 items.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cnt</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">fn </span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span><span class="p">]</span> <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>        <span class="p">([</span><span class="nv">r</span> <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">swap!</span> <span class="nv">cnt</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="o">@</span><span class="nv">cnt</span> <span class="mi">1000</span><span class="p">))</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;processed&quot;</span> <span class="o">@</span><span class="nv">cnt</span> <span class="s">&quot;since startup&quot;</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">reset!</span> <span class="nv">last-received</span> <span class="p">(</span><span class="nf">t/now</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">step</span> <span class="nv">r</span> <span class="nv">x</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This transducer is comparable to the one we saw earlier, except that the local atom now holds the count. Initially, the counter is incremented and then, when the counter is divisible by 1000, the count is logged. In addition, this function also resets the <strong>last-received</strong> timestamp. Of course, this could be factored out into a separate function, but I think this will do.</p>

<p>Now, we can compose all these steps:</p>

<figure class='code'><figcaption><span>composed transducer processing.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">process-chunk</span> <span class="p">[</span><span class="nv">last-received</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Creates composite transducer for processing tweet chunks. Last-received atom passed in for updates.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">comp</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">streaming-buffer</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">map </span><span class="nv">json/read-json</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">filter </span><span class="nv">tweet?</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">log-count</span> <span class="nv">last-received</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above creates a composed function that takes the timestamp atom provided by the TwitterClient component as an argument. We can now use this <strong>transducing function</strong> and apply it to different data structures. Here, we use it to create a channel that takes tweet chunk fragments and delivers parsed tweets on the other side of the conveyor belt.</p>

<p>Let&#8217;s try it on a vector one more time to see what&#8217;s happening. For that, we take a different vector, with two JSON strings that contain the <strong>:text</strong> property and one that doesn&#8217;t.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;{\&quot;text\&quot;&quot;</span> <span class="s">&quot;:\&quot;foo\&quot;}\n{\&quot;text\&quot;:&quot;</span> <span class="s">&quot;\&quot;bar\&quot;}&quot;</span> <span class="s">&quot;{\&quot;baz\&quot;:42}&quot;</span> <span class="s">&quot;{\&quot;bla\&quot;:42}&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The, we should see that the invalid one is logged and the other two are returned:</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;

birdwatch.twitterclient.processing=&gt; (require '[clj-time.core :as t])
nil

birdwatch.twitterclient.processing=&gt; (def chunks ["{\"text\"" ":\"foo\"}\n{\"text\":" "\"bar\"}" "{\"baz\":42}" "{\"bla\":42}"])
#'birdwatch.twitterclient.processing/chunks

birdwatch.twitterclient.processing=&gt; (into [] (process-chunk (atom (t/epoch))) chunks)
20:57:39.999 [nREPL-worker-1] ERROR birdwatch.twitterclient.processing - error-msg {:baz 42}
[{:text "foo"} {:text "bar"}]
</code></pre>

<p>Great, we have a composed transducer that works on vectors as expected and that should work on channels as well.</p>

<h2>Channels</h2>

<p>We will only gradually cover channels as this series unfolds. For now, let us just reiterate what a channel does. A <strong>core.async channel</strong> can be compared to a <strong>conveyor belt</strong>. You place something on that belt and whatever happens on the other side is not your problem. That way, we can build systems that consist of parts that do not depend on each other (except for having expectations about the data they receive).</p>

<p>In this component, we are dealing with two such channels. The more straightforward one is the channel in the <strong>channels component</strong>.</p>

<h2>Component lifecycle: the TwitterClient-Channels component</h2>

<p>This component is the <strong>wiring harness</strong> between the <strong>switchboard</strong> component and the <strong>TwitterClient</strong> component<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>. Here&#8217;s how the channels component looks like:</p>

<figure class='code'><figcaption><span>Twitterclient-Channels component component.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Twitterclient-Channels</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Twitterclient Channels Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:tweets</span> <span class="p">(</span><span class="nf">chan</span><span class="p">)))</span> <span class="c1">; channel for new tweets received from streaming API</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stop Twitterclient Channels Component&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:tweets</span> <span class="nv">nil</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">new-twitterclient-channels</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">map-&gt;Twitterclient-Channels</span> <span class="p">{}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a really simple component. On startup, it associates a new channel to its own map, which is passed in under the name <strong>component</strong> and logs its successful startup. When it shuts down, it replaces the <strong>:tweets</strong> component keys with <strong>nil</strong>.</p>

<h2>Component lifecycle: the TwitterClient component</h2>

<p>The other component, where all the tweet stream action is happening, is the <strong>TwitterClient</strong> component:</p>

<figure class='code'><figcaption><span>Twitterclient component component.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Twitterclient</span> <span class="p">[</span><span class="nv">conf</span> <span class="nv">channels</span> <span class="nv">conn</span> <span class="nv">chunk-chan</span> <span class="nv">watch-active</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">component/Lifecycle</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">start</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Twitterclient Component&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">last-received</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">(</span><span class="nf">t/epoch</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">chunk-chan</span> <span class="p">(</span><span class="nf">chan</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">processing/process-chunk</span> <span class="nv">last-received</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">conn</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{})</span>
</span><span class='line'>               <span class="nv">watch-active</span> <span class="p">(</span><span class="nf">atom</span> <span class="nv">false</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">http-client/start-twitter-conn!</span> <span class="nv">conf</span> <span class="nv">conn</span> <span class="nv">chunk-chan</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">pipe</span> <span class="nv">chunk-chan</span> <span class="p">(</span><span class="ss">:tweets</span> <span class="nv">channels</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">http-client/run-watch-loop</span> <span class="nv">conf</span> <span class="nv">conn</span> <span class="nv">chunk-chan</span> <span class="nv">last-received</span> <span class="nv">watch-active</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">conn</span> <span class="ss">:chunk-chan</span> <span class="nv">chunk-chan</span> <span class="ss">:watch-active</span> <span class="nv">watch-active</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stop</span> <span class="p">[</span><span class="nv">component</span><span class="p">]</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stopping Twitterclient Component&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">reset!</span> <span class="nv">watch-active</span> <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">http-client/stop-twitter-conn!</span> <span class="nv">conn</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">assoc </span><span class="nv">component</span> <span class="ss">:conn</span> <span class="nv">nil</span> <span class="ss">:chunk-chan</span> <span class="nv">nil</span> <span class="ss">:watch-active</span> <span class="nv">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This component encapsulates the behavior of the TwitterClient. Initially, the <strong>last-received</strong> atom is created, which holds a timestamp of the last-received full tweet. We will meet this atom again when we watch the twitter stream and restart it when inactivity periods have been too long.</p>

<p>Next, <strong>chunk-chan</strong> is the channel that receives individual tweet string fragments from the chunked HTTP connection and passes tweets on as Clojure maps by virtue of applying the composed transducer we have discussed in detail above. Let&#8217; do a quick check what the step function is when the transducer is used on a channel. For that, let&#8217;s print <strong>step</strong> again, just this time when the function is created as the arity-1 function will never be called on an infinite channel:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">streaming-buffer</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">step</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we attach <strong>streaming-buffer</strong> to a channel, we will see what the step function is:</p>

<pre><code>birdwatch.main=&gt; (in-ns 'birdwatch.twitterclient.processing)
#&lt;Namespace birdwatch.twitterclient.processing&gt;
birdwatch.twitterclient.processing=&gt; (require '[clojure.core.async :as async :refer [chan]])
nil
birdwatch.twitterclient.processing=&gt; (def c (chan 1 (streaming-buffer)))
#&lt;protocols$add_BANG_ clojure.core.async.impl.protocols$add_BANG_@5a0f8c33&gt;
#'birdwatch.twitterclient.processing/c
</code></pre>

<p>Okay, <strong>add!</strong> is a function from core.async that <strong><a href="https://github.com/clojure/core.async/blob/master/src/main/clojure/clojure/core/async/impl/protocols.clj#L35">appears to add an item to a buffer</a></strong> if that item is not nil. Makes sense.</p>

<p>Back to the let-bindings in the component. <strong>conn</strong> is a reference to the current connection to Twitter. <strong>watch-active</strong> is a simple boolean that keeps track of whether the watch loop is supposed to keep running or not (more later). Next, we start the TwitterClient by calling a function from the <strong>http</strong> namespace:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">http-client/start-twitter-conn!</span> <span class="nv">conf</span> <span class="nv">conn</span> <span class="nv">chunk-chan</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s what that function does:</p>

<figure class='code'><figcaption><span>start-twitter-conn! http.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">start-twitter-conn!</span> <span class="p">[</span><span class="nv">conf</span> <span class="nv">conn</span> <span class="nv">chunk-chan</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Starting Twitter client.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reset!</span> <span class="nv">conn</span> <span class="p">(</span><span class="nf">tas/statuses-filter</span>
</span><span class='line'>                <span class="ss">:params</span> <span class="p">{</span><span class="ss">:track</span> <span class="p">(</span><span class="ss">:track</span> <span class="nv">conf</span><span class="p">)}</span>
</span><span class='line'>                <span class="ss">:oauth-creds</span> <span class="p">(</span><span class="nf">creds</span> <span class="nv">conf</span><span class="p">)</span>
</span><span class='line'>                <span class="ss">:callbacks</span> <span class="p">(</span><span class="nf">tweet-chunk-callback</span> <span class="nv">chunk-chan</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It basically resets the conn atom and replaces it with a new client (statuses-filter from the twitter.api.streaming namespace) with parameters from the application&#8217;s configuration and assigns a callback handler:</p>

<figure class='code'><figcaption><span>tweet-chunk-callback http.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">tweet-chunk-callback</span> <span class="p">[</span><span class="nv">chunk-chan</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">tas/AsyncStreamingCallback.</span> <span class="o">#</span><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">chunk-chan</span> <span class="p">(</span><span class="nb">str </span><span class="nv">%2</span><span class="p">))</span>
</span><span class='line'>                               <span class="p">(</span><span class="nb">comp println </span><span class="nv">tch/response-return-everything</span><span class="p">)</span>
</span><span class='line'>                               <span class="nv">tch/exception-print</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing we need to concern ourselves with regarding the <strong>AsyncStreamingCallback</strong> is the first parameter which is a function disguised as a macro. This function simply places every chunk on <strong>chunk-chan</strong>, which happens to be the channel that processes chunks into tweets.</p>

<p>Back to the component. In the following line, <strong>chunk-chan</strong> is piped into the <strong>tweets</strong> channel from the channels component. That way, our processing chain for the TwitterClient is complete, and processed tweets are put on the conveyor belt that is the only connection between the TwitterClient component and the outside world.  From here, we do not need to concern ourselves with what happens with the tweet on the other side of that conveyor belt.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">pipe</span> <span class="nv">chunk-chan</span> <span class="p">(</span><span class="ss">:tweets</span> <span class="nv">channels</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this in place, we now have a component that establishes a connection to the <strong>streaming API</strong> and puts the received tweets on a channel. But what if the pipes and tubes of the Internet are occasionally clogged? In that case we will want to restart the connection. Let&#8217;s do it and make the client more resilient:</p>

<figure class='code'><figcaption><span>tweet-chunk-callback http.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-watch-loop</span> <span class="p">[</span><span class="nv">conf</span> <span class="nv">conn</span> <span class="nv">chunk-chan</span> <span class="nv">last-received</span> <span class="nv">watch-active</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;run loop watching the twitter client and restarting it if necessary&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reset!</span> <span class="nv">watch-active</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="p">(</span><span class="nf">timeout</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:tw-check-interval-sec</span> <span class="nv">conf</span><span class="p">)</span> <span class="mi">1000</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">since-last-sec</span> <span class="p">(</span><span class="nf">t/in-seconds</span> <span class="p">(</span><span class="nf">t/interval</span> <span class="o">@</span><span class="nv">last-received</span> <span class="p">(</span><span class="nf">t/now</span><span class="p">)))</span>
</span><span class='line'>                 <span class="nv">active</span> <span class="o">@</span><span class="nv">watch-active</span><span class="p">]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">when </span><span class="nv">active</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">since-last-sec</span> <span class="p">(</span><span class="ss">:tw-check-interval-sec</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">log/error</span> <span class="nv">since-last-sec</span> <span class="s">&quot;seconds since last tweet received&quot;</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">stop-twitter-conn!</span> <span class="nv">conn</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">&lt;!</span> <span class="p">(</span><span class="nf">timeout</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:tw-restart-wait</span> <span class="nv">conf</span><span class="p">)</span> <span class="mi">1000</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">start-twitter-conn!</span> <span class="nv">conf</span> <span class="nv">conn</span> <span class="nv">chunk-chan</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">recur</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I won&#8217;t go into much detail here as this watch loop is somewhat incidental to the problem of componentizing an application, but here&#8217;s a brief run-through. When the function is called, it starts the <strong>go-loop</strong> with code that runs in intervals. If the check determines that the last tweet ismore than a defined number of seconds ago (from configuration) and that the client is active, the client is restarted. For that, a function to stop the connection is called before it is started again. Here&#8217;s that function:</p>

<figure class='code'><figcaption><span>stop-twitter-conn! http.clj</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">stop-twitter-conn!</span> <span class="p">[</span><span class="nv">conn</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">m</span> <span class="p">(</span><span class="nb">meta </span><span class="o">@</span><span class="nv">conn</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="nv">m</span> <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Stopping Twitter client.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="ss">:cancel</span> <span class="nv">m</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <strong><a href="https://github.com/adamwynne/twitter-api">adamwynne/twitter-api on GitHub</a></strong> for more details on the twitter-api.</p>

<p>Finally, in the <strong>stop</strong> part of the component lifecycle, <strong>watch-active</strong> is switched off, the client shut down, and all component keys replaced by <strong>nil</strong>.</p>

<p>Right below the component definitions, there are also functions for creating the respective components. This can take parameters like the application&#8217;s configuration:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">new-twitterclient</span> <span class="p">[</span><span class="nv">conf</span><span class="p">]</span> <span class="p">(</span><span class="nf">map-&gt;Twitterclient</span> <span class="p">{</span><span class="ss">:conf</span> <span class="nv">conf</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember from the last article, where the components were fired up in order (in the animation)? The channels component is created first and then provided to the TwitterClient component. The component library wires all components together and starts them up in the right order. Eventually, this means that <strong>start</strong> is called on each component but only after all dependencies are met.</p>

<h2>Conclusion</h2>

<p>Okay, this is it for today. We saw how a component that starts and maintains a connection to the twitter streaming API and that delivers tweets on a channel is created and started. There is a lot more reading material available on these subjects. Instead of providing all the links now, I&#8217;d rather refer you to my list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure Resources on GitHub</a></strong>. There, you&#8217;ll find a comprehensive list of all the articles I came across while working on this application.</p>

<p>In the next installment, we will probably cover the switchboard component. Considering where the information flows next, that seems like a natural next step.</p>

<p>I hope you found this useful. If you did, why don’t you subscribe to the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>newsletter</strong></a> so I can tell you when the next article is out? I will also let you know when this one is complete.</p>

<p>Cheers,
Matthias</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I only recently started with Clojure. It may be possible an also quite likely that there are better ways of doing things. If so, please let me know, I want to learn stuff.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I don&rsquo;t know much about the exact mechanism at play, actual numbers or delivery guarantees. It anyhow doesn’t matter much for the purpose of this application. The interesting views focus on the most retweeted tweets. Now every retweet contains the original tweet under “retweeted_status”, with the current numbers such as retweet and favorite count for the moment in time it was retweeted. For popular ones, we thus receive the original tweet many, many times over. So even if we missed as much as half of all the tweets &ndash; which I consider unlikely &ndash; the popular tweets would only be updated less often. Worst case: retweet count is off by one or two. I can live with that. In reality, for the current selection of terms, reaching the limit also hardly ever happens. After all, 1% is still millions of tweets per day.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><strong>Atoms</strong> are essential to Clojure’s <strong>state model</strong>. Essentially, you have this managed reference that is thread-safe. Whenever we dereference such an atom, we get the state of the world this very second. Then, when you pass the dereferenced value to other parts of the application, it still represents the immutable state of the world at that point in time. It cannot change. Next time I dereference that atom, I will get the new state of the world. Updates to atoms can only happen in transactions, meaning that no two can run at the same time. Thus, we won&rsquo;t have to chase crazy concurrency issues.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>After initial experimentation with a <strong><a href="http://dev.clojure.org/jira/browse/CLJ-1512">local volatile reference</a></strong>, I decided in favor of a good old atom. The <strong>volatile!</strong> local reference trades off potential race conditions with speed. But there’s no performance issue when we process tweet chunks a few hundred times a second utmost, so why bother and introduce a new concept? Worth to keep in mind, though, when performance is an issue.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>For whatever reason, the changed behavior of the streaming API also entails that not all tweets are followed by a line break, only most of them. A tiny helper function inserts those missing linebreaks where they are missing between two tweets: <code>(str/replace s #"\}\{" "}\r\n{"))</code>.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>I assume the <strong>transient</strong> collection is used for performance reasons.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>This wiring harness is kind of the interface of the component. All it provides, though, is a channel. However, what is put on that channel is not checked. Maybe a channel type that checks if a message validates against a schema &ndash; maybe provided by prismatic/schema – and if so, forwards the message and otherwise puts it on an error channel or calls an error function. That way, validation errors could be logged while valid messages would be processed as expected. That could actually happen in a filtering transducer. Such a transducer function would be free not only to check but also put mismatches on another channel or log an error.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a System in Clojure - Part 1]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/"/>
    <updated>2014-09-24T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1</id>
    <content type="html"><![CDATA[<p>This is the first of <strong>n</strong> articles about building <strong>systems</strong> in <strong><a href="http://clojure.org/">Clojure</a></strong>. Clojure is a beautiful language and I have been fascinated from the first moment I laid eyes on it last summer. However, what remained a mystery to me for most of the time was how to build more complex systems. I started researching the options that would allow me to structure an arbitrarily complex application in a way that is <strong>easy to understand and maintain</strong>. Here is what I found.</p>

<!-- more -->


<p>As an example for such a system, we will be looking at the Clojure rewrite of an application I wrote last year: <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>. This application subscribes to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> for all tweets that contain one or more terms out of a set of terms and makes the tweets searchable through storing them in ElasticSearch. A live version of the Clojure version of this application is available here: <strong><a href="http://birdwatch2.matthiasnehlsen.com/#*">http://birdwatch2.matthiasnehlsen.com</a></strong>.</p>

<p>In this first installment we will be looking at the basic architecture of the server side. Let&#8217;s start with an animation <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to demonstrate how components in the system get wired up when the application initializes before we go into details.</p>

<br/>




<script language="javascript" type="text/javascript">
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    obj.style.width = obj.contentWindow.document.body.scrollWidth + 'px';
  }
</script>




<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/bw-anim/index.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>




<br/>


<br/>


<p>The architecture above is a huge improvement over the first version and was only possible thanks to Stuart Sierra&#8217;s <strong><a href="https://github.com/stuartsierra/component">component library</a></strong>. This new version has cleanly separated components with no dependencies between namespace at all (except, of course, in the main namespace that wires everything together). But the individual components don&#8217;t know anything about each other except for where the components in the animation touch each other. And even there, it is mostly just plain <strong><a href="https://github.com/clojure/core.async">core.async</a></strong> channels.</p>

<p>In the initial version that I wrote, where everything depended on everything, things were very different. Some people would call that &#8220;spaghetti code&#8221;, but I think that is not doing justice to spaghetti. Unlike bad code, I don&#8217;t mind touching spaghetti. I would rather liken bad code to hairballs, of the worst kind that is. Have you ever experienced the following: you are standing in the shower and the water doesn&#8217;t drain. You notice something in the sink, so you squat down to pull it out only to start screaming, &#8220;Oh my god, it&#8217;s a dead rat&#8221; a second later. I am referring to that kind of entangled hairball mess, nothing less. On top, you may even hit your head when you jump up in disgust.</p>

<p>This is where dependency injection comes in. Can we agree that we don&#8217;t like hairballs? Good. Usually, what we are trying to achieve is a so-called inversion of control, in which a component of the application knows that it will be injected something which implements a known interface at runtime. Then, no matter what the actual implementation is, it knows what methods it can call on that something because of the implemented interface.</p>

<p>Here, unlike in object-oriented dependency injection, things are a little different because we don&#8217;t really have objects. The components play the role of objects, but as a further way of decoupling, I wanted them to only communicate via <strong>core.async</strong> channels. Channels are a great abstraction. Rich Hickey likens them to conveyor belts onto which you put something without having to know at all what happens on the other side. We will have a more detailed look at the channels in the next article. For now, as an abstraction, we can think about the channel components (the flat ones connecting the components with the switchboard) as <strong>wiring harnesses</strong>, like the one that connects the electronics of your car to your engine. The only way to interface with a modern engine (that doesn&#8217;t have separate mechanical controls) is by connecting to this wiring harness and either send or receive information, depending on the channel / cable that you interface with.</p>

<p>Let&#8217;s have a look at how the initialization of the application we have already seen in the animation looks in code:</p>

<figure class='code'><figcaption><span>Main namespace</span><a href='https://github.com/matthiasn/BirdWatch/blob/a26c201d2cc2c89f4b3d2ecb8e6adb403e6f89c7/Clojure-Websockets/src/clj/birdwatch/main.clj'>main.clj</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">birdwatch.main</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.twitter-client</span> <span class="ss">:as</span> <span class="nv">tc</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.communicator</span> <span class="ss">:as</span> <span class="nv">comm</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.persistence</span> <span class="ss">:as</span> <span class="nv">p</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.percolator</span> <span class="ss">:as</span> <span class="nv">perc</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.http</span> <span class="ss">:as</span> <span class="nv">http</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">birdwatch.switchboard</span> <span class="ss">:as</span> <span class="nv">sw</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clojure.edn</span> <span class="ss">:as</span> <span class="nv">edn</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clojure.tools.logging</span> <span class="ss">:as</span> <span class="nv">log</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">clj-pid.core</span> <span class="ss">:as</span> <span class="nv">pid</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">com.stuartsierra.component</span> <span class="ss">:as</span> <span class="nv">component</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">conf</span> <span class="p">(</span><span class="nf">edn/read-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;twitterconf.edn&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-system</span> <span class="p">[</span><span class="nv">conf</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Create system by wiring individual components so that component/start</span>
</span><span class='line'><span class="s">  will bring up the individual components in the correct order.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">component/system-map</span>
</span><span class='line'>   <span class="ss">:communicator-channels</span> <span class="p">(</span><span class="nf">comm/new-communicator-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:communicator</span>  <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">comm/new-communicator</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:communicator-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:twitterclient-channels</span> <span class="p">(</span><span class="nf">tc/new-twitterclient-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:twitterclient</span> <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">tc/new-twitterclient</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:twitterclient-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:persistence-channels</span> <span class="p">(</span><span class="nf">p/new-persistence-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:persistence</span>   <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">p/new-persistence</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:persistence-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:percolation-channels</span> <span class="p">(</span><span class="nf">perc/new-percolation-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:percolator</span>    <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">perc/new-percolator</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:channels</span> <span class="ss">:percolation-channels</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:http</span>          <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">http/new-http-server</span> <span class="nv">conf</span><span class="p">)</span> <span class="p">{</span><span class="ss">:communicator</span> <span class="ss">:communicator</span><span class="p">})</span>
</span><span class='line'>   <span class="ss">:switchboard</span>   <span class="p">(</span><span class="nf">component/using</span> <span class="p">(</span><span class="nf">sw/new-switchboard</span><span class="p">)</span> <span class="p">{</span><span class="ss">:comm-chans</span> <span class="ss">:communicator-channels</span>
</span><span class='line'>                                                         <span class="ss">:tc-chans</span> <span class="ss">:twitterclient-channels</span>
</span><span class='line'>                                                         <span class="ss">:pers-chans</span> <span class="ss">:persistence-channels</span>
</span><span class='line'>                                                         <span class="ss">:perc-chans</span> <span class="ss">:percolation-channels</span><span class="p">})))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">system</span> <span class="p">(</span><span class="nf">get-system</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/save</span> <span class="p">(</span><span class="ss">:pidfile-name</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pid/delete-on-shutdown!</span> <span class="p">(</span><span class="ss">:pidfile-name</span> <span class="nv">conf</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log/info</span> <span class="s">&quot;Application started, PID&quot;</span> <span class="p">(</span><span class="nf">pid/current</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">alter-var-root</span> <span class="o">#</span><span class="ss">&#39;system</span> <span class="nv">component/start</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I personally think this <strong>reads really well</strong>, even if you have never seen Clojure before in your life. Roughly the first half is concerned with imports and reading the configuration file. Next, we have the <code>get-system</code> function which declares, what components depend on what other components. The system is finally started in the <code>-main</code> function (plus the process ID logged and saved to a file). This is all there is to know about the application entry point.</p>

<p>Now, when we start the application, all the dependencies will be started in an order that the component library determines so that all dependencies are met. Here&#8217;s the output of that startup process:</p>

<pre><code>mn:Clojure-Websockets mn$ lein run
16:46:30.925 [main] INFO  birdwatch.main - Application started, PID 6682
16:46:30.937 [main] INFO  birdwatch.twitter-client - Starting Twitterclient Channels Component
16:46:30.939 [main] INFO  birdwatch.twitter-client - Starting Twitterclient Component
16:46:30.940 [main] INFO  birdwatch.twitter-client - Starting Twitter client.
16:46:31.323 [main] INFO  birdwatch.persistence - Starting Persistence Channels Component
16:46:31.324 [main] INFO  birdwatch.persistence - Starting Persistence Component
16:46:31.415 [main] INFO  org.elasticsearch.plugins - [Chameleon] loaded [], sites []
16:46:32.339 [main] INFO  birdwatch.communicator - Starting Communicator Channels Component
16:46:32.340 [main] INFO  birdwatch.communicator - Starting Communicator Component
16:46:32.355 [main] INFO  birdwatch.http - Starting HTTP Component
16:46:32.375 [main] INFO  birdwatch.http - Http-kit server is running at http://localhost:8888/
16:46:32.376 [main] INFO  birdwatch.percolator - Starting Percolation Channels Component
16:46:32.377 [main] INFO  birdwatch.percolator - Starting Percolator Component
16:46:32.380 [main] INFO  birdwatch.switchboard - Starting Switchboard Component
</code></pre>

<p>Next week, we will look at how these components wire a channel grid and how information flows through this grid. You do not have to wait to see more code though, everything is on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong> already.</p>

<p>Once we have discussed the architecture in detail over the next couple of weeks, we can start observing the system under load. Of course, it would be interesting to have actual user load. But with or without actual load, we want to find a way of how to generate / simulate load and then observe the system, identify the bottlenecks and remove them. For example, the clients could be simulated by connecting a load generator via ZeroMQ or the like and deliver matches back to that application and check if they are as expected (correct, complete, timely). The Twitter stream could also be simulated, for example by connecting to a load generator that either replays recorded tweets, with full control over the rate, or with artificial test cases, for which we could exactly specify the expectations on the output side.</p>

<p>That&#8217;s it for now. Would you like to be informed when the next article is out? Just <strong>sign up</strong> for the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>mailing list</strong></a> and I will let you know. Also, if you are interested in Clojure, you may want to check out my curated list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">useful Clojure-related resources on GitHub</a></strong>.</p>

<p>Cheers,
Matthias</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In case you are interested in the animation as such, you can check out the current <strong><a href="http://matthiasnehlsen.com/blog/2014/09/23/weekly-update/">weekly review</a></strong> in which I provide some background information.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Clojure and Dependency Injection, Animations reloaded & freeing my SSD]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/23/weekly-update/"/>
    <updated>2014-09-23T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/23/weekly-update</id>
    <content type="html"><![CDATA[<p>This weekly update is mostly about my new article series, about using animations to explain complex topics and about how I just extended the useful lifespan of my <strong>2012 Retina MacBook</strong>.</p>

<!-- more -->


<h2>New article series: building systems in Clojure</h2>

<p>I am finally all set to start my new series of articles about the rewrite of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application in <strong><a href="http://clojure.org">Clojure</a></strong>. I actually have two aims. First of all, I want short articles that are a quick and informative read, with easy-to-understand code. In addition, I want to illustrate what is going on by using <strong>animations</strong> (more about that in the next section). In this first installment, I will introduce you to my approach towards <strong><a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a></strong>. I personally believe that dependency injection is crucial for building larger applications as it allows proper decoupling between components. More about that in <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">article one of the series</a></strong>.</p>

<h2>Animations reloaded</h2>

<p>Last year, I used an animation for the first time to illustrate the flow of information within an application. Here is how that looked like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_anim.gif" title="birdwatch animated information flow" alt="birdwatch animated information flow"></p>

<p>I still think that animated illustration is a great way of showing what is going in the application. Here&#8217;s a link to the <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">full article</a></strong> if you want to see for yourself. However, there is one catch to that animation and that&#8217;s the amount of time it took to produce it. The tool chain for this animation was as follows:</p>

<ul>
<li>Drawing in <strong><a href="https://www.omnigroup.com/omnigraffle">OmniGraffle</a></strong></li>
<li>Exporting <strong><a href="http://en.wikipedia.org/wiki/Portable_Network_Graphics">PNG</a></strong>s</li>
<li>Animating the PNGs in <strong><a href="http://www.adobe.com/products/aftereffects.html">Adobe After Effects</a></strong></li>
<li>Exporting the finished animation as uncompressed <strong><a href="http://en.wikipedia.org/wiki/QuickTime">Quicktime</a></strong> file</li>
<li>Importing the Quicktime file into <strong><a href="http://www.adobe.com/products/photoshop.html">Adobe Photoshop</a></strong></li>
<li>Exporting an animated <strong><a href="http://en.wikipedia.org/wiki/Graphics_Interchange_Format">GIF</a></strong> from Photoshop</li>
</ul>


<p>All these tools are insanely powerful, however the feedback loop was not as quick as I desired because by the time I had the animated GIF and noticed that I wanted to tweak something, I had to go all the way back to <strong>After Effects</strong>. That was <strong>tedious</strong>.</p>

<p>Now I have a different approach: I animate an <strong><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a></strong> drawing by using the <strong><a href="https://greensock.com/">Greensock library</a></strong>. The feedback loop is much shorter now as you can adjust a value in the JavaScript code and reload. Then inspect, reiterate and so on until you are done. Much more agreeable. If there is enough interest, I will write about this approach later. For now, it is just a <strong>very welcome addition</strong> to my toolbox; one which I intend to explore further in the next couple of articles before I may decide to write about it. Here&#8217;s how an animation using this new approach looks like. Note that unlike when working with an animated GIF, we can make drawings truly <strong>interactive</strong>:</p>

<script language="javascript" type="text/javascript">
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    obj.style.width = obj.contentWindow.document.body.scrollWidth + 'px';
  }
</script>




<iframe width="100%;" src="http://matthiasnehlsen.com/iframes/bw-anim/index.html" scrolling="no" onload="javascript:resizeIframe(this);" ></iframe>


<h2>Freeing my SSD</h2>

<p>The computer I do all my work on is a <strong>2012 Retina MacBook with 16GB RAM and 512GB SSD</strong>. In terms of performance, I have no reason at all to upgrade this machine before the extended warranty is up. after all, the currently available MacBooks are only a few percent faster than the one I already own. The only real complaint I have is that the drive space is not large enough, in part because of all the virtual machines that I like to have with me. Of course, that would have been a good excuse to buy a new Retina MacBook, but I try to use gadgets longer these days because that is just more <strong>sustainable</strong>. Think about all the <strong><a href="http://en.wikipedia.org/wiki/Rare_earth_mineral">rare earth minerals</a></strong> that are needed to build a laptop or smart phone, for example.</p>

<p>The other day, in order to alleviate the imminent shortage of disk space, I moved my 90GB iTunes library onto a <strong>128GB Transcend JetDrive Lite 350</strong> which fits exactly into the SD slot without protruding. Then, I just pointed to that new location by creating a symbolic link. You can <strong><a href="http://matthiasnehlsen.com/reviews/transcend-jetdrive-lite-350">read more in the reviews section</a></strong>. Now, I can go a while longer without constantly facing the threat of a full disk and I won&#8217;t have to buy a new laptop before Apple comes up with some truly remarkable update for the MacBook line.</p>

<h2>Closing remarks</h2>

<p>Most importantly, check out the new <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">article series</a></strong> that I just started. I hope you will find it useful and I am looking forward to your feedback. In addition, there have been plenty of new entries to my <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure-Resources</a></strong> repository on GitHub. You may want to check that out if you&#8217;re interested in Clojure at all. Finally, I bought a useful gadget that makes my digital life a little better.</p>

<p>Until next week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Clojure, Clojure, Clojure and a nasty cold]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/16/weekly-update/"/>
    <updated>2014-09-16T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/16/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will just give you a very brief update on what I&#8217;ve been doing. Most notably, I have refactored the <strong><a href="http://clojure.org">Clojure</a></strong> version of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application to use Stuart Sierra&#8217;s <strong><a href="https://github.com/stuartsierra/component">component library</a></strong>. Other than that, I am calling in sick for the week.</p>

<!-- more -->


<p><a href="http://birdwatch2.matthiasnehlsen.com" target="_blank"><img class="left" src="http://matthiasnehlsen.com/images/bw-clj.gif" title="BirdWatch in action" alt="BirdWatch in action"></a></p>

<br />


<p>Above you can see what the latest <strong>all-Clojure</strong> version looks like. I have added two features: <em>a)</em> aggregation and sorting by <strong>reach</strong> and <em>b)</em> a counter for the total number of tweets indexed, which is updated every ten seconds. You can see a live version by clicking on the animated GIF.</p>

<h2>Componentizing BirdWatch</h2>

<p>Over the weekend, I have componentized the server side of <strong><a href="https://github.com/matthiasn/birdwatch/">BirdWatch</a></strong>. In terms of functionality I had been content with the earlier version, but in terms of the structure, I started to recognize something that I have <strong>learned to dread</strong>: an application where everything depends on everything. Okay, in this case at least there, were no circular dependencies (any more), but there were still way too many dependencies between namespaces, in a way that I had seen way too often in past projects to lull myself into being satisfied. I don&#8217;t even like real <strong><a href="http://en.wikipedia.org/wiki/Spaghetti">spaghetti</a></strong> all that much.</p>

<p>The <strong><a href="https://github.com/stuartsierra/component">component library</a></strong> offers help by allowing us to structure an application into components (and boundaries between them) and then wire them together by means of <strong><a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a></strong>. It took a moment or two to wrap my head around it, but once I had, I was convinced that I wanted to reap the benefits of <strong>DI</strong> and rewrite my application. The library&#8217;s description contains a fair warning that it is somewhat difficult to refactor an existing application to use it throughout, but I can now say for sure that it can be done and that it&#8217;s worth it.</p>

<p>As a result I have an application where ONLY the main namespace depends on the different components it wires together via dependency injection. Other than that, the different namespaces know nothing about each other. Communication between the different components takes places via <strong><a href="https://github.com/clojure/core.async">core.async channels</a></strong>, which all live in a single component. The component holding the channels is then injected into the other components as a dependency.</p>

<p>I find this new architecture beautiful and I will surely write more about it soon. Until then, I could use <strong>your help</strong>. I am really just getting started with Clojure, and this is my first real application written in it. I would love to have more knowledgeable Clojurians review the code and point out to me possible improvements. Right now, I would especially appreciate your feedback regarding the <strong><a href="https://github.com/matthiasn/BirdWatch/tree/master/Clojure-Websockets/src/clj/birdwatch">server-side code</a></strong>.</p>

<h2>Are Clojure developers happier?</h2>

<p>I recently read an article that <strong><a href="http://www.itworld.com/big-data/433057/clojure-developers-are-happiest-developers">Clojure developers are the happiest</a></strong> developers. While I cannot honestly say that the article provides hard evidence, I can say for sure that I, for one, enjoy programming in <strong><a href="http://clojure.org">Clojure</a></strong> more than I enjoyed programming in other languages in a while. I have also found the community rto be eally helpful. Yesterday, I had a problem I couldn&#8217;t figure out myself. After scratching my head for way too long, it only took a few minutes after joining the <strong><a href="http://clojure-log.n01se.net/date/2014-09-16.html">Clojure room</a></strong> on <strong>IRC</strong> for me to be happily coding again.</p>

<h2>Clojure Resources</h2>

<p>I recently liberated my accumulated list of bookmarks on Clojure-related stuff and have since added every new link and useful link I came across. I am now working on making it a habit of writing a sentence or two about all the new resources I discover. In the past couple of days, I was really happy to see that people seem to find this compilation useful. Please go check it out if you haven&#8217;t already: <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure-Resources on GitHub</a></strong>.</p>

<h2>Closing remarks</h2>

<p>Okay, back to bed - I need to get rid of this nasty cold ASAP. I have stuff to do; stuff other than coughing. The bugs came without invitation last week and now they don&#8217;t seem inclined to leave. But on the upside, I went to the doctor today and he gave me a prescription for three different medications and assured me that I&#8217;d survive.</p>

<p>Have a great remaining week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: PageSpeed Insights, optimizing Octopress & more Clojure]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/08/weekly-update/"/>
    <updated>2014-09-08T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/08/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will discuss how I turned the load times for this <strong><a href="http://octopress.org/">Octopress</a></strong>-powered blog <strong>from terrible to pretty decent</strong>. In <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com">PageSpeed Insights</a></strong> numbers: before the optimization <strong style="color:#DD0000;">58/100</strong> for mobile and <strong style="color:#EE8800;">77/100</strong> for desktop; after the optimization <strong style="color:#00AA66;">94/100</strong> for mobile and <strong style="color:#00AA66;">96/100</strong> for desktop. More concretely: on a lousy mobile connection, the load time improved from <strong>32 seconds</strong> to a mere <strong>5 seconds</strong>. Now we&#8217;re talking. You would presumably <strong>not have waited</strong> for 32 seconds, and neither would I. Also, I have a status update on the <strong><a href="http://clojure.org/">Clojure</a></strong> version of <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong>.</p>

<!-- more -->


<h2>Making this page load fast, even on a pre-3G mobile connection</h2>

<p>Some time ago I attempted to open my blog on my smart phone and, to my dismay, it took like forever to load. I noticed that I did not have a <strong><a href="http://en.wikipedia.org/wiki/3G">3G</a></strong> connection at the time but come on, you should be able to open the page even if you only have an <strong><a href="http://en.wikipedia.org/wiki/Enhanced_Data_Rates_for_GSM_Evolution">Edge</a></strong> connection with decent signal strength at your disposal. I was <strong>sad</strong>. Then I ran Google&#8217;s <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com">PageSpeed Insights</a></strong> and that tool confirmed that things weren&#8217;t rosy:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed_before.png" title="PageSpeed results before optimization" alt="PageSpeed results before optimization"></p>

<p><strong style="color:#DD0000;">Red</strong> for mobile. That&#8217;s exactly how I would describe my previous experience. Now, after a couple of simple changes, here is how things look <strong>now</strong>:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed_after.png" title="PageSpeed results after optimization" alt="PageSpeed results after optimization"></p>

<p>Not only does that look substantially better, it also makes <strong style="color:#00AA66;">all the difference</strong> in terms of user experience. I subjected a friend of mine to a tiny experiment involving his smart phone. The blog had never been loaded on it before, so certainly nothing was cached. We switched off the Wifi connection and <strong>disabled 3G</strong> so all that remained was four bars of an <strong><a href="http://en.wikipedia.org/wiki/Enhanced_Data_Rates_for_GSM_Evolution">Edge</a></strong> connection. Initially, we loaded the new and optimized version, and it took a mere <strong>5 seconds</strong> until the page was visible and properly styled, except for the right web font. His reaction was <strong>&#8220;wow, that was fast&#8221;</strong> considering that we were on a really sluggish network connection. Next, we opened the old version with none of the optimizations, and that took a prohibitive <strong>32 seconds</strong>. From half a minute to 5 seconds, that is a hugely desirable improvement. Let&#8217;s now have a look at what was necessary for this <strong style="color:#00AA66;">triumph</strong> over the intricacies and pitfalls of speedy web page delivery.</p>

<h3>Inlining the CSS / above-the-fold content</h3>

<p>One of the complaints that <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com">PageSpeed Insights</a></strong> uttered was that the <strong>above-the-fold CSS</strong> was in a separate file. <strong>Above-the-fold</strong> is the portion of the page that needs to be fully loaded before <strong>any</strong> rendering whatsoever can happen. You want this above-the-fold portion to load as swiftly as possible because any delay here will keep the browser from rendering the page altogether, which of course means that most people are <strong>leaving</strong> rather than staring at a blank page for ten seconds or longer.</p>

<p>Funny enough, I think I read somewhere that people tend to be even more impatient on mobile devices, despite the slower network connection to begin with. And that makes sense. On desktop, I typically have twenty or more tabs open anyway. If something doesn&#8217;t load immediately, my attention will either move to another application like mail or to another tab. Good for a page if I divert my attention to checking email; then, at least, I will see the page once I come back to the browser. Another tab is worse as I probably won&#8217;t come back in a timely manner or ever. But at least, there&#8217;s a chance. On mobile, though, once I&#8217;m gone, I&#8217;m typically <strong>gone for good</strong>.</p>

<p>In order to not hold up page loading by fetching the <code>screen.css</code> and being penalized with an additional <strong><a href="http://en.wikipedia.org/wiki/Round-trip_delay_time">round trip</a></strong>, I embedded the entire CSS in the header of each HTML file. While that incurred an extra <strong>39KB</strong>, in the compressed files the difference was a mere <strong>7KB</strong>. This extra amount of data certainly loads faster than the extra round trip would take. This is particularly true for <strong>pre-LTE</strong> mobile which is notorious for long <strong><a href="http://en.wikipedia.org/wiki/Round-trip_delay_time">ping times</a></strong>. However, embedding all the CSS only works up to a certain size. While I don&#8217;t know the threshold, there comes a certain size where PageSpeed Insights starts complaining. But I suppose I can consider myself lucky that the resulting file size fell within the range that is deemed acceptable. Otherwise, one would have to figure out which parts of the CSS are essential to the initial rendering and then only embed that, with the rest loaded at the bottom of the HTML body.</p>

<h3>Nginx instead of hosted page</h3>

<p>Before, I was using a hosted web page where I had no real influence over how the files were served. Specifically, I had no control over <strong><a href="http://en.wikipedia.org/wiki/HTTP_compression">HTTP compression</a></strong> settings, <strong><a href="http://en.wikipedia.org/wiki/HTTP_ETag">ETags</a></strong> or <strong><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching">HTTP caching</a></strong>. In addition, it was also increasingly annoying to update the content because the only available method was <strong><a href="http://en.wikipedia.org/wiki/File_Transfer_Protocol">FTP</a></strong>. When I got started with the blog, that was bearable, but with an increasing number of files, specifically images, it started to take a few minutes. What I really wanted instead was to use either <strong><a href="http://en.wikipedia.org/wiki/Rsync">rsync</a></strong> or <strong><a href="http://git-scm.com/">git</a></strong>. I had a server already (the one used, for example, for serving <strong>BirdWatch</strong>) with <strong><a href="http://nginx.org">nginx</a></strong> running, so the first thing I did was move my blog over there and reconfigure the domain&#8217;s <strong><a href="http://en.wikipedia.org/wiki/Domain_Name_System">DNS</a></strong> settings. Here is the section of the <strong>nginx.conf</strong> that is now responsible for serving the blog:</p>

<figure class='code'><figcaption><span>nginx config nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user www-data;
</span><span class='line'>worker_processes 4;
</span><span class='line'>pid /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 15000;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  include       mime.types;
</span><span class='line'>  default_type  application/octet-stream;
</span><span class='line'>  charset UTF-8;
</span><span class='line'>
</span><span class='line'>  gzip_static on;
</span><span class='line'>  gzip on;
</span><span class='line'>  gzip_proxied any;
</span><span class='line'>  gzip_types text/plain text/html text/css application/json application/javascri
</span><span class='line'>pt application/xml application/xml+rss text/javascript;
</span><span class='line'>  gzip_vary on;
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  www.matthiasnehlsen.com;
</span><span class='line'>    return       301 http://matthiasnehlsen.com$request_uri;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  matthiasnehlsen.com;
</span><span class='line'>    root /home/bw/octopress-blog/public;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>      autoindex on;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # Media: images, icons, video, audio, HTC
</span><span class='line'>    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$
</span><span class='line'> {
</span><span class='line'>      expires 1M;
</span><span class='line'>      access_log off;
</span><span class='line'>      add_header Cache-Control &quot;public&quot;;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # CSS and Javascript
</span><span class='line'>    location ~* \.(?:css|js)$ {
</span><span class='line'>      expires 1y;
</span><span class='line'>      access_log off;
</span><span class='line'>      add_header Cache-Control &quot;public&quot;;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m no expert in the subject of <strong>nginx configuration</strong>, but the above seems to be working well for what I am trying to do. If you are more knowledgeable and spot any nonsense in there, please let me know. Note that <code>www.matthiasnehlsen.com</code> is forwarded to the same host but without <code>www.</code> in front of all URLs. This is to make Google happy as it would otherwise <strong>index both versions as separate entities</strong> and thus potentially <strong>dilute the rank</strong> at which the page appears in search results.</p>

<h4>Expiration settings</h4>

<p>For the configuration of <strong>nginx</strong>&#8217;s expiration settings, I used <strong><a href="https://github.com/h5bp/html5-boilerplate">html5-boilerplate</a></strong>&#8217;s <strong><a href="https://github.com/h5bp/server-configs-nginx/blob/master/h5bp/location/expires.conf">server-configs-nginx</a></strong> project as a template. The suggested settings in there worked well and I got no further complaints from <strong>PageSpeed Insights</strong> about caching of any resources that are under control of my <strong>nginx</strong> server. Obviously, there is little I can do about resources served from elsewhere.</p>

<h4>Gzipping the content</h4>

<p>The configuration above enables both static content compression and on-the-fly compression. Under heavy load, static compression is preferable where nginx serves the gzip version of a file, should it exist with the same name but with an appended <code>.gz</code>. If this file is not available, nginx instead compresses the content on-the-fly, obviously resulting in a somewhat higher CPU utilization as that work will need to be performed time and again. I have only gzipped some resources while others are compressed on-the-fly. I have never really seen high CPU utilization from nginx on my server, therefore for me at this point, high nginx load due to compression is a luxury problem for which I would probably need to increase the number of visitors by an order of magnitude or two. But when that happens, I may look once more into pre-compression of more of the files. Part of the reason I don&#8217;t run into issues here is probably because the server is bare metal and has a powerful Xeon CPU. If this was a virtual machine sharing the CPU with other guest VMs, the effect would probably be measurable already, despite the modest number of concurrent users that the server is handling at the moment.</p>

<h3>Move webfonts out of above-the-fold content</h3>

<p>For the blog, I am using a non-standard <strong><a href="http://en.wikipedia.org/wiki/Web_typography">web font</a></strong> named <strong><a href="http://www.type-together.com/Tablet%20Gothic">Tablet Gothic</a></strong> from an independent type foundry named <strong><a href="http://www.type-together.com/info">TypeTogether</a></strong>. I like this font family a lot for many reasons, not least because there is a vast range of styles available (84 altogether). The narrow versions for headlines work really well with the body text. I also think that this font family is really pretty. I don&#8217;t have to pay extra for the font as it is included in the <strong><a href="https://typekit.com">TypeKit</a></strong> service of my <strong><a href="https://www.adobe.com">Creative Cloud</a></strong> subscription. However, there is a downside to web fonts when it comes to page render times. At least if you load the font above-the-fold, which I previously did. That will hold up the page rendering until both the TypeKit script and the actual files are loaded. But after thinking about it, I decided that showing the page in <em>Helvetica Neue / SansSerif</em> first is better than not rendering anything at all for a long time. If your connection is fast, you&#8217;ll hardly notice and if it is not, you will probably still not leave in disgust just because you were subjected to another perfectly fine font for a few seconds. Your mileage may vary, of course, but personally, I don&#8217;t think I&#8217;d use web fonts - unless showing a built-in font first would be okay - because loading the files related to the web fonts alone can take over ten seconds on a slow connection.</p>

<h3>What else could be done?</h3>

<p>Short answer in my case: <strong>nothing really</strong>. With these changes in place, <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=matthiasnehlsen.com&amp;tab=mobile">PageSpeed Insights</a></strong> now only complains about items that are outside of my sphere of influence:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed_after2.png" title="pagespeed results after optimization" alt="pagespeed results after optimization"></p>

<p>I could remove the <strong><a href="https://github.com/mdo/github-buttons">GitHub buttons</a></strong>, the <strong><a href="http://www.google.com/analytics/">analytics script</a></strong> and the <strong>web font</strong> altogether just to get an even higher score, but I won&#8217;t. I am happy with the results and I am not willing to forego any of them. I also find it somewhat odd that one Google tool (PageSpeed Insights) complains about the script of another Google tool (Google Analytics) - as if I could do anything about that! In addition, I think that the complaint about leveraging longer cache times for the GitHub API calls is <strong>plain wrong</strong>. Those are <strong><a href="http://en.wikipedia.org/wiki/JSONP">JSONP</a></strong> calls rather than static content. Arguably, the resource need not be cached at all if we want the result to be accurate.</p>

<p>I also ran <strong><a href="https://developer.yahoo.com/yslow/">YSlow</a></strong>, which seemed pretty happy with the optimizations as well:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/yslow.png" title="YSlow results after optimization" alt="YSlow results after optimization"></p>

<p><strong style="color:#00AA66;">Grade A (94/100)</strong> sounds much better than the <strong style="color:#EE8800;">Grade C (78/100)</strong> that YSlow previously gave this blog.</p>

<h3>Useful links</h3>

<p>Here are a handful of articles that I found useful while squeezing the last bit of performance out of this blog. Google has a few great resources available, for example on <strong><a href="https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery">Optimizing CSS Delivery</a></strong>, <strong><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#invalidating-and-updating-cached-responses">HTTP Caching</a></strong> and <strong><a href="https://developers.google.com/web/fundamentals/performance/">Optimizing Performance</a></strong> in general. I consider them a <strong>must-read</strong> if you are serious about delivering a speedy user experience. Also really helpful: the <strong>YouTube channels</strong> of <strong><a href="https://www.youtube.com/user/igrigorik">Ilya Grigorik</a></strong> and <strong><a href="https://www.youtube.com/user/addyosmani">Addy Osmani</a></strong>.</p>

<h2>BirdWatch in Clojure, ClojureScript and Om</h2>

<p>I did a lot of refactoring of the new version of <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong> this past week. The application architecture still feels like clay in my hands, but the sculpture is getting into a decent shape. I made the interesting discovery that there really <strong>weren&#8217;t any performance issues</strong> introduced by the <strong>Clojure</strong> rewrite. Rather, the problem was sitting in front of the screen. My initial version triggered a re-render of the word cloud <strong>a few orders of magnitude more often</strong> than what a reasonable and sane person would have done.</p>

<p>Considering that the word cloud layout is probably the most expensive operation in the entire client-side application, it is no wonder that the application did not respond in the way I would have hoped. It is kind of <strong>spectacular that it worked at all</strong>&#8230;</p>

<p>I also did some preparations for moving the aggregation of previous tweets to the server. More precisely, the client side can now request missing tweets via <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a></strong> command messages and subsequently render the full tweet once it is back from the server. This isn&#8217;t terribly useful yet, but it will be at a later stage. Once <strong>server-side aggregation</strong> is in place, it will no longer be necessary to transmit all thousands of the analyzed tweets to the client. This should either reduce the memory fingerprint by a lot when analyzing the same number of tweets or enable a <strong>much</strong> higher number of tweets for the same memory utilization. It should also reduce page load times, potentially by a lot.</p>

<p>Here&#8217;s the current version as a <strong><a href="http://birdwatch2.matthiasnehlsen.com">live demo</a></strong>.</p>

<h2>My Clojure Resources List</h2>

<p>While working on the <strong>Clojure</strong> application described above, I constantly added fresh
links to this list of <strong><a href="https://github.com/matthiasn/Clojure-Resources">Clojure resources on GitHub</a></strong>. This week, I added several articles I discovered and found useful and or sometimes outright entertaining. Maybe you&#8217;ll find enlightening stuff in there as well. Or you may have a link that you believe belongs in there, too. Just let me know or, better yet, submit a <strong>pull request</strong> with the link and a short comment.</p>

<h2>Conclusion</h2>

<p>I still want to redesign the blog. But at least the load times have improved tremendously so redesigning it isn&#8217;t that urgent. Unlike before, the load times even on mobile are such that visitors should only leave because the content of this blog is irrelevant to them, not because the page doesn&#8217;t load. By the way, back in <strong>December 2013</strong> I put a little work into a fast <strong>AngularJS</strong>-based <strong>blog engine</strong>. I have not worked on it since, but I thought at least I could open source it. There is no good reason for it to sit in a private repository, after all. I am now curious about some feedback. The cool feature include client-side rendering from markdown, configurable and animated code blocks (see at the bottom of the live demo) and a live preview while authoring. Here&#8217;s the <strong><a href="https://github.com/matthiasn/ng-blog">ng-blog repository on GitHub</a></strong> and here&#8217;s a <strong><a href="http://ng-blog.org/blog">live demo</a></strong>. I am just putting this out there to see if anyone is interested. If so, I would probably put more work into it.</p>

<p>Then, coding in <strong>Clojure</strong> was once again exciting and productive last week, with like <strong>35 commits</strong> so far this month. Things are finally settling down, which means that I will soon be able to start a series of articles about this application. In that regard, please let me know if <strong>you have any ideas</strong> for features that would make the application more <strong>useful</strong> for you. It is already great that this little toy application of mine has received so much love (if love can be counted in GitHub stars) and I appreciate that a lot, but it would be even more awesome if the application solved an actual problem. I would <strong>love to start a conversation</strong> (or two or three) here.</p>

<p>Thanks and until next week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Pomodoro, all-Clojure BirdWatch, Income]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/09/03/weekly-update/"/>
    <updated>2014-09-03T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/09/03/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will be talking about <strong>why I started this blog</strong> in the first place, <strong>Pomodoro time management</strong>, and the new <strong>Clojure</strong> and <strong>ClojureScript</strong> version of my <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong> application. Again there is a live version, this time subscribing to all tweets containing the term <strong>Ferguson</strong>. Also, the results are out for the first month of <strong>blog monetization</strong> through <strong>affiliate links</strong>.</p>

<!-- more -->


<h2>Why I started this blog in the first place</h2>

<p>Initially, when I started this blog, I wanted to explore real-time information processing. My initial project was the <strong><a href="https://github.com/matthiasn/Birdwatch">BirdWatch</a></strong> application which has evolved quite a bit since the first version came out. But then, for a while, I focused more on frameworks and libraries than on the underlying architectural principles. That was probably also due to the fact that I was not convinced I really had the right tools in my toolbox. Well, that has changed. It is a luxury to use (roughly) the same language on both the server and the client, in particular if as a single developer you want to quickly explore an idea end-to-end.</p>

<h2>Pomodoro time management</h2>

<p>For a while now I have been using the <strong><a href="http://pomodorotechnique.com">Pomodoro</a></strong> time management technique and it has served me <strong>extremely well</strong>. The main idea is to set a timer (such as the tomato-shaped kitchen timers) to a predefined time interval and then fully focus on a single task with no distractions allowed whatsoever. The default time interval is <strong>25 minutes</strong> and while it is possible to adapt this to suit your needs, I have found the 25 minutes to be perfect for mine. Then you take a 5-minute break after every interval or a 15-minute break after the successful completion of four of these Pomodoro intervals. I find that I am much <strong>more productive</strong> when I use this technique.</p>

<p>It is also a great help if you tend to <strong>procrastinate</strong>. It is usually a good idea to start with just one of these 25-minute intervals per day for so-and-so many days. The reason why I mention it is that in the next section, I will talk about an experiment I made to find out if it was possible to implement an entire real-time feature (both on the client and the server side) of the BirdWatch application within one of these 25-minute intervals and the answer is yes. I finished 76 seconds earlier than the allotted time.</p>

<h2>BirdWatch in Clojure and ClojureScript, #Ferguson</h2>

<p>In the last two weeks, I finally got around to rewriting the <strong><a href="https://github.com/matthiasn/Birdwatch/tree/master/Clojure-Websockets">BirdWatch</a></strong> application so that it now uses <strong>Clojure</strong> on the server side and <strong>ClojureScript</strong> on the client side. During that process, I also changed the implementation of the bi-directional communication from using <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> + <strong>REST API calls</strong> to using <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSockets</a></strong>. Since <strong><a href="http://matthiasnehlsen.com/blog/2014/08/25/weekly-update/">last week&#8217;s update</a></strong> I have been able to tackle the remaining issues and today I proudly present the fully functional <strong><a href="https://github.com/matthiasn/Birdwatch/tree/master/Clojure-Websockets">all-Clojure version</a></strong>.</p>

<p>Of course, there is also a live version running on my server. This time I did not use the selection of software related terms that I used previously, but instead let my application subscribe to the term <strong>Ferguson</strong>. This is because I was particularly interested in how the situation in <strong><a href="http://en.wikipedia.org/wiki/Ferguson,_Missouri">Ferguson, Missouri</a></strong> was (and is) developing. So what you see when you click the image below is an application that retrieves all tweets mentioning the term. This has been a highly educational topic to follow during the process of writing this new version of the application. I am <strong>deeply disturbed</strong> by how much of a difference the color of your skin seems to make when it comes to how government authorities deal with you as a human being. More broadly, I am also very concerned about <strong>militarization</strong> of police forces in the USA and elsewhere in the world.</p>

<p>Click the image or alternatively <strong><a href="http://birdwatch2.matthiasnehlsen.com/">click here</a></strong> to open a live version of this application.</p>

<p><a href="http://birdwatch2.matthiasnehlsen.com/" target="blank"><img class="left" src="http://matthiasnehlsen.com/images/bw-ferguson.png" title="BirdWatch Screenshot for term Ferguson" alt="BirdWatch Screenshot for term Ferguson"></a></p>

<p>In the Pomodoro time management section above, I mentioned a little experiment I carried out to determine how much I would be able to achieve in a single 25-minute Pomodoro time interval. Yesterday I had the idea that I wanted to know how many clients were connected to the live version of this application at any given time. Right after I had the idea, I asked myself if this was doable in a single Pomodoro interval. So I set the timer and started right away. All of my thoughts concerning this feature, the implementation on both client and server, the testing (on Chrome, Firefox, Safari, and Opera), and the code documentation and prettification were done and there were still 76 seconds left before my digital kitchen timer started ringing. Almost time to take a little nap. Here&#8217;s how that looks like, see the upper right corner:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw-ferguson2.png" title="Connection count feature" alt="Connection count feature"></p>

<p>Every other second, all clients are notified about the number of current number of simultaneous connections. It is really useful to have a message bus for different message types between client and server. More on that in a future article.</p>

<p>Considering that I have just started out with Clojure and that this is my first real application written in it, I have a hunch that I may have found the tools that I have been looking for all the while. Sure, this was not a very large feature, but the fact alone that it was possible to implement it in such a short time on both server and client without significant context switches in the brain bodes well for productivity.</p>

<p><strong>What&#8217;s next?</strong> I will work on a series of articles describing the application architecture in detail. Also, I will put much more focus on a mobile version of the application. Currently, it does not work well on mobile devices. In order to alleviate performance issues, I will move a good part of the computation for previous tweets to the server side. The layout needs some major rework for mobile as well. I&#8217;ll keep you posted.</p>

<h2>Affiliate links results for the first month</h2>

<p>A couple of weeks ago I <strong><a href="http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework/">wrote</a></strong> about a tool for country-specific deliveries of Amazon affiliate links. The results for the first month are out now. I made a whopping <strong>$44.37</strong>. Hmm, I will try not to spend it all at once, I promise. But to be honest, I don&#8217;t think the result is all that bad. Particularly if you consider that I have not written many reviews just yet. Eventually, it should be possible for the blog to finance itself, maybe even retroactively. I will try to write more quality reviews in the weeks to come. Then, by the time Santa climbs down the chimneys, there will hopefully be more clicks on those links and better conversion rates. What I have read about affiliate marketing is that people who do it successfully talk about how much of a difference the holiday season makes. We&#8217;ll see.</p>

<h2>Gadget reviews</h2>

<p>I still have not found the perfect travel lens for my <strong><a href="http://matthiasnehlsen.com/reviews/sony-a7/">Sony A7</a></strong> camera. One contender was the <strong>Zeiss Vario-Tessar T* FE 24-70mm f/4 ZA OSS</strong>, but in the end I decided to send it back for a refund. <strong><a href="http://matthiasnehlsen.com/reviews/zeiss-24-70">Read all about it here</a></strong>.</p>

<h2>Conclusion</h2>

<p>The last week was a lot of fun. I mostly focused on the <strong>Clojure</strong> and found that be be very rewarding. There is plenty of stuff I still want to do with this application and I am really looking forward to getting around to those features.</p>

<p>Last week’s cliffhanger was a section on speed improvements on this blog. Sorry, but you will have to wait a little longer for that story. I was so busy writing Clojure that I didn’t find the time to write it down. But no worries, the speed improvements will be covered soon.</p>

<p>Have a great remaining week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: AngularJS book, BirdWatch and Clojure, Web Components, Upstart and Play]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/25/weekly-update/"/>
    <updated>2014-08-25T19:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/25/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will be talking about <strong>Clojure and ClojureScript</strong>, an upcoming article on <strong>AngularJS, Grunt, Karma and Protractor</strong> and how I use <strong>Upstart</strong> to run my <strong>Play</strong> applications as services on <strong>Ubuntu</strong>.</p>

<!-- more -->


<h2>AngularJS book available for pre-order on Amazon, Meetup</h2>

<p>I am very excited that the book that <strong><a href="http://amitgharat.wordpress.com">Amit Gharat</a></strong> and I wrote about <strong><a href="http://www.amazon.com/gp/product/1783288477/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1783288477&amp;linkCode=as2&amp;tag=matthiasnehls-20&amp;linkId=7WKFJKNQICCUSFES">AngularJS UI Development</a></strong> is now available for <strong><a href="http://www.amazon.com/gp/product/1783288477/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1783288477&amp;linkCode=as2&amp;tag=matthiasnehls-20&amp;linkId=7WKFJKNQICCUSFES">pre-order on Amazon</a></strong>. Interesting experience to see it being listed already while still working on the final stages.</p>

<p>We will have <strong>content</strong> available for <strong>preview</strong> soon. On my end, I will <strong>publish</strong> an article about <strong>setting up the environment for AngularJS</strong> with a <strong>build system consisting of Grunt, Bower, Karma and Protractor</strong>. Last week I also gave a talk on the subject at the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/events/196972082/">Hamburg AngularJS meetup</a></strong>. Or rather a live coding session in which we coded up an application that is being <strong>tested in Chrome, Firefox, PhantomJS and also in Mobile Safari</strong>. <strong>Android</strong> is still <strong>missing</strong> due to some difficulties but should be added soon. Two interesting questions came up during the meetup: <strong>a)</strong> How do you test swipe gestures? <strong>b)</strong> When selecting elements to click by <strong>id</strong>, will <strong><a href="https://github.com/angular/protractor">Protractor</a></strong> catch errors if an element, though visible, is covered by another element and thus cannot be clicked? Tests should also be added for cases such as these. The project the article will be based upon is already available on <strong><a href="https://github.com/matthiasn/angular-grunt-protractor-starter">GitHub</a></strong>. You may find it to be a good starting point for an <strong>AngularJS</strong> application that includes a <strong>test</strong> and <strong>build</strong> system. Besides the planned article I also want to do a <strong>screencast</strong> on the subject. Stay tuned. By the way, <strong>you</strong> could help with testing the application on Android or adding the additional test cases.</p>

<h2>Tweet stream analysis with Clojure and ClojureScript/Om</h2>

<p>I recently <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">rewrote</a></strong> the client side of my <strong><a href="https://github.com/matthiasn/birdwatch">BirdWatch</a></strong> application using <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and <strong><a href="https://github.com/swannodette/om">Om</a></strong>. While I enjoyed the process, I also noticed some performance issues when I tried to keep the application responsive while <strong>ingesting and transforming</strong> thousands of previous tweets as quickly as possible. While optimizations certainly could have been done on the client side alone, this was a good reminder that the information flow architecture was <strong>far from ideal</strong>. The previous version was also a bit of a <strong>Frankenstein&#8217;s patchwork</strong> of programming languages. I acknowledge that it may be a little bit of a <strong>tough sell</strong> to have to understand both <strong><a href="http://www.scala-lang.org">Scala</a></strong> and <strong><a href="http://clojure.org">Clojure</a></strong> in order to wrap your head around a single application. Totally unnecessary, too.</p>

<p>So I rewrote the server side using <strong>Clojure</strong>. That already works nicely, this time making use of <strong><a href="http://en.wikipedia.org/wiki/WebSocket">WebSockets</a></strong> instead of <strong><a href="http://en.wikipedia.org/wiki/Server-sent_events">Server-Sent Events</a></strong>. Turns out <strong>WebSockets</strong> are a nice fit conceptually for <strong><a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP-style channels</a></strong>.</p>

<p>A couple of things still need to be resolved. In order to fully achieve the previous functionality, there needs to be an <strong>auto-reconnect</strong> if the connection to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> is lost. That should be really simple, given what is there already. Also, <strong>matching</strong> new tweets with the clients&#8217; queries using <strong>ElasticSearch</strong>&#8217;s <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html">Percolator</a></strong> and only delivering a <strong>filtered stream</strong> needs to be implemented. This is slightly more involved, but also seems totally doable.</p>

<p>Above and beyond, it seems useful to <strong>partially perform</strong> the computation (ranking by retweets, word counts) <strong>on the server</strong> in order to <strong>reduce the load</strong> on the client. With <strong>Clojure</strong> and <strong>ClojureScript</strong> being so similar, my idea is to use a part of the code base on both sides and split the computation. Then, the amount of data having to traverse the potentially slow network connection would be reduced drastically, leading to faster loading and a more <strong>mobile-friendly</strong> memory footprint of the client.</p>

<p>A new article on this application rewrite will follow soon. The work in progress code is on <strong><a href="https://github.com/matthiasn/BirdWatch/tree/2014-08-25-Clojure-Server">Github</a></strong> already, currently in a separate branch.</p>

<h2>Web Components / Polymer / X-Tag resources</h2>

<p>As already mentioned last week, I find some of the ideas behind <strong><a href="http://webcomponents.org">Web Components</a></strong> <strong>brilliant</strong>, in particular <strong>Shadow DOM</strong> and <strong>Custom Elements</strong>. Now that I am learning these concepts anyway, I thought I might as well <strong>share useful resources</strong> I come across, so I have created a <strong><a href="https://github.com/matthiasn/WebComponents-Polymer-Resources">list over on GitHub</a></strong>. Check it out and <strong>please add your links</strong> too. I expect this list to grow substantially in the next couple of weeks.</p>

<h2>Upstart scripts for Play</h2>

<p>I am running <strong>live instances</strong> of my <strong><a href="http://playframework">Play</a></strong> applications (BirdWatch, sse-chat, amzn-geo-lookup) on an <strong><a href="http://www.ubuntu.com">Ubuntu</a></strong> server. There are <strong>hardly any disruptions</strong>, something like once every few months. But whenever they occurred, I had to restart the applications <strong>manually</strong>. Not terrible when all is running smoothly, but not great either. So how could that be done better? <strong><a href="http://upstart.ubuntu.com">Upstart</a></strong> provides the answer. After some googling I found <strong><a href="http://www.agileand.me/blog/posts/play-2-2-x-upstart-init-script">this blog post</a></strong> by <strong><a href="https://twitter.com/ajevans85">Adam Evans</a></strong>. I have only slightly modified it and now, I have all of my applications running as services that I can <strong>start</strong> and <strong>stop</strong> the way one would expect, e.g.:</p>

<pre><code># status birdwatch
birdwatch start/running, process 947
# stop birdwatch
birdwatch stop/waiting
# start birdwatch
birdwatch start/running, process 30453
</code></pre>

<p>Also, the services <strong>start automatically</strong> after a system reboot.</p>

<p>So what needs to be done? First of all, we need a standalone instance of the applications using the <strong><a href="https://www.playframework.com/documentation/2.2.x/ProductionDist">dist</a></strong> command, e.g.;</p>

<pre><code># play dist
[info] Loading project definition from /home/bw/BirdWatch/project
[info] Set current project to BirdWatch (in build file:/home/bw/BirdWatch/)
[info] Wrote /home/bw/BirdWatch/target/scala-2.10/birdwatch_2.10-0.3.0.pom
[info] 
[info] Your package is ready in /home/bw/BirdWatch/target/universal/birdwatch-0.3.0.zip
</code></pre>

<p>We can unpack the zip file where we choose and then simply adapt the script from the blog post mentioned above, in this case:</p>

<pre><code>description "Upstart script for https://github.com/matthiasn/Birdwatch, modified from http://www.agileand.me/blog/posts/play-2-2-x-upstart-init-script"

env USER=bw
env GROUP=www
env APP_HOME=/home/bw/apps/birdwatch-0.3.0
env APP_NAME=birdwatch
env PORT=9000
env BIND_ADDRESS=0.0.0.0
env EXTRA=""

start on (filesystem and net-device-up IFACE=lo)
stop on runlevel [!2345]

respawn
respawn limit 30 10
umask 022
expect daemon

pre-start script
    #If improper shutdown and the PID file is left on disk delete it so we can start again

    if [ -f $APP_HOME/RUNNING_PID ] &amp;&amp; ! ps -p `cat $APP_HOME/RUNNING_PID` &gt; /dev/null ; then
        rm $HOME/RUNNING_PID ;
    fi
end script

exec start-stop-daemon --pidfile ${APP_HOME}/RUNNING_PID --chdir ${APP_HOME} --chuid $USER:$GROUP --exec ${APP_HOME}/bin/$APP_NAME --background --start -- -Dhttp.port=$PORT -Dhttp.address=$BIND_ADDRESS $EXTRA
</code></pre>

<p>Et voilà - after a restart of the server, all services come up as expected. Much nicer. The script is also on <strong><a href="https://github.com/matthiasn/BirdWatch/blob/797c9b27eeb018138e90f95ad3df8774b4fbd6e5/conf/upstart/birdwatch.conf">GitHub</a></strong>. For more information, check out the <strong><a href="http://upstart.ubuntu.com/cookbook/">upstart cookbok</a></strong> and the <strong><a href="http://upstart.ubuntu.com/getting-started.html">getting started guide</a></strong>.</p>

<h2>Conclusion</h2>

<p>Last week was fairly <strong>productive</strong>, I got some really cool stuff done that had been on my mind for a while. I hope to continue this flow in the week that has just started. I&#8217;ll let you know next week. <strong><a href="http://en.wikipedia.org/wiki/Cliffhanger">Cliffhanger</a></strong>: I recently increased the <strong><a href="https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fmatthiasnehlsen.com&amp;tab=desktop">Google PageSpeed Insights</a></strong> score of this blog by a lot, from <strong>58/100 to 83/100 for mobile</strong> and from <strong>77/100 to 90/100 for desktop</strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed.png" title="'pagespeed results'" ></p>

<p>It also feels like the pages are loading a lot faster. <strong>Next week</strong> I&#8217;ll let you know what I did. Would you like to get notified when the next article is out? Just <strong>sign up</strong> for the <a href="http://eepurl.com/y0HWv" target="_blank"><strong>mailing list</strong></a>.</p>

<p>Have a great week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: git vs brain fart, Octopress, Sony A7, my audio setup]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/17/weekly-update/"/>
    <updated>2014-08-17T22:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/17/weekly-update</id>
    <content type="html"><![CDATA[<p>In this weekly update, I will show you how <strong>git</strong> helped me alleviate the disastrous consequences of a <strong>brain fart</strong>. I will also share my experiences with <strong>Octopress</strong>. You will learn what helps me <strong>feel better</strong>, day in and day out. Then, I&#8217;ll talk about some changes regarding the <strong>mailing list</strong> for this blog. And last, there&#8217;ll be <strong>reviews</strong> on my <strong>audio setup</strong> for a combined work / chill area and on the <strong>Sony A7</strong> full frame camera.</p>

<!-- more -->


<h2>git vs brain fart</h2>

<p>The other day I experienced a curious malfunction of my brain. I had some uncommitted changes in a repository. Many hours of work in fact, way more than I normally would leave uncommitted anywhere. So to alleviate this grievance, I typed <code>git add .</code> on the command line.</p>

<p>So far so good. But then I got distracted by a rather annoying phone call. During that call, something happened that I can best describe as a <strong><a href="http://en.wikipedia.org/wiki/Brain_fart">brain fart</a></strong>. I typed <code>git reset --hard HEAD</code> and pressed ENTER. Now you will probably ask why anyone would want to do that, particularly before actually committing the changes. To be honest, I am clueless. Maybe it was the geek&#8217;s version of a <strong><a href="http://en.wikipedia.org/wiki/Freudian_slip">Freudian slip</a></strong>? Something in my brain probably wanted to reset itself to the happier pre-call state, but somehow that idea landed on the command line instead?</p>

<p>In case you don&#8217;t know this (destructive) <strong><a href="http://git-scm.com/">git</a></strong> command, this is what it does:</p>

<blockquote><p>&#8211;hard<br/>Resets the index and working tree. Any changes to tracked files in the working tree made since <commit> will be discarded.</p><footer><strong>git-reset documentation</strong> <cite><a href='http://git-scm.com/docs/git-reset'>git-scm.com/docs/git-reset/&hellip;</a></cite></footer></blockquote>


<p>Okay, think about that for a second. The documentation says it loud and clear. Changes to tracked files since <strong>HEAD</strong>, which is the current commit to which I have added above but not committed, are <strong>discarded</strong>. Oops.</p>

<p>I have no idea what I was thinking. My changes appeared to be lost forever. Not a surprise really when you think about the description above. But for me in that second it was like getting hit by a truck that came out of nowhere.</p>

<p>So I really wanted the fruits of my previous and tedious labor back.</p>

<p>I tried <code>git reflog</code> according to <strong><a href="http://stackoverflow.com/questions/5788037/recover-from-git-reset-hard">these instructions</a></strong>, but that did not help; I did not find anything useful in the output. Luckily though, <strong><a href="http://git-scm.com/docs/git-fsck">fsck</a></strong> helped:</p>

<pre><code>git fsck --lost-found --verbose
cd .git/lost-found/other/
find . -print | xargs grep someUniqueTextHere
</code></pre>

<p>So basically, git only runs a <strong><a href="http://de.wikipedia.org/wiki/Garbage_Collection">garbage collection</a></strong> every once in a while. I found this <strong><a href="http://gitready.com/advanced/2009/01/17/restoring-lost-commits.html">here</a></strong>. Using the commands above, I tell git to run a <strong>fschk</strong> and write out the <strong>lost and found</strong> items. Then I can find the one I was looking for by piping the result of <strong><a href="http://en.wikipedia.org/wiki/Find">find</a></strong> in that directory to <strong><a href="http://en.wikipedia.org/wiki/Grep">grep</a></strong>, looking for some specific text I remembered from the work I had lost.</p>

<p>Then from the files I found, I was easily able to reconstruct the work that previously appeared lost. That really <strong>saved my day</strong>.</p>

<h2>ClojureScript article</h2>

<p>I found some time to put additional work into the article in which I describe the recently added <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">ClojureScript client</a></strong> of my <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application. Initially I wanted to do more work on the application itself and specifically use <strong><a href="https://github.com/cognitect/transit-format">Transit</a></strong> instead of JSON parsing. But this application is fairly dependent on <strong>keywordized keys</strong> inside the representation of the tweets, and Transit as of now does not have a built-in way to keywordize the JSON property names so that would have been a bit of work. Totally doable and the only thing that keeps me from actually doing it is that I want to do some major redesign of the application. Then, that effort would likely be wasted. More on that soon.</p>

<h2>Octopress, one year later</h2>

<p>I am using Octopress to generate my blog. It has served me alright, but I don&#8217;t really like it a lot and probably wouldn&#8217;t use it again.  I am just not enough of a Ruby guy to tinker around with it. I cannot even fix issues when I try to update it. The other night I wasted two precious hours trying to get my installation current so that I would benefit from newer features. I didn&#8217;t succeed. Quite frankly, I have no intentions of becoming a Ruby expert any time soon or ever.</p>

<p>Along those lines, I was thinking about rolling my own blogging engine. Yeah I know what you&#8217;re thinking. At some point every (technical) blogger will reach that stage where you want to create your own blogging engine. But hear me out, this one might be a little different. I am thinking about making use of <strong><a href="http://www.polymer-project.org">Polymer</a></strong> and <strong><a href="http://webcomponents.org">Web Components</a></strong>. Now that the Google robots run JavaScript, the blog would get indexed just fine, without pre-rendering for search engine visibility. Why not load the markdown directly from a web component handling the current post and then let that render itself? Polymer handles browser compatibility, but I do not care much about IE6 users and the like anyway. At the same time that would give me a chance to delve deeper into web components. The idea of a shadow DOM is just brilliant, and I hope web components will have the success they deserve. Finally a vendor-agnotic way of building web applications.</p>

<h2>Feeling good</h2>

<p>I have a lot of fun writing stuff at the moment. I also write for myself. The first 25-30 minutes in the morning belong to me and me alone. Before reading any email, I focus on everything that comes to mind and write it down. It&#8217;s a great way to gain some clarity on what I want to do and where I want to go. The only thing that&#8217;s missing in the process is a decent and searchable way to organize the notes. That part needs work. But nonetheless, I am a happier person when I do this regularly. Highly recommended.</p>

<h2>Mailing list: one and only one</h2>

<p>At first I thought about creating a separate mailing list because I didn&#8217;t want to spam anyone who subscribed for infrequent tutorials with weekly updates like this one. But that&#8217;s too much work on my end. So instead I will unify the mailing lists. If the updates are too frequent for any of the existing subscribers, there are two options: <strong>a)</strong> let me know or <strong>b)</strong> unsubscribe. But why don&#8217;t you give it a try? My intention is to make the weekly update an entertaining read.</p>

<h2>Book and gadget reviews</h2>

<p>Last week I mentioned that I wanted an outlet for my opinions on books and gadgets. So I created a <strong><a href="http://matthiasnehlsen.com/reviews">page for reviews</a></strong>. I also started writing about some electronic stuff that I own.</p>

<h3>My audio setup</h3>

<p>I recently kicked out a high-end surround sound system in favor of a mixer, two active speakers and a pair of headphones. <strong><a href="http://matthiasnehlsen.com/reviews/audio-setup">Find out why</a></strong>.</p>

<h3>My camera, Sony A7</h3>

<p>I can finally use my classic Zeiss and Leica prime lenses again thanks to this camera. Overall I am quite happy with it. This review is a work in progress, but you can already read some of it <strong><a href="http://matthiasnehlsen.com/reviews/sony-a7">here</a></strong>.</p>

<p>Have a great week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: AngularJS book, Geo-Lookup, Reading]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/10/weekly-update/"/>
    <updated>2014-08-10T22:06:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/10/weekly-update</id>
    <content type="html"><![CDATA[<p>I have mostly kept myself busy with <strong><a href="http://angularjs.org">AngularJS</a></strong> this week. Then, my <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">geo-specific link shortener</a></strong> generated its first contribution to running this blog. I have also read some more this week: <strong><a href="http://r.matthiasnehlsen.com/unclebob-cleancoder/link">The Clean Coder: A Code of Conduct for Professional Programmers</a></strong> by Robert C. Martin (Uncle Bob).</p>

<!-- more -->


<p>I have been doing a lot of <strong><a href="http://angularjs.org">AngularJS</a></strong> work. I haven&#8217;t really talked about it yet, but last year I started co-authoring a book about <strong><a href="https://www.packtpub.com/web-development/angularjs-ui-development">AngularUI Development</a></strong>. The book is scheduled to be out in November this year. Right now, I am putting the finishing touches on the chapters that I wrote. I added quite a few pages to the first chapter about bootstrapping an <strong><a href="http://angularjs.org">AngularJS</a></strong> environment, in particular about AngularJS integration tests using <strong><a href="https://github.com/angular/protractor">Protractor</a></strong>. I am quite happy with the testability of AngularJS application is progressing. Protractor is really powerful and I am looking forward to implementing a comprehensive testing strategy for my current work project. Protractor looks like it will be up to the job. It will be interesting to integrate this into the overall <strong><a href="http://www.scala-lang.org">Scala</a></strong> / <strong><a href="http://www.playframework.com">Play Framework</a></strong> / <strong><a href="http://www.scala-sbt.org">SBT</a></strong> build chain, though. Maybe that&#8217;ll be an article for another day.</p>

<p>Then, earlier this week, I <strong><a href="http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework/">wrote about building</a></strong> an application for country-specific embedding of links for the <strong><a href="https://affiliate-program.amazon.com">Amazon Affiliate Program</a></strong>, with the idea of having purchases on <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon</a></strong> contribute to the running costs of this blog. Besides the time that I invest, I also rent a server for serving my <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch application</a></strong> at <strong><a href="http://www.hetzner.de">Hetzner Online AG</a></strong>, that costs <strong>€81</strong> per month. Today I am happy to report that in the first week, clicks on <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon links</a></strong> have generated roughly <strong>$37</strong> in advertising fees aka revenue through orders in the <strong><a href="http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW">U.S. store</a></strong>. Sweet - thanks a lot to the purchasers, much appreciated! If that became the weekly average, the running costs for my server would be covered. Feels great that my baby, the blog, may be well on the way to paying its own rent. I will have to make my <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">geo-specific link shortener</a></strong> application more user-friendly though; it is already annoying me a lot to store created links in code. But that&#8217;s on my list anyway; for this week the idea was to create a proof-of-concept and for that, storing the links in code was okay.</p>

<p>I was also able to read a little more in <strong><a href="https://twitter.com/unclebobmartin">Uncle Bob</a></strong>&#8217;s book, <strong><a href="http://r.matthiasnehlsen.com/unclebob-cleancoder/link">The Clean Coder: A Code of Conduct for Professional Programmers (Robert C. Martin Series)</a></strong>. I enjoy this book a lot and I will make sure to share some thoughts on it soon. The main idea about sharing thoughts on what I read is that though I read a lot, I also forget too much too fast. I have been meaning to take notes by chapter for a while now, but I have never really got around to doing it. If I publish my notes, I will be able to force myself to actually take notes. First of all, I want to keep them for my future reference so that I can more easily recap what I learned. If anyone else finds my notes useful, so much the better. More on that soon.</p>

<p>Okay, that&#8217;s it for today. Next week I&#8217;ll be busy with the book chapters, but I also want to try to get back to my work-in-progress <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">article about writing the BirdWatch client in ClojureScript</a></strong>.</p>

<p>Have a great week,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a geo-aware link shortener with Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework/"/>
    <updated>2014-08-04T15:16:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/04/building-a-geo-aware-link-shortener-with-play-framework</id>
    <content type="html"><![CDATA[<p><strong><a href="http://matthiasnehlsen.com/blog/2014/08/01/weekly-update/">Last week</a></strong> I wrote about blog monetization through the <strong><a href="https://affiliate-program.amazon.com">Amazon Affiliate Program</a></strong>. I needed a way to serve country-specific URLs depending on the location of the page visitor, so I wrote a geo-aware link shortener using <strong><a href="http://www.playframework.com">Play Framework</a></strong>. This week I would like to introduce that application. The source code is available on <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">GitHub</a></strong>. You may find that tool useful for your own purposes, or you may just want to read this as a tutorial on how to call backend services with Play Framework and the asynchronous <strong><a href="http://www.playframework.com/documentation/2.3.2/ScalaWS">WS client</a></strong>.</p>

<!-- more -->


<p>Let us define the purpose of this application: visitors (for example on a blog) are to be redirected to country-specific banners, slideshows of or plain links to the matching Amazon store front of the country of origin of the request or, if none exists in the visitor&#8217;s country, of the U.S. store. Links should be shortened as well. Let&#8217;s look at an <strong>example</strong>.</p>

<p>The link for <code>http://r.matthiasnehlsen.com/amazon-landing/link</code> is requested. Then, depending on the visitor&#8217;s country, the following happens:</p>

<p>1) Request from the U.S.: the request is redirected to <strong><a href="http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW">amazon.com</a></strong></p>

<p>2) Request from the UK: the request is redirected to <strong><a href="http://www.amazon.co.uk/?_encoding=UTF8&amp;camp=1634&amp;creative=19450&amp;linkCode=ur2&amp;tag=matthiasneh0c-21&amp;linkId=O6XF3Z2DDAH6EUXU" title="">amazon.co.uk</a></strong></p>

<p>3) Requests from countries that do not have an Amazon store (or where I have not created an account, such as India, Brazil, China, Japan) are redirected to <strong><a href="http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW">amazon.com</a></strong> as well.</p>

<p>You can try this for yourself by following <strong><a href="http://r.matthiasnehlsen.com/amazon-landing/link">this link</a></strong>. When you click it, you should be directed to your country&#8217;s own store if you&#8217;re from the United States, Canada, the United Kingdom, France, Germany, Spain, or Italy, or otherwise to the U.S..</p>

<p>Now building this application was surprisingly simple with <strong><a href="http://www.playframework.com">Play Framework</a></strong>. The relevant code easily fits on a single printed page. Before we get into the details, we will need a backend service for the actual lookup of the requesting IP address. One such open source service for that works well is already available: <strong><a href="http://freegeoip.net">freegeoip</a></strong>. Freegeoip also runs as a free online service, but I would rather run this myself as that will give me a much faster and more predictable response time when there are only local requests. In fact, doing the GeoIP lookup locally only requires a consistent, single-digit number of milliseconds.</p>

<h2>Installing freegeoip</h2>

<p>All you really need to do is follow the <strong><a href="https://github.com/fiorix/freegeoip">instructions here</a></strong>. That worked well for me both on my development Mac and on my Ubuntu server, with a slight change in the <strong><a href="http://upstart.ubuntu.com">upstart</a></strong> script on Ubuntu, which I have committed to the project as a <strong><a href="https://github.com/fiorix/freegeoip/commit/90e974c653631e135e3e4e6ed08df6da39c7cef4">pull request</a></strong>.</p>

<h2>Building the link shortener with Play Framework</h2>

<p>We will need to use three building blocks of Play applications: the <strong><a href="http://www.playframework.com/documentation/2.3.2/ScalaWS">WS client</a></strong>, <strong><a href="http://www.playframework.com/documentation/2.2.3/ScalaAsync">async controller actions</a></strong> and <strong><a href="http://www.playframework.com/documentation/2.2.3/ScalaJson">JSON parsing</a></strong>. A client requests a resource, which is handled by an async action. Inside this action, the WS client performs a GeoIP lookup by calling the local freegeoip service. The result of this async WS call, which is JSON, is then parsed for the country code matching the request. Then the model is asked for the URL matching the requested resource and country. We will look at the source code below, but here is a flowchart first:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/amzn-geo-lookup.png" title="'flowchart'" ></p>

<p>I hope this flowchart helps a little in following through the source code below.</p>

<figure class='code'><figcaption><span>Async controller action</span><a href='https://github.com/matthiasn/amzn-geo-lookup/blob/e75c16d198f9f266fa63dbe463856982a1b4fe22/app/controllers/Application.scala'>Application.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.ws.WS</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.concurrent.Execution.Implicits.defaultContext</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">model._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Controller Action for redirecting requester to URL matching the shortUrl and the country for the remote address,</span>
</span><span class='line'><span class="cm">   * otherwise when shortUrl exists but country does not have a configured URL, the U.S. entry as a fallback. Should</span>
</span><span class='line'><span class="cm">   * the entry for the U.S. store also not exist, the default URL is used.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * The country of the requester is determined by performing a GeoIP lookup. For this, a local installation of</span>
</span><span class='line'><span class="cm">   * freegeoip is expected (https://github.com/fiorix/freegeoip).</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * Handled errors:</span>
</span><span class='line'><span class="cm">   *   - freegeoip not running -&gt; fallback URL</span>
</span><span class='line'><span class="cm">   *   - freegeoip not responding within 100ms -&gt; fallback URL (critical, script loading blocks page load)</span>
</span><span class='line'><span class="cm">   *   - freegeoip responds with code other than 200 -&gt; fallback URL</span>
</span><span class='line'><span class="cm">   * The fallback URL is the U.S store link for existing shortened links and a specified general default URL otherwise.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   **/</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">redirect</span><span class="o">(</span><span class="n">shortUrl</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">format</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">.</span><span class="n">async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">fallbackUrl</span> <span class="k">=</span> <span class="nc">Links</span><span class="o">.</span><span class="n">redirectMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">shortUrl</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">format</span> <span class="o">+</span> <span class="s">&quot;.US&quot;</span><span class="o">).</span><span class="n">getOrElse</span><span class="o">(</span><span class="nc">Links</span><span class="o">.</span><span class="n">defaultRedirect</span><span class="o">)</span>
</span><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="nc">Links</span><span class="o">.</span><span class="n">geoLookupAddress</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="n">remoteAddress</span><span class="o">).</span><span class="n">withRequestTimeout</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="n">get</span><span class="o">().</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">geoRes</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">geoRes</span><span class="o">.</span><span class="n">status</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">200</span> <span class="k">=&gt;</span>
</span><span class='line'>              <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="o">(</span><span class="n">geoRes</span><span class="o">.</span><span class="n">json</span> <span class="o">\</span> <span class="s">&quot;country_code&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">flatMap</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">cc</span> <span class="k">=&gt;</span>
</span><span class='line'>                  <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="n">shortUrl</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">format</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">cc</span>
</span><span class='line'>                  <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logCc</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="n">cc</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nc">Links</span><span class="o">.</span><span class="n">redirectMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>              <span class="o">}.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">fallbackUrl</span><span class="o">)</span>
</span><span class='line'>              <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logUrl</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="n">url</span><span class="o">)</span>
</span><span class='line'>              <span class="nc">Redirect</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="n">status</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span>
</span><span class='line'>              <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logGeoFail</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="s">&quot;Status &quot;</span> <span class="o">+</span> <span class="n">status</span><span class="o">,</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>              <span class="nc">Redirect</span><span class="o">(</span><span class="n">fallbackUrl</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}.</span><span class="n">recover</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span>
</span><span class='line'>          <span class="nc">ReqLogger</span><span class="o">.</span><span class="n">logGeoFail</span><span class="o">(</span><span class="n">shortUrl</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="n">getMessage</span><span class="o">,</span> <span class="nc">Some</span><span class="o">(</span><span class="n">e</span><span class="o">))</span>
</span><span class='line'>          <span class="nc">Redirect</span><span class="o">(</span><span class="n">fallbackUrl</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is really all, including all the imports and four calls to a request logger. The actual code is a mere <strong>23 lines</strong> long, including error handling. Let&#8217;s go through this line by line. <em>redirect</em> is a controller method that takes two parameters, <em>shortUrl</em> and <em>format</em>, both of which are strings. They come from the route definition:</p>

<figure class='code'><figcaption><span>routes</span><a href='https://raw.githubusercontent.com/matthiasn/amzn-geo-lookup/e75c16d198f9f266fa63dbe463856982a1b4fe22/conf/routes'>routes </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>GET   /:shortUrl/:format   controllers.Application.redirect(shortUrl: String, format: String)
</span></code></pre></td></tr></table></div></figure>


<p>The above configuration means that the application will call <em>controllers.Application.redirect</em> with the two strings it parses out of the request&#8217;s path.</p>

<p>The controller action is built by Play&#8217;s <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.mvc.ActionBuilder">ActionBuilder</a></strong> by calling <em>Action.async</em> with a block that takes a <em>request</em> of type <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.mvc.Request">play.api.mvc.Request</a></strong> and returns the future of a result. Next, we construct a fallback link to be delivered when the following GeoIP lookup fails in one way or another.</p>

<p>Next we fire up an asynchronous call to the local <strong>freegeoip</strong> instance for the IP address derived from the request. I only give this a timeout of 100 milliseconds as I do not want to hold up page loading for longer than that, no matter what. In reality, this is plenty for this local lookup if things are running smoothly and I usually only measure around 7 milliseconds to fulfill this request end to end.</p>

<p>First, we create the <em>fallbackUrl</em> which will either be the specific link to the U.S. store or a default URL if the map lookup with the <em>shortUrl</em> and <em>format</em> provided is unsuccessful. This is either the corresponding link to the shortUrl for the U.S. store, should that exist in the model, or a default URL (also specified in the model).</p>

<p>Next, we create a <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.libs.ws.WS$$WSRequestHolder">WsRequestHolder</a></strong> by specifying the URL, setting the timeout. Then we call <em>get()</em> on the request holder and <em>map</em> on it by providing a function to apply to a successful result of the future. In here, the result could either be a status code of <strong><a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">200</a></strong> or something else, for example a <strong><a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">400</a></strong> if the request failed. Such a failure can occur if freeogeoip is called locally from an IPv6 address, as is the case on my Mac. If the result is a <strong>200</strong>, we expect the result body to contain valid JSON, so we parse it for the country code. This parsing step returns the <em>Option</em> of a string, depending on whether it has found the specified JSON property or not. We <em>flatMap</em> with a function that itself returns an <em>Option</em> of a URL string by taking the parsed country code string and looking that up in the <strong><a href="http://docs.scala-lang.org/overviews/collections/maps.html">Map</a></strong> of the model. If such an entry exists, the Map lookup will return <strong>Some(urlString)</strong>, otherwise it will return <strong><a href="http://www.scala-lang.org/api/current/index.html#scala.None$">None</a></strong>. Using <em>flatMap</em> now returns a single option instead of having to map on two options. Then we call <em>getOrElse</em> on the resulting Option, retrieving either the lookup result or the <em>fallbackUrl</em>. When encountering any result code other than <strong>200</strong>, we redirect to the <em>fallbackUrl</em>.</p>

<p>Now there is a second failure scenario where not the result code indicates what went wrong, but instead the WS call fails altogether. That case would result in a failed future, which we can catch using <em>recover</em>, again redirecting to the <em>fallbackUrl</em>. To understand what is going on here, it is important to realize that both the map combinator on the WS result and the recover combinator return new futures, both of the <strong><a href="http://www.playframework.com/documentation/2.2.3/api/scala/index.html#play.api.mvc.SimpleResult">SimpleResult</a></strong> type. <strong><a href="http://docs.scala-lang.org/overviews/core/futures.html">This article</a></strong>, which I found in the Scala documentation, helped me to understand futures better. We could have used pattern matching on specific types of exceptions, but that wasn&#8217;t necessary in this case as we simply want to return a redirect to the <em>fallbackUrl</em> (plus log the exception).</p>

<h2>The model</h2>

<p>Right now all the data lives in the model&#8217;s source code. Obviously it would be better to utilize a database for this purpose, but for a first version, this serves us fine. The model is really just a <strong><a href="http://docs.scala-lang.org/overviews/collections/maps.html">Map</a></strong>. Here&#8217;s a shortened version as an example:</p>

<figure class='code'><figcaption><span>Links model amzn-geo-lookup/blob/e75c16d198f9f266fa63dbe463856982a1b4fe22/app/model/Links.scala Links.scala </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">model</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Links</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">redirectMap</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">](</span>
</span><span class='line'>    <span class="c1">// Amazon landing page</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.US&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.com/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=matthiasnehls-20&amp;linkId=2JYSWJ7Q5CJ7F7QW&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.DE&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.de/?_encoding=UTF8&amp;camp=1638&amp;creative=19454&amp;linkCode=ur2&amp;site-redirect=de&amp;tag=matnehblo-21&amp;linkId=GTDGKZ677SJ76DR2&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.GB&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.co.uk/?_encoding=UTF8&amp;camp=1634&amp;creative=19450&amp;linkCode=ur2&amp;tag=matthiasneh0c-21&amp;linkId=O6XF3Z2DDAH6EUXU&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.FR&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;https://www.amazon.fr/?_encoding=UTF8&amp;camp=1642&amp;creative=19458&amp;linkCode=ur2&amp;tag=matthiasneh03-21&amp;linkId=WATXOGQM2BDD44FL&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.CA&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;http://www.amazon.ca/?_encoding=UTF8&amp;camp=15121&amp;creative=390961&amp;linkCode=ur2&amp;tag=matthiasneh0d-20&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.IT&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;https://www.amazon.it/?_encoding=UTF8&amp;camp=3370&amp;creative=24114&amp;linkCode=ur2&amp;tag=matthiasneh01-21&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;amazon-landing.link.ES&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;https://www.amazon.es/?_encoding=UTF8&amp;camp=3626&amp;creative=24822&amp;linkCode=ur2&amp;tag=matthiasne0ac-21&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Building this geo-aware link shortener (in a very basic form) was really easy with <strong><a href="http://www.playframework.com">Play Framework</a></strong>. I am currently using this tool for the lookup of Amazon store fronts to redirect affiliate links to the country of the visitor. But there is no reason why this can&#8217;t be used for all kinds of other scenarios where such a country-specific redirection of requests might be useful.
Of course, it is not ideal to store the links in code. Instead, that data should live in a database of some kind, probably with the stored values cached inside the application, to avoid having to introduce additional round-trips for every lookup. Placing the data in a model object is already the first step towards building it. The redirecting controller would not have to change at all when this model object is replaced with one that uses a database. Then it would also be really useful to create new links from a user interface. That could, for example, easily be achieved with an AngularJS application for link maintenance. There&#8217;s surely stuff for me to do. Please let me know if you think this more elaborate version I just described (database, UI) is useful, either to use it yourself or to follow a tutorial in which we build this application. The more successful this application turns out to be in terms of contributing to this blog, the more time I will find to work on these improvements. You can literally vote with your wallet by clicking on links delivered by the described application.</p>

<SCRIPT charset="utf-8" type="text/javascript" src="http://r.matthiasnehlsen.com/slideshow1/wide"> </SCRIPT>


<p>Please let me know your thoughts on the above. I will be happy to clarify anything that is difficult to grasp right away. And please let me know if you encounter problems making any of this work for yourself.</p>

<p>That&#8217;s it for today - hope to see you back soon. And now that you have made it this far in the article, why don&#8217;t you follow me on Twitter <strong><a href="https://twitter.com/matthiasnehlsen">@matthiasnehlsen</a></strong> so you&#8217;ll know when the next article is out.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Update: Buying time, AngularJS Meetup, Mountains]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/08/01/weekly-update/"/>
    <updated>2014-08-01T15:51:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/08/01/weekly-update</id>
    <content type="html"><![CDATA[<p>Here&#8217;s something new to try: a weekly update, covering pretty much of what I keep myself busy with. That may be about what I am reading, learning or currently working on, mostly software-related. In this installment I will discuss monetization, the Hamburg AngularJS meetup and photographing in the mountains while hiking.</p>

<!-- more -->


<h1>Buying time for more blogging</h1>

<p>There&#8217;s been one thought that keeps coming back. I really like writing this blog, but the problem is that I never seem to have enough time to really focus on it. Now I could try to make more time for it in my free time, but obviously that would be at the expense of my remaining private life. Or I could shift the blogging effort into my working life and get paid to do so. That&#8217;s quite an attractive thought. How could one go about it? I buy a lot at <a target="_blank" href="http://r.matthiasnehlsen.com/amazon-landing/link">Amazon</a><img src="http://r.matthiasnehlsen.com/amazon-landing/img" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> because I find it really convenient to have my orders delivered the next day and because I have not once had problems sending stuff back that I did not like. Now I usually have an opinion on the stuff I buy, so why not share my thoughts on that? Using the <strong><a href="https://affiliate-program.amazon.com">Amazon Affiliate Program</a></strong>, I can link to the product pages and whenever someone clicks on those links and then buys something within the next 24 hours, a small percentage of the price paid goes to me, the affiliate partner. The same goes for banner ads and such. Sounds like a decent way for the blog to start paying for itself, right?</p>

<p>But not so fast. There is one issue with the approach as outlined above. The Amazon Affiliate Program is on a per country basis. When I simply link to the U.S. store and you are in the United Kingdom and get redirected there, I won&#8217;t get a commission, even if I have signed up for the program in the UK. Instead, I would have to send you to the UK store in the first place. But how can I do that? How do I detect which country you come from and send you to the appropriate store, should there be one in your country? I would need to do a very fast GeoIP lookup to determine where your IP address is located and then redirect you to your country store. So I <strong><a href="https://github.com/matthiasn/amzn-geo-lookup">wrote an application</a></strong> using <strong><a href="http://www.playframework.com">Play Framework</a></strong> and a local installation of <strong><a href="http://freegeoip.net">freegeoip</a></strong> which looks up the IP address in a few milliseconds and then redirects to the appropriate store. A detailed, tutorial-style article on that application will follow soon. Maybe others will find this useful as well.</p>

<h1>The first Hamburg AngularJS meetup</h1>

<p>Okay, this was technically last week, but there was no weekly review in place back then. So the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/events/193495902/">first session of the Hamburg AngularJS meetup</a></strong> that I founded recently (see <strong><a href="http://matthiasnehlsen.com/blog/2014/07/08/hamburg-angularjs-meetup/">this article</a></strong>) went great, it was fun to meet and solve a problem together. I had found a sponsor for the meetup, <strong><a href="https://www.packtpub.com">Packt Publisher</a></strong>, and they were kind enough to provide some free ebooks that could be given away during the meetup. So I thought, why not do a raffle so that everyone gets a fair chance? Then I thought, why not build an <strong><a href="http://angularjs.org">AngularJS</a></strong> application together and use it to draw the winning tickets in the raffle.</p>

<p>We had a total of four ebooks to give away, two each of these:</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/mastering-angular/iframe">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/angular-directives/iframe">
</iframe>


<p>I reserved one for the volunteer who was willing to do the coding on the big screen so there were three more to draw with the application we were about to build. Then as a group we discussed the options of how to go about this and that worked really well. We wrote a web application for drawing the three winners and we even wrote tests for the application.</p>

<p>I am looking forward to the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/events/196972082/">next session on August 21st</a></strong>, which is already fully booked. On that note, last time all 20 spots were snapped up and there was a waiting list with an additional 10 members. But we were &#8220;only&#8221; 13 who actually showed up. I wonder how best to deal with that. It&#8217;s not a problem if people don&#8217;t come, but they could at least change the RSVP as soon as possible. On the other hand, I have to admit that I have done the same in the past - sign up for something free and then neither show up nor change the RSVP. Maybe the best way would be to simply increase the number of spots and plan for a percentage of <strong><a href="http://www.merriam-webster.com/dictionary/no-show">no-shows</a></strong>? That&#8217;s working for airlines, why should it not work here? Maybe, to be on the safe side, I should plan for 25% no-shows and then just increase the number of spots accordingly?</p>

<h1>The mountains / photography</h1>

<p>I am back already. The weather turned quite bad and I wasn&#8217;t in the mood to get struck by lightning while on top of a mountain. Still, it was great and I am looking forward to the next time. I had my camera with me - a <strong>Sony A7</strong> full frame that by itself is a surprisingly compact camera. As a lens, I had the <strong>Zeiss 24-70 OSS 4.0</strong> lens - which I hoped would be a good combination for travel photography. Here are some examples:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/photography/DSC02249-1200x800.jpg" title="'snow'" ></p>

<p>If you&#8217;re interested, here is the image in the <strong><a href="http://matthiasnehlsen.com/images/photography/DSC02249-full.jpg">original resolution</a></strong>. It is not the original image, but rather the processed version I used when I ordered a larger-format print. If anyone is interested in the post processing in Photoshop, let me know. The same goes for the next image, with the original resolution <strong><a href="http://matthiasnehlsen.com/images/photography/DSC02231-full.jpg">here</a></strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/photography/DSC02231-1200x800.jpg" title="'valley'" ></p>

<p>Overall, I am happy with the image quality, but it is below the quality of images taken with fixed focal length lenses. Usually I don&#8217;t use zoom lenses at all, so I would mostly use this lens when traveling. But is it really a good travel lens? No, I don&#8217;t think so. It is way too bulky:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sony-a7-24-70.jpg" title="'a7 with 24-70mm'" ></p>

<p>I only got to use it ever so often as it had to go into the backpack because of its large size. That&#8217;s kinda pointless when you are hiking with other people. Once you find your pace, you don&#8217;t like to stop for that guy with the bulky camera, so you don&#8217;t. Meaning, I fell behind and ended up taking way more photos with my smart phone because that was always handy. Couldn&#8217;t I simply have taken these particular photos with the smart phone? Not a chance - besides the better image quality, the Zeiss lens also has a much more wide angle than the one in the smart phone.</p>

<p>So the Zeiss lens goes back to Amazon tomorrow for a refund. I don’t think the lens is bad actually. I just don’t use zoom lenses that often; if possible, I prefer fixed focal length lenses. If you like to use a zoom lens, this one might serve you well. It is by all means better than the plastic kit lens. That one&#8217;s just plain awful. While traveling, though, this lens proved to be too bulky for my taste.</p>

<p>I think I have an idea for a better travel lens, but more on that another time. For those interested in the equipment mentioned above, here are the links:</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/sony-a7/iframe">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://r.matthiasnehlsen.com/zeiss-24-70/iframe">
</iframe>


<p>The camera is really great, by the way, I do not regret that purchase at all. The menu might not be the greatest, but for this form factor the image quality is unbeatable, unless you use the more expensive <strong><a href="http://r.matthiasnehlsen.com/sony-a7r/link">A7R</a></strong>. But I do not usually need <strong>36MP</strong>.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch with ClojureScript and Om explained]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/"/>
    <updated>2014-07-24T08:30:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om</id>
    <content type="html"><![CDATA[<p><strong>ABANDONED</strong> because of writing an all-Clojure version instead, not just ClojureScript on the client side. Last update on August 18th, 2014. There is a <strong><a href="http://matthiasnehlsen.com/blog/2014/09/24/Building-Systems-in-Clojure-1/">new series of articles</a></strong> about the all-Clojure version starting in 09/2014. You might still find useful information in this article though.</p>

<p>I <strong><a href="http://matthiasnehlsen.com/blog/2014/07/17/BirdWatch-in-ClojureScript/">wrote</a></strong> about having written my first actual application using <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> and <strong><a href="https://github.com/swannodette/om">Om</a></strong>, a web client for my <strong><a href="http://birdwatch.matthiasnehlsen.com/cljs/#*">BirdWatch</a></strong> application. You may want to start with that article to understand the background better. This week I first want to talk about my experience with ClojureScript and Om. Then I want to start describing the implementation details. I am fully aware that what has come out of it up until now is far from elegant in terms of pretty much everything. But in my defense, it does appear to work :)</p>

<!-- more -->


<p>Click the screenshot below to see a live version of the application:</p>

<p><a href="http://birdwatch.matthiasnehlsen.com/cljs/#" target="_blank"><img src="http://matthiasnehlsen.com/images/cljs-screenshot.png" /></a></p>

<p>So, about my experience. I have been reading articles and books about <strong><a href="http://clojure.org">Clojure</a></strong> for a while and it really does seem to resonate with me. I like this whole <strong><a href="http://en.wikipedia.org/wiki/Homoiconicity">homoiconicity</a></strong> thing. Code and data are basically the same thing and thus share the same data structures. Code is really data, representing the <strong><a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree (AST)</a></strong> directly. Now my initial reaction to this concept was that it had to be rather low level to do so, but to my surprise the opposite turned out to be true with a <strong><a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a></strong>; you gain a tremendous amount of expressiveness. I also really like that <strong>a)</strong> Clojure introduces <strong><a href="http://clojure.org/data_structures">additional data structures</a></strong> besides the obvious <strong>list</strong>, i.e. Maps, Sets and Vectors and <strong>b)</strong> it is idiomatic to simply use those.</p>

<p>Sure, there is something to be said about types and how <strong><a href="http://en.wikipedia.org/wiki/Type_safety">type safety</a></strong> makes working on large-scale applications less error-prone. But at the same time I have a hunch that the presence of hundreds of (case) classes complects an application in a way that idiomatic usage of a map does not. Have you seen this before, where you had cascades of only slightly differing data structures and the next step of a computation added only a little bit of data and called that a new thing, modeled as a different something? That can become difficult to reason about, particularly when there are no useful design documents outlining how one morphs into the other.</p>

<p>But then again, I am somewhat afraid of the lack of compile time errors when I call a function with something of a wrong type. So as of now, that is an unresolved question for me. May my endeavor into Clojure and thus Lisp afford me with a more educated opinion on this matter. What I don&#8217;t like about strongly typed systems is that I have seen way too many runtime failures that <strong>a)</strong> the type system and the compiler did not catch and <strong>b)</strong> really came from the application being so incidentally complex that the consequences of changes were by all means (too) hard to grasp even for the most senior team members.</p>

<p>I guess I really need some production experience with Clojure to be able to come up with a fair and substantial comparison of the different approaches. But the application I am talking about today is a start at least. And learning a new language has never hurt anyone, I guess.</p>

<p>So, what’s the experience been like so far?</p>

<p>Here are my perceived pros:</p>

<ul>
<li>When crafting functions in Clojure, I just feel more like playing an instrument. It feels more <strong>playful</strong>, in a good way.</li>
<li>Code tends to be <strong>short</strong> and <strong>concise</strong>.</li>
<li>The core of the language is <strong>easily understood</strong>, at least as far as my limited understanding goes.</li>
<li><strong>Immutability</strong> is great, I have been a fan of immutable data structures for a while and Clojure makes it relatively hard to work with mutable state, which is good.</li>
<li><strong>Om</strong> uses Facebook&#8217;s <strong>ReactJS</strong>, a UI rendering library that I have tried out previously and that I am somewhat familiar with.</li>
<li><strong>Refactoring is fun</strong>, I have discovered that spotting repetitive parts among functions and then factoring these parts out into new and shared functions is not only easier compared to many other languages, but also pleasant.</li>
<li><strong>Data structures</strong>: maps and sets and, by importing an external library in the case of this application, priority maps are a great thing to have, much nicer than only having JavaScript arrays and objects at your disposal.</li>
<li><strong>Replacing external dependencies</strong> with newer versions generally seems to work in Clojure. This is the complete opposite of my experience in Scala, where a new version of pretty much anything oftentimes results in days of work. Over the last year things with Scala improved for sure, but they are nowhere near as smooth as they appear to be with Clojure.</li>
<li>As to general data manipulation, I already feel I am becoming more <strong>productive</strong> with Clojure compared to JavaScript and <strong><a href="http://underscorejs.org">underscore</a></strong> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
</ul>


<p>Here are some (somewhat minor) cons, as well:</p>

<ul>
<li>I don&#8217;t feel I have fully grasped Om yet, despite having worked with ReactJS before.</li>
<li>Testing output. I have tried out <strong><a href="http://cemerick.com">Chas Emerick</a></strong>&#8217;s <strong><a href="https://github.com/cemerick/clojurescript.test">clojurescript.test</a></strong> and while it seems to do its job alright, the output is plain black and white. How am I supposed to do <strong><a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html">red-green refactoring</a></strong> with this? But seriously, this may be mostly cosmetic but still, I like to see green in my tests as that soothes my mind. When I see red in tests, my alertness level goes up. Black and white output elicits none of these emotions. Is there just anything wrong with my installation or vision that I don&#8217;t see colors in my test output?</li>
<li>Performance. So far the application has been slower than the JavaScript counterpart in some areas. When processing preloaded tweets, the plain JavaScript version (used in the <strong><a href="http://birdwatch.matthiasnehlsen.com/angular/#/">AngularJS</a></strong> and <strong><a href="http://birdwatch.matthiasnehlsen.com/#/">ReactJS</a></strong> clients) is probably ten times as fast. <strong>EDIT: that&#8217;s not actually true, it was due to a silly mistake of mine that ate a lot of CPU cycles. With that issues removed, I don&#8217;t notice substantial differences in speed.</strong> Click those previous links and see what I mean. The previous tweets are loaded by an Ajax call in chunks of 500 items and loading and processing each chunk takes maybe a second. Now when you open the <strong><a href="http://birdwatch.matthiasnehlsen.com/cljs/#*">ClojureScript version</a></strong>, you will see that it takes much longer to process the previous items. I might try out <strong><a href="https://github.com/cognitect/transit-cljs">Transit</a></strong> here, which seems very promising, not only for this application but as a wire format in general. I need to spend some time with it as it doesn&#8217;t allow automatic keywordization (yet?) and my application relies on a keywordized map. On the other hand, with some first-hand experience now, I think I&#8217;d rather go for a complete redesign that allows more flexibility. I&#8217;ll keep you posted. Thoughts about that will probably appear in a weekly review first.</li>
<li>Application state in a single large map stored in an <strong><a href="http://clojure.org/atoms">atom</a></strong> can be cumbersome; I would not mind having something like objects or separate services here and there. I have looked at <strong><a href="http://stuartsierra.com">Stuart Sierra</a></strong>&#8217;s <strong><a href="https://github.com/stuartsierra/component">component library</a></strong> and it does seem to offer a good approach to componentizing the application, but I have yet to find the time to try it out.</li>
<li>Interacting with the state from inside Om is different than interacting with the state atom from other parts of the application. <strong><a href="https://github.com/Prismatic/om-tools">Om-tools</a></strong> seem to be an interesting way around this - will need to give that a try and see how it works.</li>
</ul>


<p>By the way, regarding performance, I have seen the same problems with my naïve Scala.js approach before. <strong>EDIT: I don&#8217;t know what the problem was there. The problems with performance in the ClojureScript version are solved.</strong> I have not played around with that one again since my first attempt back in January. That is mostly due to the lack of a ReactJS binding which is anywhere near as complete as Om. I&#8217;ll be happy to give it a try again once ReactJS support is comparable to Om. <strong>EDIT: probably not.</strong></p>

<h1>Introduction to Clojure</h1>

<p>First of all, you will need to understand a few very basic things about Clojure being a <strong><a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a></strong>. Feel free to skip this section if you know Clojure already. My aim is for you to be able to follow along even if you&#8217;ve never tried Clojure or a Lisp before. So the basic idea in a Lisp is the List (no wonder, as Lisp stands for List Programming), a <strong><a href="http://en.wikipedia.org/wiki/Singly_linked_list#Singly_linked_lists">singly linked list</a></strong>, to be precise. This list can hold both code and data. Let&#8217;s see how that looks like. You can try these examples out using the <strong><a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a></strong> in <strong><a href="http://leiningen.org">Leiningen</a></strong> by running <code>lein repl</code> from your command line.</p>

<p>This is an empty list: <code>()</code> It evaluates to itself.</p>

<p>When the list is not empty, the first item in the list will be evaluated as a function: <code>(some-function "a" "b")</code>
Here, <em>some-function</em> will be called with the two arguments &#8220;a&#8221; and &#8220;b&#8221;. Example <code>(print "Hello World!")</code> Sweet, that is all there is to <strong><a href="http://en.wikipedia.org/wiki/Hello_world_program">Hello World</a></strong>.</p>

<p>The first item in a list has to implement the <em>IFn</em> interface meaning it must be possible to call the item as a function. Try this: <code>("a" "b")</code>. Not surprisingly, the string &#8220;a&#8221; is not a function, causing this to fail. You can however <strong>quote</strong> the list to prevent evaluation, like this: <code>'("a" "b")</code>. Now we can use the list to store items without the first one being evaluated.</p>

<p>Conveniently, Clojure also has a <strong>vector</strong> which is comparable to an array. You can use it in place of a quoted list, and in fact it is idiomatic to do so when we do not want the first item to be evaluated. Example <code>[1 2 3]</code></p>

<p>When you want to name something, you have different options available. The first one is <strong>def</strong>; you can use this to name stuff in the top level of a namespace, for example <code>(def foo [1 2 3])</code> This will create a vector named <em>foo</em> which you can then refer to from elsewhere. After typing in the previous example, you will see that now you can just type <code>foo</code> in the REPL and get the vector we have defined previously.</p>

<p>Or you can use the <strong>let-binding</strong> to name things locally, for example inside a function body, like this: <code>(let [bar [1 2 3]])</code> Here, you can only refer to <em>bar</em> inside the let form, meaning inside the pair of braces that enclose the let form. Let&#8217;s use <em>bar</em>: <code>(let [bar [1 2 3]] (print bar))</code> You should see the vector being printed in your REPL.</p>

<p>Functions can be defined as follows: <code>(fn [a] (+ a 1))</code> with this, we have defined a function that adds 1 to the argument provided .
You can use the above as an anonymous function like this: <code>((fn [a] (+ a 1)) 2)</code>. Remember that the first item in a list will be evaluated. This is what happens to be the anonymous function we have just defined. However, this can be a little clumsy. We can also store the function in a def: <code>(def add-one (fn [a] (+ a 1)))</code>; now we can call the function like this: <code>(add-one 2)</code>.</p>

<p>However, this can even be simpler if we use the <strong>defn macro</strong>: <code>(defn add-one [a] (+ a 1))</code></p>

<p>Sometimes, you may want to create a function in place using the anonymous function literal: <code>(#(+ % 1) 2)</code>. This does the same as the anonymous function in the first position of the list above, except that it is shorter. During compilation the <code>#(+ % 1)</code> expands into <code>(fn [a] (+ a 1))</code>, where the percent sign denotes the first argument. If there are multiple arguments, you use <em>%1</em>, <em>%2</em> and so on (1-based).</p>

<p>No language would be complete if there wasn&#8217;t a way to make decisions and branch off accordingly. Of course, Clojure has constructs for flow control as well, most notably the <strong><a href="http://clojure.org/special_forms#Special%20Forms--(if%20test%20then%20else?)">if special form</a></strong>. It is really quite simple: <code>(if test then else?)</code>. The test will be evaluated first. Then based on the result, either <strong>then</strong> or <strong>else</strong> are yielded. Other constructs derive from it, such as the <strong><a href="http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/when">when macro</a></strong>.</p>

<p>With these basic constructs you may already find yourself in the position to follow the subsequent source code. Clojure is not hard. Please let me know if you have problems following along. If so, it&#8217;s most likely not you but rather the fact that my intro wasn&#8217;t good enough.</p>

<p>Of course, there&#8217;s a lot more to the language and plenty of stuff to learn when you are ready to delve deeper. As a next step, I suggest <strong><a href="http://learnxinyminutes.com/docs/clojure/">Learn Clojure in Y Minutes</a></strong>. There, you simply have more examples to follow along and play around with in your REPL.</p>

<p>As another online resource, I have also found <strong><a href="http://www.braveclojure.com">Clojure for the Brave and True</a></strong> to be fun and helpful. Check it out. And if you like it, why not support the author and buy his ebook? You can then enjoy the book on your favorite ebook reader as well, and even if you read it on the web, you will ensure that the author can keep up the good work. Great feeling, I did the same.</p>

<p>Another great resource is <strong><a href="http://r.matthiasnehlsen.com/joyclojure/link">Joy of Clojure, 2nd edition</a></strong>. Fun read and I learned a lot. I will revisit it and share some thoughts about it in the <strong><a href="http://matthiasnehlsen.com/reviews">reviews section</a></strong> soon.</p>

<h1>Application architecture</h1>

<p>Let us now have a look at the implementation of the BirdWatch client.</p>

<p>The most important part to understand is that the application state lives in one large <strong><a href="http://clojure.org/atoms">atom</a></strong>. When the application is started, this atom is populated with the return of a function that returns a map representing a clean slate version of the application state. Here is how that function looks like:</p>

<figure class='code'><figcaption><span>Function returning initial application state</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/util.cljs'>util.cljs (Lines 72 to 83)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">initial-state</span> <span class="p">[]</span>
</span><span class='line'>  <span class="s">&quot;function returning fresh application state&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:count</span> <span class="mi">0</span>
</span><span class='line'>   <span class="ss">:n</span> <span class="mi">10</span>
</span><span class='line'>   <span class="ss">:retweets</span> <span class="p">{}</span>
</span><span class='line'>   <span class="ss">:tweets-map</span> <span class="p">{}</span>
</span><span class='line'>   <span class="ss">:search-text</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>   <span class="ss">:page</span> <span class="mi">1</span>
</span><span class='line'>   <span class="ss">:search</span> <span class="s">&quot;*&quot;</span>
</span><span class='line'>   <span class="ss">:stream</span> <span class="nv">nil</span>
</span><span class='line'>   <span class="ss">:sorted</span> <span class="ss">:by-rt-since-startup</span>
</span><span class='line'>   <span class="ss">:by-followers</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-retweets</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-favorites</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-rt-since-startup</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:by-id</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:words-sorted-by-count</span> <span class="p">(</span><span class="nf">priority-map-by</span> <span class="nv">&gt;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the keys in this map are <strong><a href="http://clojure.org/data_structures#Data%20Structures-Keywords">keywords</a></strong>. Keywords have the great property that we can use them as functions that take a map as an argument and that then return the value for this key. We will see that in action further below.</p>

<p>Upon startup of the application, the function above is called for populating the state atom:</p>

<figure class='code'><figcaption><span>Function returning initial application state</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/core.cljs'>core.cljs (lines 13 to 16)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Application state in a single atom</span>
</span><span class='line'><span class="c1">;;; Will be initialized with the map returned by util/initial-state.</span>
</span><span class='line'><span class="c1">;;; Reset to a new clean slate when a new search is started.</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">app-state</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">(</span><span class="nf">util/initial-state</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we have learned above, <strong>def</strong> creates a thing with a name. This thing is conceptually <strong><a href="http://en.wikipedia.org/wiki/Immutable_object">immutable</a></strong>, at least we treat it that way, so I won&#8217;t call it a variable. The atom is always the same object, but it holds different versions over time. Then a reference to this <strong><a href="http://clojure.org/atoms">atom</a></strong> is passed around. When an update is desired, the map is dereferenced, an updated version is created using some function call and the result is then written back into the atom using a transaction. It is important to note that Clojure data structures are immutable. Immutability guarantees that you can pass data structures around without having to worry that whoever you pass it to might change the data. Data also does not become invalid. Instead, whatever version in time you get a hold on represents the definite state at the time that version was created. State changes only happen inside a transaction, in which a new and altered version of the state is passed back. The transaction part would also mean that no other process could alter state at the same time; in that case the later transaction would be retried until the first one has succeeded. This would be particularly useful when running in a multithreaded environment. However, the JavaScript code resulting from the ClojureScript compilation process runs in a single threaded event loop so only one thing at a same time can happen anyway. On the server side this property becomes more valuable, still.</p>

<p>Having a function that provides an initial, clean state makes it trivial to reset the application state at a later point, we can simply swap the current state with the clean slate map.</p>

<h2>Ingesting tweets</h2>

<p>Tweets get into the system for further analysis in two ways. First, there is a Server Sent Event stream continuously delivering new matches to a query, with low latency (typically around a second between tweeting and having the tweet show up in the application). In addition, previous tweets are loaded. Both are triggered in the <strong>start-search</strong> function:</p>

<figure class='code'><figcaption><span>start-search function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 49 to 59)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">start-search</span> <span class="p">[</span><span class="nv">app</span> <span class="nv">tweets-chan</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;initiate new search by starting SSE stream&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">search</span> <span class="p">(</span><span class="ss">:search-text</span> <span class="o">@</span><span class="nv">app</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">s</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">search</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="s">&quot;*&quot;</span> <span class="nv">search</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">nil? </span><span class="p">(</span><span class="ss">:stream</span> <span class="o">@</span><span class="nv">app</span><span class="p">)))</span> <span class="p">(</span><span class="nf">.close</span> <span class="p">(</span><span class="ss">:stream</span> <span class="o">@</span><span class="nv">app</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">reset!</span> <span class="nv">app</span> <span class="p">(</span><span class="nf">util/initial-state</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span> <span class="nb">assoc </span><span class="ss">:search</span> <span class="nv">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">aset </span><span class="nv">js/window</span> <span class="s">&quot;location&quot;</span> <span class="s">&quot;hash&quot;</span> <span class="p">(</span><span class="nf">js/encodeURIComponent</span> <span class="nv">s</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span> <span class="nb">assoc </span><span class="ss">:stream</span> <span class="p">(</span><span class="nf">js/EventSource.</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;/tweetFeed?q=&quot;</span> <span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.addEventListener</span> <span class="p">(</span><span class="ss">:stream</span> <span class="o">@</span><span class="nv">app</span><span class="p">)</span> <span class="s">&quot;message&quot;</span> <span class="o">#</span><span class="p">(</span><span class="nf">receive-sse</span> <span class="nv">tweets-chan</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doall </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="mi">5</span><span class="p">)]</span> <span class="p">(</span><span class="nf">ajax/prev-search</span> <span class="nv">s</span> <span class="mi">500</span> <span class="p">(</span><span class="nb">* </span><span class="mi">500</span> <span class="nv">x</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go through this line by line. The <strong>defn</strong> macro denotes a function named <em>start-search</em> which takes two arguments, <em>app</em> for a reference to the application state and <em>tweets-chan</em>, a channel to put tweets onto. Channels are building blocks in <strong><a href="https://github.com/clojure/core.async">core.async</a></strong>. We will get to that in a little bit. For now, just think about a channel as a conveyor belt onto which one part of the application puts data. On the other end, another part of the application picks up the data, but the sender does not need to know about it. Broadly speaking, it is a sweet way to decouple parts of an application.</p>

<p>The next line contains the description of the function, followed by a <strong><a href="http://clojure.org/special_forms#binding-forms">let binding</a></strong> where we first declare two local immutable values, both of which are available for the remainder of the function. The first one, <em>search</em>, retrieves the value for the key <em>:search-text</em> in the application state. <em>@app</em> dereferences the application state, giving us an immutable copy of the current app state. <code>(:search-text @app)</code> will run the keyword as a function with the state map as an argument, returning the value in the map. Next we declare <em>s</em> whose value can take two paths as decided by the <strong><a href="http://clojure.org/special_forms#Special%20Forms--(if%20test%20then%20else?)">if special form</a></strong>. The if form consists of three parts. There is a test: <code>(= search "")</code>. Not surprisingly at this point, <strong>=</strong> is a function that evaluates if the arguments passed to it are equal, returning either true or false. The <strong>if</strong> form then either returns the expression right after the test if the test evaluated to <em>true</em> or the subsequent one if it evaluated to <em>false</em>. What we are doing here is simply replace an empty string with an asterisk or otherwise just take the search string.</p>

<p>Next, we close a previous Server Sent Event stream, should one exist. This is only required when we reset the application state as on initial startup, the value for the <em>:stream</em> key will be nil. Then we reset the application state by replacing it with a clean state. Then we swap the value for the <em>:search</em> key with the content of the local value <em>s</em>. Then we set the location hash to represent a URI encoded version of the search string.</p>

<p>In the next line, we create a new EventSource object for the live stream of tweets and store it under the <em>:stream</em> key, to which we then attach a function as an event listener. We are using an anonymous function literal here because the <em>receive-sse</em> function takes two arguments (a channel and an event from the EventSource object) whereas the event listener requires a function that only takes a single argument. Then, finally, we call <em>ajax/prev-search</em> with 5 chunks of 500 results each, but we will look at that later. For now let&#8217;s focus on the <em>receive-sse</em> function:</p>

<figure class='code'><figcaption><span>receive-sse function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 44 to 47)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">receive-sse</span> <span class="p">[</span><span class="nv">tweets-chan</span> <span class="nv">e</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;callback, called for each item (tweet) received by SSE stream&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">tweet</span> <span class="p">(</span><span class="nf">js-&gt;clj</span> <span class="p">(</span><span class="nf">JSON/parse</span> <span class="p">(</span><span class="nf">.-data</span> <span class="nv">e</span><span class="p">))</span> <span class="ss">:keywordize-keys</span> <span class="nv">true</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">put!</span> <span class="nv">tweets-chan</span> <span class="nv">tweet</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a function with two arguments, a channel and an event. In the <strong>let-binding</strong>, the event is parsed into a tweet. This reads inside out: <strong>1)</strong> get event data <strong>2)</strong> parse JSON into a JavaScript object <strong>3)</strong> convert the JavaScript object into a Clojure(Script) Map. Note that for the conversion into a Clojure Map, we can automatically have the keys converted into keywords using <em>:keywordize-keys true</em>. This is convenient as we can later use the keywords as functions to retrieve values for the respective key. Then the <em>tweet</em> from the let binding is <em>put!</em> onto the <em>tweets-chan</em>, which represents the aforementioned conveyor belt, where we do not need to worry about who picks up the items on the other end.</p>

<p>Now is a good time to talk a little more about those channels. Channels are brought to Clojure by importing the <strong><a href="https://github.com/clojure/core.async">core.async</a></strong> library. <strong>Core async</strong> is modeled after channels in the <strong><a href="http://golang.org">Go programming language</a></strong>, which implement <strong><a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Processes</a></strong> or <strong>CSP</strong> for short. You really should watch <strong><a href="http://www.infoq.com/presentations/clojure-core-async">Rick Hickey&#8217;s talk about core.async</a></strong> now if you haven&#8217;t done so already. The same goes for the following talk from 2012 by Rob Pike, who played a key role in the development of Go: <strong><a href="https://www.youtube.com/watch?v=f6kdp27TYZs">Go Concurrency Patterns</a></strong>.</p>

<p>I am really only scratching the surface of what can be achieved with CSP, but it does seem like a useful abstraction to decouple parts of an application. Besides the aforementioned <em>tweets-chan</em> there also is a channel for previous tweets retrieved using Ajax calls (we will cover that part next):</p>

<figure class='code'><figcaption><span>Channels</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/core.cljs'>core.cljs (lines 37 to 44)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Channels for handling information flow in the application.</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tweets-chan</span> <span class="p">(</span><span class="nf">chan</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">prev-tweets-chan</span> <span class="p">(</span><span class="nf">chan</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span>
</span><span class='line'> <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">t</span> <span class="nv">chan</span><span class="p">]</span> <span class="p">(</span><span class="nf">alts!</span> <span class="p">[</span><span class="nv">tweets-chan</span> <span class="nv">prev-tweets-chan</span><span class="p">]</span> <span class="ss">:priority</span><span class="p">)]</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">tweets/add-tweet</span> <span class="nv">t</span> <span class="nv">app-state</span> <span class="nv">word-cloud</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">recur</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, two channels have been defined. Then, inside the <em>go-block</em>, <em>alts!</em> with <em>:priority</em> takes one of the items from the two channels, with priority on the first one. That is because live tweets should always be processed immediately whereas previous results can wait. With this item <em>t</em> taken from one of the channels, the <em>add-tweet</em> function in the <em>tweets</em> namespace is called. Finally, the go-loop runs continuously using <em>recur</em>.</p>

<p>Before looking at the <em>tweets</em> namespace, let&#8217;s have a quick look at the Ajax call performed in the <em>start-search</em> function above:</p>

<figure class='code'><figcaption><span>prev-search</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/ajax.cljs'>ajax.cljs (lines 35 to 40)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">prev-search</span> <span class="p">[</span><span class="nv">query-string</span> <span class="nv">size</span> <span class="nv">from</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">json-xhr</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:method</span> <span class="ss">:post</span>
</span><span class='line'>     <span class="ss">:url</span> <span class="s">&quot;/tweets/search&quot;</span>
</span><span class='line'>     <span class="ss">:data</span> <span class="p">(</span><span class="nf">query</span> <span class="nv">query-string</span> <span class="nv">size</span> <span class="nv">from</span><span class="p">)</span>
</span><span class='line'>     <span class="ss">:on-complete</span> <span class="o">#</span><span class="p">(</span><span class="nf">put!</span> <span class="nv">ajax-results-chan</span> <span class="nv">%</span><span class="p">)}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, we see a function that takes a query string, the expected number of items in the result and an offset. It then calls <em>json-xhr</em> from the imported <strong><a href="http://docs.closure-library.googlecode.com/git/class_goog_net_XhrIo.html">goog.net.XhrIo</a></strong> with a map specifying method, url, data and an event handler. <strong>XhrIo</strong> comes with <strong><a href="https://developers.google.com/closure/compiler/">Google&#8217;s Closure Compiler</a></strong> that is used in the ClojureScript to JavaScript compilation process.</p>

<p>The query itself is generated by the <em>query</em> function in the same namespace:</p>

<figure class='code'><figcaption><span>Ajax</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/ajax.cljs'>ajax.cljs (lines 19 to 23)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">query</span> <span class="p">[</span><span class="nv">query-string</span> <span class="nv">size</span> <span class="nv">from</span><span class="p">]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:size</span> <span class="nv">size</span> <span class="ss">:from</span> <span class="nv">from</span>
</span><span class='line'>   <span class="ss">:sort</span> <span class="p">{</span><span class="ss">:id</span> <span class="s">&quot;desc&quot;</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:query</span> <span class="p">{</span><span class="ss">:query_string</span> <span class="p">{</span><span class="ss">:default_field</span> <span class="s">&quot;text&quot;</span> <span class="ss">:default_operator</span> <span class="s">&quot;AND&quot;</span>
</span><span class='line'>                          <span class="ss">:query</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;(&quot;</span> <span class="nv">query-string</span> <span class="s">&quot;) AND lang:en&quot;</span><span class="p">)}}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function generates the map with the properties required for the ElasticSearch query on the server side. This query will eventually go on the wire as JSON.</p>

<p>Then finally, as an event handler, there is an anonymous function literal that puts the result onto another channel for the Ajax results:</p>

<figure class='code'><figcaption><span>Ajax results channel and Go Loop</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/ajax.cljs'>ajax.cljs (lines 11 to 17)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ajax-results-chan</span> <span class="p">(</span><span class="nf">chan</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">parsed</span> <span class="p">(</span><span class="nf">js-&gt;clj</span> <span class="p">(</span><span class="nf">JSON/parse</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">ajax-results-chan</span><span class="p">))</span> <span class="ss">:keywordize-keys</span> <span class="nv">true</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">t</span> <span class="p">(</span><span class="ss">:hits</span> <span class="p">(</span><span class="ss">:hits</span> <span class="nv">parsed</span><span class="p">))]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="ss">:_id</span> <span class="nv">t</span><span class="p">)</span> <span class="mi">200</span><span class="p">))</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="p">(</span><span class="nf">timeout</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">put!</span> <span class="nv">cljs-om.core/prev-tweets-chan</span> <span class="p">(</span><span class="ss">:_source</span> <span class="nv">t</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">recur</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, the JSON for each item on the channel is parsed into a Clojure(Script) data structure, where <em>parsed</em> is a vector. Then, each item in that vector is <em>put!</em> onto the <em>prev-tweets-chan</em>. Here, the value for the <em>:_source</em> key is used here as that is where ElasticSearch stores the original item. One thing to note here is the usage of a <strong><a href="https://clojure.github.io/core.async/#clojure.core.async/timeout">timeout</a></strong> roughly every 200 tweets. I have introduced this in order to occasionally return control to the <strong><a href="http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/">JavaScript Event Loop</a></strong> so that <strong>a)</strong> the UI gets rendered and <strong>b)</strong> the event listener for tweets from the Server Sent Event stream can do its thing. Otherwise, the application just appears to halt until all previous tweets have been processed, which is really annoying. But this seems rather hacky, I would be really curious about solving this problem more elegantly.</p>

<p>With the preloading of tweets using Ajax calls covered, we can now proceed to the processing of tweets inside the <em>tweets</em> namespace. As we have seen before with the go loop alternating between channels, <em>add-tweet</em> is called for each tweet coming into the application:</p>

<figure class='code'><figcaption><span>add-tweet function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 33 to 42)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-tweet</span> <span class="p">[</span><span class="nv">tweet</span> <span class="nv">app</span> <span class="nv">word-cloud</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;increment counter, add tweet to tweets map and to sorted sets by id and by followers&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">state</span> <span class="o">@</span><span class="nv">app</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span> <span class="nb">assoc </span><span class="ss">:count</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="ss">:count</span> <span class="nv">state</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">add-to-tweets-map</span> <span class="nv">app</span> <span class="ss">:tweets-map</span> <span class="p">(</span><span class="nf">util/format-tweet</span> <span class="nv">tweet</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">util/swap-pmap</span> <span class="nv">app</span> <span class="ss">:by-followers</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="ss">:id_str</span> <span class="nv">tweet</span><span class="p">))</span> <span class="p">(</span><span class="ss">:followers_count</span> <span class="p">(</span><span class="ss">:user</span> <span class="nv">tweet</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">util/swap-pmap</span> <span class="nv">app</span> <span class="ss">:by-id</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="ss">:id_str</span> <span class="nv">tweet</span><span class="p">))</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">tweet</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">add-rt-status</span> <span class="nv">app</span> <span class="nv">tweet</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">wc/process-tweet</span> <span class="nv">app</span> <span class="p">(</span><span class="ss">:text</span> <span class="nv">tweet</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">. </span><span class="nv">word-cloud</span> <span class="p">(</span><span class="nf">redraw</span> <span class="p">(</span><span class="nf">clj-&gt;js</span> <span class="p">(</span><span class="nf">wc/get-words</span> <span class="nv">app</span> <span class="mi">250</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all, for each new tweet, the counter inside the application state is swapped with the number incremented by one. Then, <em>add-to-tweets-map</em> is called (described below), which as the name suggests adds the current tweet to the map that is found under the <em>:tweets-map</em> key in the application state. Before being added, each tweet is also processed; in that step, for example, user mentions and links are replaced with the correct HTML representation.</p>

<p>For a better understanding: the application allows displaying the tweets in different sort orders. Priority maps are used for maintaining the sort order. These priority maps contain nothing more than the ID of the tweet and whatever that specific map is sorted on, i.e. the number of followers. The full tweets are stored in one map with the ID of a tweet as the key and the tweet itself as the value. For displaying a sorted list of tweets in the UI, a sorted vector from the priority map is mapped by looking up each item in <em>:tweets-map</em> and using that item instead of the sorted value.</p>

<p>Here is how a tweet is added to the application state:</p>

<figure class='code'><figcaption><span>add-to-tweets-map function</span><a href='https://github.com/matthiasn/BirdWatch/blob/2d1fbc587506a954b0d9f7e302a978fd93c04ecd/clients/cljs-om/src/cljs_om/tweets.cljs'>tweets.cljs (lines 11 to 15)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-to-tweets-map</span> <span class="p">[</span><span class="nv">app</span> <span class="nv">tweets-map</span> <span class="nv">tweet</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;adds tweet to tweets-map&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">app</span>
</span><span class='line'>         <span class="nv">assoc-in</span> <span class="p">[</span><span class="nv">tweets-map</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="ss">:id_str</span> <span class="nv">tweet</span><span class="p">))]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">util/format-tweet</span> <span class="nv">tweet</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function above takes the application state, the keyword under which the tweets-map can be found in the application state and a tweet to be added. It then swaps the application state with a new version into which the tweet is added after undergoing the <em>format-tweet</em> treatment. Note that <em>assoc-in</em> takes a vector that describes the path to the item being added or changed. The string representation of the tweet ID is converted to a keyword so that it can be used as a lookup function later (as previously described). Let&#8217;s assume we have a tweet with ID string &#8220;12345&#8221;. The path passed to <em>assoc-in</em> will then look like this: [:tweets-map :12345]. Afterwards, the map stored under the <em>:tweets-map</em> key will have a new key <em>:12345</em> with the formatted tweet as the associated value. A call to this function will also replace an already existing item.</p>

<p><strong>TO BE CONTINUED</strong></p>

<h1>Summary</h1>

<p>Overall I find working with Clojure(Script) and Om pleasant. Working and thinking in Clojure is a lot of fun. I have heard people complain about all the parentheses in Lisp but I do not share that sentiment. Quite the opposite, I find that <strong><a href="http://en.wikipedia.org/wiki/S-expression">s-expressions</a></strong> and the associated <strong><a href="http://en.wikipedia.org/wiki/Polish_notation">prefix notation</a></strong> add a lot of clarity without having to learn any additional, language-specific rules.</p>

<p>However I still need to understand how to improve the structure of an application in Clojure(Script). I am still not completely happy with the current architecture of the application described in this post. But that will hopefully improve.</p>

<p>Please comment and suggest any improvement you can think of, including typos and difficult to understand sentences. This is a work in progress and an early draft at that. Any help is certainly much appreciated.</p>

<p>Cheers,
Matthias</p>

<p>Check out my <strong><a href="http://matthiasnehlsen.com/reviews">reviews page</a></strong> where I share my thoughts on books and gadgets.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Actually I should mention <strong><a href="http://lodash.com">Lo-Dash</a></strong> instead of <strong>underscore</strong>. I use it as a drop-in replacement for underscore for one reason in particular: <strong><a href="http://lodash.com/docs#cloneDeep">_.cloneDeep</a></strong>. The ability to deep clone a data structure makes developing an undo functionality much, much, much easier. Not as trivial as with <strong><a href="http://swannodette.github.io/2013/12/31/time-travel/">ClojureScript</a></strong> or with <strong><a href="http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs/">Scala.js</a></strong>, but not difficult either.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch client using ClojureScript and Om]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/17/BirdWatch-in-ClojureScript/"/>
    <updated>2014-07-17T08:30:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/17/BirdWatch-in-ClojureScript</id>
    <content type="html"><![CDATA[<p>Back in January I wanted to try out <strong><a href="https://github.com/swannodette/om">Om</a></strong>. Now, I finally got around to doing so.</p>

<!-- more -->




<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/swannodette">@swannodette</a> Om looks really powerful, I think I&#39;m going to give it a try in one of the next articles.</p>&mdash; Matthias Nehlsen (@matthiasnehlsen) <a href="https://twitter.com/matthiasnehlsen/statuses/427945296971042816">January 27, 2014</a></blockquote>


<script async src="http://matthiasnehlsen.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>For those of you who do not know, <strong><a href="https://github.com/swannodette/om">Om</a></strong> is a <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> wrapper around Facebook&#8217;s <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> library. I have covered <strong>ReactJS</strong> on this blog a few times, for example in the post mentioned in the twitter conversation above. <strong>ClojureScript</strong> is very similar to <strong><a href="http://clojure.org">Clojure</a></strong>, except that it targets the browser and not the <strong><a href="http://en.wikipedia.org/wiki/Java_virtual_machine">JVM</a></strong>. Like <strong><a href="http://www.scala-js.org">Scala.js</a></strong>, ClojureScript is compiled into <strong>JavaScript</strong>.</p>

<p>Finally I got around to giving <strong>Om</strong> a spin and wrote my first application in <strong>ClojureScript</strong>. You can try it out <a href="http://birdwatch.matthiasnehlsen.com/cljs/#" target="_blank"><strong>here</strong></a>. Before, I had only read a little bit about Clojure and ClojureScript and I had also gone through <strong><a href="http://clojurekoans.com">clojurekoans</a></strong>. Then, just for the fun of it (and to see for myself if I could make it work), I wanted to write a new client for my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application, this time in ClojureScript. BirdWatch is kind of a live search engine to search for tweets in an area of interest, with a <strong><a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a></strong> retrieving search results from a server component, including updates to that search over a streaming connection using <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>. In the browser, some basic stats are shown about specific tweets (like recent RTs) and the usage of words (wordcloud and trending barchart) plus a time series chart displaying the time distribution of recent tweets matching a query. The server side is written in <strong><a href="http://www.scala-lang.org">Scala</a></strong> using <strong><a href="http://www.playframework.com">Play Framework</a></strong>, however that does not need to concern us for this article as the wire format is plain <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>.</p>

<p>The UI of the new client is done in <strong><a href="https://github.com/swannodette/om">Om</a></strong> and the internal communication between application parts is realized with <strong><a href="https://github.com/clojure/core.async">Core.async</a></strong>. All the data mangling is done in ClojureScript instead of using <strong><a href="http://square.github.io/crossfilter/">crossfilter.js</a></strong> as was the case with the ReactJS and the AngularJS versions. For more information about the server side and a JavaScript version of the client side application, I recommend <a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">this article</a>. The description of the server side is still accurate; nothing changed while I was writing this ClojureScript version. On the client side there are version available using AngularJS, ReactJS and now ClojureScript and Om.</p>

<p>This is how the UI of the application looks like now. I have also improved the application while writing this recent addition by</p>

<ul>
<li>offering additional sort orders (by favorite and by retweet within analyzed tweets)</li>
<li>enabling retweets, replies and favorites directly from within the application using web intents</li>
<li>showing photos embedded in tweets</li>
</ul>


<p>So far, some of these changes have made it back into the ReactJS version, with the AngularJS version planned to follow.</p>

<p><a href="http://birdwatch.matthiasnehlsen.com/cljs/#" target="_blank"><img src="http://matthiasnehlsen.com/images/cljs-screenshot.png" /></a></p>

<p>Click the image above to give this new client, which was written in <strong>ClojureScript</strong> a try. Writing it worked surprisingly well and I have learned a lot in the process.</p>

<p>EDIT July 24th, 2014: The <strong><a href="http://matthiasnehlsen.com/blog/2014/07/24/birdwatch-cljs-om/">next article</a></strong> outlines in detail how this application is implemented.</p>

<p>Cheers,
Matthias</p>

<p>Check out my <strong><a href="http://matthiasnehlsen.com/reviews">reviews page</a></strong> where I share my thoughts on books and gadgets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New AngularJS Meetup in Hamburg]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/08/hamburg-angularjs-meetup/"/>
    <updated>2014-07-08T09:05:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/08/hamburg-angularjs-meetup</id>
    <content type="html"><![CDATA[<p>Hamburg is the second largest city in Germany, and as such it really should have an <strong>AngularJS Meetup</strong>. It hasn&#8217;t had one until now, so I founded one.</p>

<!-- more -->


<p>I did server side development for the most of the last seven months but I finally had a chance to write an internal web application at work using <strong><a href="https://angularjs.org">AngularJS</a></strong> and I was pleasantly surprised how much I enjoyed the process. AngularJS provides you with quite a useful way of structuring an application with services, controllers, directives, centralized configuration and, most importantly, <strong><a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a></strong> for wiring parts of an application together.</p>

<p>While working on the AngularJS application I noticed that I did not really have enough people to talk to when it came to single-page applications and user experience, so I started to look for a nearby <strong><a href="https://angularjs.org">AngularJS</a></strong> meetup.</p>

<p>To my surprise, there was none in Hamburg yet. After all, <strong><a href="http://en.wikipedia.org/wiki/Hamburg">Hamburg</a></strong> is the second largest city in Germany with well over 2 million people if you include the suburbs. I really believe it should have such a meetup so I founded the <strong><a href="http://www.meetup.com/Hamburg-AngularJS-Meetup/">Hamburg AngularJS Meetup</a></strong>. Please do join if you agree with me that Hamburg still lacks such a Meetup.</p>

<p>A first Meetup is scheduled for <strong>Thursday, July 24th, 2014 at 7pm</strong>. There is no venue for the event yet, so please let me know if you would like to sponsor the meetup by providing a location or know anyone who can provide the space. There is also no agenda as of yet. Please let me know if you have anything AngularJS-related that you would like to talk about or that you are particularly interested in.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributed Atmospheric Pressure Measurement]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/06/distributed-barometer/"/>
    <updated>2014-07-06T11:58:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/06/distributed-barometer</id>
    <content type="html"><![CDATA[<p>Later this month, I&#8217;ll be going on a hiking tour in the Alps around the <strong><a href="http://en.wikipedia.org/wiki/Matterhorn">Matterhorn</a></strong>. I do not recall exactly why I said yes to this tour; maybe because I did not know then that during the ten days we&#8217;d climb a combined total of <strong>10,500 meters</strong> (roughly 34,500 feet). But on the other hand, that&#8217;s an interesting challenge for a person with a sedentary job.
Now, me being me, I would love to have a way to track the current altitude plus the combined ascent. <strong><a href="http://en.wikipedia.org/wiki/Global_Positioning_System">GPS</a></strong> can help here, but the best sensor that&#8217;s up to the task task appears to be a <strong><a href="http://en.wikipedia.org/wiki/Barometer">barometer</a></strong>.</p>

<!-- more -->


<p><img class="left" src="http://matthiasnehlsen.com/images/matterhorn.jpg" title="image" alt="images"></p>

<p>GPS sensors only have an accuracy of <strong><a href="http://www.xcmag.com/2011/07/gps-versus-barometric-altitude-the-definitive-answer/">±45m in the vertical axis</a></strong>, which makes them less than ideal for measuring combined ascent unless readings are averaged over longer periods. However, averaging would not only alias the otherwise occurring zigzag lines from the measurement errors, but also the real ups and downs in the terrain that you actually want to measure. Though a barometer can capture these small changes much better, it is prone to a shift over the day as the atmospheric pressure changes with the weather. It appears that the averaged GPS readings, while not all that useful for capturing altitude changes in unknown terrain - could be used to correct the barometric height from time to time. When the barometric height deviates by more than 45m from the averaged GPS altitude, we know that a correction is due.</p>

<p>In addition to providing a higher resolution when continuously measuring altitude changes, a barometric sensor also consumes much less energy than a GPS sensor, which makes this sensor type particularly suitable for continuous monitoring.</p>

<p>Thinking about barometric sensors, I came across two articles (<strong><a href="http://www.forbes.com/sites/gordonkelly/2014/06/19/iphone-6-likely-to-include-barometer-for-super-accurate-local-weather/">Forbes</a></strong>, <strong><a href="http://9to5mac.com/2014/06/18/iphone-6-likely-to-sport-barometer-air-pressure-sensors-to-measure-altitude-weather/">9to5mac</a></strong>) that stated that the upcoming <strong>iPhone 6</strong> will have such a sensor. First of all, <strong>Apple</strong>, that&#8217;s a little late for my tour. Can I get a prototype, please? Anyhow, I find pressure sensors in connected devices really exciting, even if the sensor won&#8217;t be available for the upcoming tour yet.</p>

<p>I am not an expert in <strong><a href="http://en.wikipedia.org/wiki/Meteorology">meteorology</a></strong>, but in my layman&#8217;s understanding of the subject, <strong><a href="http://en.wikipedia.org/wiki/Atmospheric_pressure">atmospheric pressure</a></strong> changes are one of the most essential measurable phenomena that weather forecasts revolve around. This makes total sense when you think about it. Wind brings changes in the weather. Most of the clouds here in <strong><a href="http://en.wikipedia.org/wiki/Hamburg">Hamburg</a></strong> where I live are not formed spontaneously above my apartment building but are blown there by the wind somewhere from the Atlantic Ocean. <strong><a href="http://en.wikipedia.org/wiki/Wind">Wind</a></strong> is a manifestation of atmospheric pressure change. Let&#8217;s assume that at my current location the atmospheric pressure is higher in the west and lower in the east. As air tends to go back to equilibrium, it flows from the high pressure field to the low pressure field, which I then perceive as <strong><a href="http://en.wikipedia.org/wiki/West_wind">west wind</a></strong>.</p>

<p>Have you ever noticed a gust of wind before an adverse weather event like a thunderstorm? Besides being the title of a song on <strong><a href="https://itunes.apple.com/en/album/g-i-r-l/id823593445">Pharell&#8217;s new album</a></strong>, this gust of wind a sudden change in pressure and I am pretty sure that would be measurable by a <strong><a href="http://en.wikipedia.org/wiki/Pressure_sensor">barometric sensor</a></strong> in a mobile device. Now imagine that all smart phones are equipped with such sensors that are constantly sending the current atmospheric pressure together with GPS coordinates. I really wonder what that would mean for the accuracy of <strong><a href="http://en.wikipedia.org/wiki/Weather_forecasting">weather forecasts</a></strong>. I suspect they would become more accurate as they would feed real-time data back into the models, which in turn would adjust predictions. But at the same time, I also wonder how one would process all that extra data, with millions of sensors that move instead of being installed at fixed places. I&#8217;m sure this will not make the predictive models simpler. There are all kinds of interesting questions around this. For example, how do you know if a sensor is on the ground? A sudden change in pressure can also be due to the smart phone holder getting into an elevator, in particular if the elevator is in a high-rise building. Maybe only sensor data from moving targets should be used. How about collecting that data when a turn-by-turn navigation app is used? Then the altitude of the reading is fairly predictable, namely a few feet above the street. And the altitude of that street is typically known and does not change.</p>

<p>I&#8217;m all for using such data when it can keep me from getting wet or otherwise affected by adverse weather conditions. However, I believe there should be open standards on how this data is transmitted. I understand that this data only makes sense with embedded GPS location that ought to be precise to be most valuable. But at the same time <strong>I am not okay with my device constantly leaking my location together with identifiable data</strong>. My device ID or any other information related to me is not necessary for the noble task of making weather forecasts better and as such should not be included. In German we have a word for this: <strong>Datensparsamkeit</strong>. Martin Fowler did a <strong><a href="http://martinfowler.com/bliki/Datensparsamkeit.html">good job translating the concept</a></strong> into English. Just because we can store every piece of information we can get our hands on, it does not mean that that&#8217;s always a great idea.</p>

<p>But with that being said, I find the idea of having millions of additional - and moving - sensors to measure changes in atmospheric pressure <strong>fascinating</strong>. This real-time data could prove just as useful for refining weather models as it is for improving navigation by getting traffic data from smart phones that move with their owners in their cars (or not in the case of a traffic jam). By the way, does anyone know what data exactly the devices send back for live traffic? Once again, there is a case to be made for an open standard for anonymized sensor data and <strong><a href="http://martinfowler.com/bliki/Datensparsamkeit.html">Datensparsamkeit</a></strong>.</p>

<p>Until next time,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated Approach]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/07/02/new-approach/"/>
    <updated>2014-07-02T11:58:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/07/02/new-approach</id>
    <content type="html"><![CDATA[<p>So, I have recently suffered from writer&#8217;s block. Well no, that&#8217;s not exactly true. The problem was not getting started with a topic, but rather sticking with it and continuing to work on it. But there may be a way to get back into the rhythm: finish a less complex project.</p>

<!-- more -->


<p>Looking at my past articles, I seem to have a tendency to go for the long form. While I don’t think there’s anything wrong in that per se, I do want write both long and short articles. Ideally I would have one long article (or three) in the works and at the same time publish short ideas and random ramblings in between. Sometimes with code, sometimes without.</p>

<p><strong>So here&#8217;s to a new approach for this blog.</strong> I will still come up with large and (hopefully) profound articles from time to time, so no changes on that front. But in addition, I will also more frequently post shorter notes. Or at least that&#8217;s the idea. Let&#8217;s see how it works out.</p>

<p>Regarding the existing newsletter, I am not exactly sure how to leverage that. As a subscriber, you have become accustomed to getting an email once or sometimes twice per month. I don&#8217;t want to spam you much more frequently all of a sudden. Maybe I should create another newsletter for the more frequent updates? I&#8217;m curious about your thoughts on this. For now, I will just announce this change once and then keep using the current newsletter only for the more infrequent long articles only.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Framework, Server Sent Events and Internet Explorer]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/06/09/play-sse-ie/"/>
    <updated>2014-06-09T19:35:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/06/09/play-sse-ie</id>
    <content type="html"><![CDATA[<p>Next week I will be presenting at <strong><a href="http://scaladays.org">Scala Days</a></strong>. In my talk I will discuss how to build reactive applications with two-way (near) real-time communication, using the combination of <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events</a></strong> to provide clients with updates and <strong><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST calls</a></strong> for the backchannel. You may already be familiar with two examples of this architecture: <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> and <strong><a href="https://github.com/matthiasn/sse-chat">sse-chat</a></strong>. I am now thinking about potential questions in the Q&amp;A session after the talk. One potential issue that came to mind almost immediately was the support for <strong><a href="http://en.wikipedia.org/wiki/Internet_Explorer">Internet Explorer</a></strong>. Out of the box, IE does not support <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events</a></strong>. Personally, I do not care very much about IE support. I had not used it in years before I started researching for this article, and only a low single-digit percentage of visitors on my blog use IE. But I understand this can be a showstopper. So if you don&#8217;t care about IE support at all, you really don&#8217;t need to read any further. Otherwise, bear with me.</p>

<!-- more -->


<p>So I started looking for polyfills and found <strong><a href="https://github.com/Yaffle/EventSource">this one</a></strong>. From the description, it should work right away with IE 10 and above, with no changes to the server side required. What I am presenting in this article is a rather blunt fix, changing the JavaScript from the forked polyfill so that:</p>

<ul>
<li>The <strong>global EventSource object</strong> is only ever replaced if it doesn’t exist. That way I don’t have the burden of having to check if this implementation works with all currently available browser versions (and those to come). Rather, the global EventSource object from the polyfill is only created in Internet Explorer.</li>
<li>The check for the &#8220;correct&#8221; <strong>ContentType</strong> is removed. Out of the box it did not work with Play Framework, but without this check it does. I didn’t care much about changing the ContentType on the server side just to make the polyfill happy.</li>
</ul>


<p>Let&#8217;s have a quick look at the code modifications. They are really short.</p>

<figure class='code'><figcaption><span>Conditional Execution of Anonymous Function</span><a href='https://github.com/matthiasn/EventSource/blob/9d1a842c6dbd11213c0fa73505da9ba6190de000/eventsource.js'>eventsource.js (lines 18 to 22)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** modified by Matthias Nehlsen on June 9th, 2014 to add </span>
</span><span class='line'><span class="cm"> *  check without changing the indentation of the rest of </span>
</span><span class='line'><span class="cm"> *  the file so that changes can more easily be tracked. */</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">global</span><span class="p">.</span><span class="nx">EventSource</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>The block above ensures that the anonymous function creating / replacing the global EventSource object is really only executed when there is no such global object. This is done by wrapping the anonymous function creating the EventSource object in another anonymous function that does the check. The global EventSource is then created below:</p>

<figure class='code'><figcaption><span>Creating a global EventSource object</span><a href='https://github.com/matthiasn/EventSource/blob/9d1a842c6dbd11213c0fa73505da9ba6190de000/eventsource.js'>eventsource.js (lines 481 to 482)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Using EventSource PolyFill&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">global</span><span class="p">.</span><span class="nx">EventSource</span> <span class="o">=</span> <span class="nx">EventSource</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only other thing to note is that a check for the expected <em>ContentType</em> was disabled as it was incompatible with the out-of-the box behavior of Play Framework&#8217;s EventSource implementation:</p>

<figure class='code'><figcaption><span>Check for expected ContentType</span><a href='https://github.com/matthiasn/EventSource/blob/9d1a842c6dbd11213c0fa73505da9ba6190de000/eventsource.js'>eventsource.js (lines 225 to 227)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** modified by Matthias Nehlsen on June 9th, 2014 to </span>
</span><span class='line'><span class="cm"> *  remove incompatible ContentType type check. */</span>
</span><span class='line'><span class="c1">//if (status === 200 &amp;&amp; contentTypeRegExp.test(contentType)) {</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then finally all there is left to do is load this modified polyfill in the application, like this:</p>

<figure class='code'><figcaption><span>Loading polyfill in Play Framework View</span><a href='https://github.com/matthiasn/BirdWatch/blob/c0ad30aea35937d624b103ff3b43dab252af7750/app/views/index.scala.html'>index.scala.html (line 141)</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/assets/javascripts/vendor/eventsource.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this JavaScript file loaded in the client side application, the application now works with Internet Explorer 10 and 11, with the potential of supporting versions 8 and 9 as well, should someone care to help. Supposedly, some padding at the beginning of an SSE connection is needed. I have no idea how to add this 2K padding, but maybe you, the reader, know how to achieve this? If so, please help. Thanks in advance. I will not fix this, instead I will side with Google. They have dropped support for IE 9 and below <strong><a href="http://googleappsupdates.blogspot.de/2013/11/end-of-support-for-internet-explorer-9.html">last year</a></strong> and I am fine with supporting what Google supports.</p>

<p>Great. Much better than having to answer “sorry, IE is not supported at all”. Blaming Microsoft alone is not going to help much when your client demands just this particular support. Now if you want to use this architecture for a reactive application and your pointy-haired boss comes along, demanding support for IE, you can put a smile on your face.</p>

<p>I am happy to have this potential showstopper out of the way. I&#8217;ve been meaning to address this problem for a while, I just dreaded the logistics of setting up a testing environment for IE, and that part was about as annoying as expected. I had to dig out an old Windows 7 image for VMWare Fusion, copy the 40GB over rather slow Wi-Fi and then do all the due updates, with multiple restarts of the VM, of course. Oh how I have missed Windows. I had almost forgotten. How can it take hours to load the updates that make me eligible for IE 10 alone? Anyhow, that&#8217;s about as much exposure to Internet Explorer as I can deal with for the moment. With Internet 10 and 11, the core functionality with the Server Sent Events works fine now.</p>

<p>The <strong><a href="http://code.shutterstock.com/rickshaw/">Rickshaw</a></strong> time series chart on the upper right in BirdWatch does not seem to work in IE, but that&#8217;s not part of the proof that the proposed architecture works with newer versions of IE. I do not plan on spending any more time making IE 8 and 9 work, but in theory it sounds like that would be possible, at least according to the documentation of <strong><a href="https://github.com/Yaffle">Yaffle&#8217;s</a></strong> <strong><a href="https://github.com/Yaffle/EventSource">polyfill</a></strong>. Please feel free to fix this in case you know a solution. There&#8217;s a <strong><a href="https://github.com/matthiasn/EventSource">fork</a></strong> of the polyfill that would happily accept pull requests. Thank you.</p>

<p>Okay, until next time, I hope to see you at Scala Days. Say hi when you see me, please.
Matthias</p>

<p>Check out my <strong><a href="http://matthiasnehlsen.com/reviews">reviews page</a></strong> where I share my thoughts on books and gadgets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch: AngularJS vs. ReactJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/03/31/birdwatch-with-reactjs/"/>
    <updated>2014-03-31T22:21:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/03/31/birdwatch-with-reactjs</id>
    <content type="html"><![CDATA[<p><strong>Summary:</strong> In this article I will present a new version of the BirdWatch application that uses <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side instead of <strong><a href="http://angularjs.org">AngularJS</a></strong>. Don&#8217;t worry if you liked the previous AngularJS version - I do not intend to replace it. Rather, I want to create another version of the client side web application in order to get a better feeling for the pros and cons of different frameworks and libraries. So think of it as something like the <strong><a href="http://todomvc.com">TodoMVC</a></strong> of reactive web applications. Well, not quite yet, but feel free to write another client version for comparison. EmberJS anyone?
For this new version I have also rewritten the barchart as a ReactJS component with integrated trend analysis and no dependency on <strong><a href="http://d3js.org">D3.js</a></strong>. Again, there is nothing wrong with D3; I just like to try different approaches to the same problem.</p>

<!-- more -->


<p>In this article I will not go into a lot of detail about the server side of the BirdWatch application as there&#8217;s an <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">article on that</a></strong> already. What you need to know is that there is a server side application using <strong><a href="http://www.playframework.com">Play Framework</a></strong> that connects to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> and that subscribes to a defined set of terms, meaning that it will retrieve all tweets containing at least one of these terms, up to a limit of 1% of all tweets at a given time<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Then there is a client side JavaScript application that allows users to perform a live search inside a stream of tweets, with realtime updates of the UI when new search matches come in from Twitter. Here&#8217;s how that looks like. Click the image to try out the application:</p>

<p><a href="http://birdwatch.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/bw_reactjs.png" /></a></p>

<p>Here&#8217;s an animated architectural overview, mostly meant as a teaser for the previous article which describes the server side of the application in detail. You can click it to get to that article:</p>

<p><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/" target="_blank"><img src="http://matthiasnehlsen.com/images/bw_expl_anim.gif" /></a></p>

<p>This has all worked really nicely with AngularJS for a couple of months. Now let&#8217;s see if we can build the same thing with <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side.</p>

<h2>Why would one choose ReactJS over AngularJS?</h2>

<p>In the current version of BirdWatch, AngularJS decides when to figure out if the data model changes so that it can determine when to re-render the UI. These calls can happen at any time, so they need to be idempotent <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. That requirement has been met, any call to the crossfilter service for data is indeed itempotent, but there&#8217;s a catch: every call to get data is potentially expensive, and I&#8217;d rather avoid unnecessary calls to the <strong><a href="http://square.github.io/crossfilter/">crossfilter</a></strong> service. Instead I want to decide when the client UI is rendered by actively triggering the render process. That way I have full control when and how often the UI renderer is fed with new data.</p>

<p>As discussed in my recently published <strong><a href="http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs/">article</a></strong>, ReactJS may also be a better fit when working with immutable data. That is not a concern in the current version of BirdWatch, but it may well be an issue in the future.</p>

<h2>Implementing the existing functionality with ReactJS</h2>

<p>There are four main areas of functionality in the application:</p>

<ul>
<li><p><strong>Search:</strong> The user can start a search by entering the terms into the search bar, which will refresh the data and establish a <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> connection to the server that will deliver search matches in real time. At the same time previous matches are retrieved and merged with the real time results.</p></li>
<li><p><strong>Rendering of tweets:</strong> Different sort orders of tweets are displayed in a list of what I call tweet cards. In AngularJS, directives handle the abstraction of one such tweet nicely.</p></li>
<li><p><strong>Pagination:</strong> The application loads many more tweets than can be displayed on one page (with 5000 tweets being the default). The AngularJS version implements this with a modified subset of the <strong><a href="http://angular-ui.github.io/bootstrap/">AngularUI-Bootstrap project</a></strong>.</p></li>
<li><p><strong>Charts:</strong> Different visualizations are rendered on the page. At the core, D3 does this for us. In the AngularJS version, relatively thin wrappers make <strong><a href="http://docs.angularjs.org/guide/directive">directives</a></strong> out of these charts that get wired data and that re-render when the data changes.</p></li>
<li><p><strong>Bookmarkability:</strong> users can bookmark a search and come back to it later, send it to friends, tweet about it or whatever. AngularJS provides the <strong><a href="http://docs.angularjs.org/api/ng/provider/$locationProvider">$locationProvider</a></strong> for this.</p></li>
</ul>


<p>Let&#8217;s go through these areas one by one.</p>

<h2>Search</h2>

<p>In this area, AngularJS and its two-way data-binding shine. The content of the search input element is bound to a property on the <strong>$scope</strong>, just like the button is bound to a function that is also part of the <strong>$scope</strong> and that triggers a new search. ReactJS, on the other hand, does not offer two-way binding out of the box. There are helpers to achieve this, notably <strong><a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html">ReeactLink</a></strong>, but I have not tried it. It also seems that it is generally discouraged. In this case it was fairly trivial to achieve the functionality without ReactJS; instead I am assigning the functionality using onclick for triggering the search function, and jQuery to achieve the same when enter is pressed inside the input field. AngularJS offers more of a full framework solution for such problems, but I am okay with this solution here.</p>

<figure class='code'><figcaption><span>Search Button</span><a href='https://github.com/matthiasn/BirdWatch/blob/603d4dfb85330e346afdf9241e36a62313eaa620/app/views/react_js.scala.html'>react_js.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;BirdWatch.search()&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The button is plain HTML with an onclick handler. I have assigned the <em>search</em> function to serve as the handler function, which lives in a property of the global BirdWatch object. In addition to the click handler for the button, I also wanted to be able to trigger a search when pressing ENTER inside the search field. jQuery is perfect for that:</p>

<figure class='code'><figcaption><span>Handling Enter in Search Field</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchForm&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally here is the function that triggers the search:</p>

<figure class='code'><figcaption><span>Function for triggering search</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">searchField</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#searchField&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">wordcount</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">activePage</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">crossfilter</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">(),</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#prev-size&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">searchField</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is plain old HTML / JavaScript / jQuery. You may think this to be a rather old-fashioned way of doing it. But on the upside, no special framework knowledge is required, and anyone who has done any web development in the last decade can do this without a learning curve. Alternatively, we could make a ReactJS component out of the search bar and pass the the handler function to this component as part of the <strong>props</strong> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. In this simple case I don&#8217;t believe it is necessary to create a component, but this would be the way to go about it when more complex behavior is desired.</p>

<h2>Rendering of tweets</h2>

<p>This is where it gets much more interesting. AngularJS renders the list of tweets from the data model using <strong>ng-repeat</strong> like this:</p>

<figure class='code'><figcaption><span>ng-repeat in AngularJS version</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweetCard&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;tweet in cf.tweetPage(currentPage, pageSize, sortModel)&quot;</span>
</span><span class='line'>        <span class="na">data-tweet=</span><span class="s">&quot;tweet&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <em>cf.tweetPage</em> is a function that delivers the data from the crossfilter object. The application code has little control over when this happens. It will certainly happen when explicitly calling <em>$scope.$apply</em> and also when anything else happens that has any effect on the data model, anywhere. This is what I meant when I said earlier that this may not be the most desirable thing when this function call is potentially expensive.</p>

<p>ReactJS works the other way round. The application instantiates a component for the list of tweets that knows how to render itself, and it will only subsequently do that when the application actively feeds it new data. Let&#8217;s look at that in more detail. In the HTML, there is only a single div without any special notation:</p>

<figure class='code'><figcaption><span>Tweet List Div in ReactJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/app/views/react_js.scala.html'>react_js.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in the component declaration, it looks as follows:</p>

<figure class='code'><figcaption><span>Tweet List Div in ReactJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/jsx/tweetlist.js'>tweetlist.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Component for conditional rendering of retweet count inside Tweet */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RetweetCount</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-right timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">numberFormat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span><span class="p">)}</span> <span class="nx">RT</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** single Tweet component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Tweet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;tweet&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;http://www.twitter.com/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;thumbnail&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">profile_image_url</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;http://www.twitter.com/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;username&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;username_screen&quot;</span><span class="o">&gt;&amp;</span><span class="nx">nbsp</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">64</span><span class="p">;{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-right timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">fromNow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">created_at</span><span class="p">)}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;tweettext&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">dangerouslySetInnerHTML</span><span class="o">=</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-left timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">numberFormat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">followers_count</span><span class="p">)}</span> <span class="nx">followers</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">RetweetCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">FavoriteCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">favorite_count</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Tweet list component, renders all Tweet items (above) */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TweetList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">tweetNodes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tweet</span><span class="p">,</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Tweet</span> <span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="nx">tweet</span><span class="p">}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">idx</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;tweet-list&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">tweetNodes</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** render BirdWatch components */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tweetListComp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TweetList</span> <span class="nx">tweets</span><span class="o">=</span><span class="p">{[]}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;tweet-frame&#39;</span><span class="p">));</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tweetCount</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TweetCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;tweet-count&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setTweetCount</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetCount</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="nx">n</span><span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setTweetList</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tweetList</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetListComp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span><span class="nx">tweets</span><span class="o">:</span> <span class="nx">tweetList</span><span class="p">});</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <strong>TweetList</strong> component close to the bottom. This component itself has elements of the <strong>Tweet</strong> component type as child elements which it generates inside its only method <em>render</em> by mapping data in the array to individual elements. <em>Render</em>, by the way, is the only method that a ReactJS component is required to have. In this particular component, the child elements are generated by using the map function on the props.tweet, which accordingly needs to be an array as otherwise the JavaScript map function would not be available. In the mapper function, a <strong>Tweet</strong> component is created for every element of the array, and that element is passed to the Tweet component as <strong>props</strong>.</p>

<p>The Tweet component itself also has a <em>render</em> function in which it creates a <strong>div</strong> holding the representation of a tweet. Dynamic data for this comes from accessing the tweet object that was passed in the TweetList component. Note that the code above is not regular JavaScript but JSX, which allows writing a syntax fairly similar to HTML. This JSX is cross-compiled into JavaScript during the build process. More information on this build process can be found in the paragraph and in the <strong><a href="https://github.com/matthiasn/BirdWatch/tree/master/react-js">README</a></strong>.</p>

<p>The <strong>Tweet</strong> component then includes a <strong>RetweetCount</strong> component, to which it passes the RT count as <strong>props</strong>. This component has conditional logic in which it decides itself if it wants to return an empty <strong>div</strong> or actual content. The same goes for the <strong>FollowersCount</strong> component, which I have omitted here as it follows the same principle.</p>

<h2>Pagination</h2>

<p>Unlike in the AngularJS version, where I relied on additional projects, I have implemented this from scratch with ReactJS. Here&#8217;s the entire component:</p>

<figure class='code'><figcaption><span>Pagination component</span><a href='https://github.com/matthiasn/BirdWatch/blob/b9dc0b4cf19ec47c893aed27a690230dc882d1f8/react-js/jsx/pagination.js'>pagination.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Pagination component, allows selecting the current page in the Tweet list */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PaginationItem</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">setActive</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">page</span><span class="p">)},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">active</span> <span class="o">?</span> <span class="s2">&quot;active&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">setActive</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="nx">a</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">page</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Pagination</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">toggleLive</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">toggleLive</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleFirst</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleLast</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">numPages</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleNext</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setNext</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handlePrevious</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPrev</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">numPages</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">numPages</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">paginationItems</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">numPages</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">PaginationItem</span> <span class="nx">page</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="p">}</span> <span class="nx">active</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">activePage</span><span class="p">}</span> <span class="nx">setPage</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pagination-mini&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">live</span> <span class="o">?</span> <span class="s2">&quot;active&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">toggleLive</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Live</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleFirst</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">First</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handlePrevious</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Previous</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">paginationItems</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNext</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Next</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleLast</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Last</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pagination</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Pagination</span> <span class="nx">numPages</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;pagination&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setPagination</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="nx">pagination</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setPaginationHandlers</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">handlers</span><span class="p">)</span> <span class="p">{</span> <span class="nx">pagination</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">handlers</span><span class="p">);</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, we have two components, one for each item and one that combines the individual items. In the Pagination component, we first determine the minimum of either the number of pages (passed in as <strong>props</strong>) or 25 in order to render a maximum of 25 pages. Then we do a map on this the resulting range (with the range being created by an <strong><a href="http://underscorejs.org">underscore</a></strong> function), rendering one PaginationItem component for each of these pages. So far this is comparable to the components we have already seen above. What is new here is that the <em>handler functions</em> are also passed as <strong>props</strong> and assigned by the component. The nice thing about this is that this way we can also dynamically assign handler functions. We could just as well call functions on the global application object inside the handlers, but conceptually I find it cleaner to think about the component only ever receiving props, without needing to know anything about the application it is embedded in.</p>

<h2>Bookmarkability</h2>

<p>At first I did not really know how to achieve this feature using ReactJS. I have seen examples using <strong><a href="http://backbonejs.org">Backbone</a></strong> and its <strong><a href="http://backbonetutorials.com/what-is-a-router/">router</a></strong>, which would make sense for more complex applications. One such example is <strong><a href="https://medium.com/react-tutorials/c00be0cf1592">this article</a></strong> and another one is <strong><a href="http://webdesignporto.com/react-js-with-backbone-router-and-local-storage/">this article</a></strong>. For this application, introducing Backbone seemed like overkill though, so I was looking for a simpler approach. Turns out achieving this is super simple using <strong><a href="http://jquery.com">jQuery</a></strong> and the plain old <strong><a href="http://www.w3.org/DOM/">DOM API</a></strong>. For the search function I had already created a jQuery object:</p>

<figure class='code'><figcaption><span>searchField jQuery object</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">searchField</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#searchField&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then inside the search function, I simply set the <strong>window.location.hash</strong> with a <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">URI encoded</a></strong> version of the search term:</p>

<figure class='code'><figcaption><span>setting location hash when searching</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when loading the page, I read the location hash into the search field and call <em>search()</em>, which reads the content of the search field and triggers the search with whatever is in there:</p>

<figure class='code'><figcaption><span>trigger search on page load</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Build system</h2>

<p>To round things off, I have configured a <strong><a href="http://gruntjs.com">grunt-based</a></strong> build system that automatically <strong><a href="http://en.wikipedia.org/wiki/Source-to-source_compiler">transpiles</a></strong> JSX into plain old JavaScript and then concatenates the files into a single JavaScript file. I have also included tasks for <strong><a href="http://www.jshint.com">JsHint</a></strong> and <strong><a href="https://github.com/es-analysis/plato">Plato code analysis</a></strong> to improve code quality. Ideally there should be additional tasks for a CSS preprocessor such as <strong><a href="http://lesscss.org">LESS</a></strong> and minification of HTML, CSS and JavaScript files to achieve the best user experience possible, most notably fast load times. Maybe I&#8217;ll get around to that at some point in time. I should also do the same for the AngularJS version.</p>

<h2>Building an SVG Bar Chart with ReactJS (without D3.js)</h2>

<p><strong><a href="http://d3js.org">D3.js</a></strong> is an amazing technology and really great visualizations have been built with it. However it also has a considerably steep learning curve. I personally find ReactJS easier to reason about because unlike D3.js it does not have the notion of <strong><em>update</em></strong>. Instead, we always pass it the entire data and it will put the changes into effect itself through an intelligent diffing mechanism where it compares current and previous versions of a (fast) virtual DOM and only puts the detected changes into effect in the (slow) actual DOM. Now I thought it would be nice if this concept could aso be applied to <strong><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG (scalable vector graphics)</a></strong> in addition to HTML. Turns out the same principles apply, and accordingly I found it fairly simple to re-build the bar chart and have ReactJS instead of D3 create the SVG inside the <strong><a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a></strong>. The resulting code is much shorter than the previous D3 version despite a lot of added functionality. The previous version was a simplistic bar chart, whereas the new version has a built-in trend analysis using <strong><a href="https://github.com/Tom-Alexander/regression-js">regression-js</a></strong>, a neat little regression analysis library. In this new chart each bar is aware of its history and determines its trends using linear regression. Here&#8217;s how that looks like:</p>

<p><img src="http://matthiasnehlsen.com/images/react-barchart.png" /></p>

<p>Each bar has two associated trend indicators, one to show recent movements in the ranking and the other to show an overall trend of the word occurrence. The trends are determined using a simple linear regression, where the slope of the resulting function directly translates into an upward or downward trend. I don&#8217;t have the time to go into detail about the implementation of this chart today, but this topic should make for an interesting article in the future.</p>

<h1>Conclusion</h1>

<p>ReactJS nicely complements the rendering of the UI of the BirdWatch application. From a bird&#8217;s-eye view, it is really not more than a function that accepts data and that, as a side effect, effects a DOM representation in line with the data provided. It does the rendering in a very efficient way and it is low-maintenance; it does not require any more attention than the call necessary to inform it about data changes. I find its data flow model very easy to reason about, simpler in fact than the multitude of concepts one needs to think about when building an application with AngularJS. So far AngularJS has also worked really well for this application, so I&#8217;d say both are suitable approaches to single page web applications. For now I&#8217;m curious to know your opinion. You can find the source code on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>. A live version is available in two versions: using <strong><a href="http://birdwatch.matthiasnehlsen.com/"> ReactJS </a></strong> and using <strong><a href="http://birdwatch.matthiasnehlsen.com/angular/#/">AngularJS</a></strong>.</p>

<p>Until next time,
Matthias</p>

<p>Check out my <strong><a href="http://matthiasnehlsen.com/reviews">reviews page</a></strong> where I share my thoughts on books and gadgets.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The list of technical terms I use for the live demo under birdwatch.matthiasnehlsen.com easily fits into this cap, in which case the application will receive all these tweets. The term <strong>Obama</strong> also usually fits into this limit. The term <strong>love</strong> on the other hand doesn&rsquo;t. If you were to download BirdWatch from GitHub, create a Twitter API key and replace the list of software terms with only the word <strong>love</strong>, I bet you will reach the 1% limit any second of the day. However not to worry, Twitter will still deliver at the rate limit. When I last tried it, it was about 4 million tweets per day. Sure, you might lose tweets doing this, but there&rsquo;s not need to worry when you are looking for popular tweets as they will appear time and time again as a retweet, making it highly unlikely to miss them over time. Only the current retweet count may lag behind when the last update as a retweet was dropped.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><strong>Idempotent</strong>: This basically means that it must be possible to call something multiple times without additional side-effects, if any at all. Idempotency, for example, is also essential in scenarios where some service guarantees an at-least-once delivery. In that case you don&rsquo;t want to run into trouble (like wrongfully incrementing a counter) when that service delivers more than once.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><strong>Props</strong> in ReactJS refers to immutable data dynamically passed to a component. The component will then render itself according to the data it is fed. Functions, being first class in JavaScript, can also be passed as props. JavaScript does not actually know immutable data structures, but conceptionally we should treat any data passed to a component as immutable as it will make our component much easier to reason about. <a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ElasticSearch 1.0.0 - Breaking Changes]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/02/16/elasticsearch-v1/"/>
    <updated>2014-02-16T18:50:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/02/16/elasticsearch-v1</id>
    <content type="html"><![CDATA[<p><strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong> 1.0.0 is out, hooray! Great stuff, congrats to everyone involved. Not that I had any complaints about <strong>v0.9</strong>, but still, this is a great achievement. One of the changes is some <strong><a href="http://www.elasticsearch.org/blog/percolator-redesign-blog-post/">major rework</a></strong> of the <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-percolate.html">Percolation Query API</a></strong>, making it much more powerful than before. Unfortunately, the update broke the percolation query mechanism in the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application. But the fix wasn&#8217;t very hard. So in today&#8217;s article, I will revisit the topic of Percolation Queries by explaining what they are, how the new version has become more powerful and what was needed to fix my application. Please refer to this earlier <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">article</a></strong> if you want to know more about the overall architecture of the <strong>BirdWatch</strong> application.</p>

<!-- more -->


<p>After running <code>brew update</code> and <code>brew upgrade</code> I noticed that live query result updates in my local installation did not work any longer. Pressing <em>F5</em> did show new intermittent Tweets though, so the system did not appear completely broken. A look into the ElasticSearch changelog quickly revealed that there had been some major rework on the Percolation API. Exactly this API is used for matching new Tweets to currently established streaming connections.</p>

<h2>So what is this percolation query thing?</h2>

<p>A percolation query is a query like any other, with one difference: the query is not run against existing data but against future data, item by item as the data is inserted into an index. For that the query itself is stored in ElasticSearch and then each item (Tweet in this case) that is stored is also presented to the percolator mechanism to find the queries that have this item as a result. This resulting query ID is then used to find the streaming connection that is interested in matches to this query and stream the matched Tweet to the connected client immediately. This might sound a little abstract, so let me provide an example:</p>

<p>You are interested in Tweets that have the words <strong>Scala</strong> and <strong>Akka</strong> in them. Your query then looks like this: &#8220;scala AND akka&#8221;. Well, there is a little more to it, like which fields to use as a default, but for this example the simplification should suffice. First the query is run against existing data, for example returning the last 5000 items that match. But you are also interested in live data, not only in the past. So then the query is registered in the percolation query index, using the <strong><a href="http://de.wikipedia.org/wiki/SHA-2">SHA-256</a></strong> hash as the ID. Now when a Tweet comes along that has these words in them, it is presented to the percolator, which returns the ID of the query, potentially among others that match. This query ID is then used to find the streaming connection to your web client so that the Tweet can be streamed to you immediately.</p>

<p>Internally, ElasticSearch stores all the percolation queries in memory. It then creates a temporary index for each document that is to be matched against all the queries and then runs all these queries against that index in order to determine matching queries.</p>

<h2>Changes in ElasticSearch v1.0.0</h2>

<p>In previous versions of Elasticsearch there was a single, specialized index for percolation among cluster of nodes. The problem with that was that it did not scale particularly well. This limitation has been removed in the latest version. Instead the percolation queries can be distributed over any number of shards, all of which will then be asked to percolate a document against the stored queries. With the change, now the percolation query mechanism should scale nicely, whereas before the performance would degrade relatively soon when there was a large number of queries to run against a new document. Every query still has to run over a new document that is tested for a match, but at least that work can now be distributed over many nodes. Also there is nothing special about the percolation index any longer, it is just a regular index.</p>

<p>Let us look at an example using <strong>curl</strong>. We have three persisted queries in our index:</p>

<figure class='code'><figcaption><span>Percolation Queries </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">curl</span> <span class="s1">&#39;localhost:9200/persistent_searches/.percolator/_search?pretty=true&#39;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;took&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;timed_out&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;hits&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;max_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hits&quot;</span> <span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;38a0963a6364b09ad867aa9a66c6d009673c21e182015461da236ec361877f77&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(java) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T19:19:32.237Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;684888c0ebb17f374298b65ee2807526c066094c701bcc7ebbe1c1095f494fc1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(*) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T19:35:54.332Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;49d0feca545a82d29fffbdf6749dcf0086f9c44f6faa9b8e1e2e008b5716e488&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(akka scala) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T20:00:04.312Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I insert a tweet in English that contains the words <strong>Akka</strong> and <strong>Scala</strong>, two of these queries should match. The second query matches anything that is in English and the third more specifically matches anything with these words. Let&#8217;s see:</p>

<figure class='code'><figcaption><span>Percolation Queries </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">curl</span> <span class="s1">&#39;localhost:9200/persistent_searches/tweets/_percolate?pretty=true&#39;</span> <span class="o">-</span><span class="nx">d</span> <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">&gt;     &quot;doc&quot; : {</span>
</span><span class='line'><span class="s1">&gt;         &quot;text&quot; : &quot;blah, blah, akka blah, scala blah, blah&quot;,</span>
</span><span class='line'><span class="s1">&gt;         &quot;lang&quot; : &quot;en&quot;</span>
</span><span class='line'><span class="s1">&gt;     }</span>
</span><span class='line'><span class="s1">&gt; }&#39;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;took&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;matches&quot;</span> <span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;684888c0ebb17f374298b65ee2807526c066094c701bcc7ebbe1c1095f494fc1&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;49d0feca545a82d29fffbdf6749dcf0086f9c44f6faa9b8e1e2e008b5716e488&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Changes to the BirdWatch code</h2>

<p>The URL format has changed, I have created the <strong>persistent_searches</strong> index, into which the queries of type <strong>.percolator</strong> are inserted. We have seen these URLs in action above already.</p>

<p>As mentioned above, percolation queries are now stored in a regular index that behaves like any other (because it <strong>is</strong> a standard index). This also means that the index is dynamically created when first addressed, so we no longer need the initialization step for creating the index (using curl on the command line) before successfully running the application for the first time. That&#8217;s great as I&#8217;ve had a few users run into that problem before.</p>

<p>In previous versions of ElasticSearch, there was no result header. Instead there was only a simple array of the matched query IDs. In <strong>v1</strong>, there is now a result header, just like in regular ElasticSearch queries, and the <em>matches</em> array. This array contains one object per resulting percolation query. Each of these match objects not only contains the <em>id</em> of the matching query but also the <em>index</em> where this search was stored. In this application we do not need any of this, so we can parse only the IDs of the matching queries:</p>

<figure class='code'><figcaption><span>Twitter Client</span><a href='https://github.com/matthiasn/BirdWatch/blob/0ce1b15c27eb1ec9cbf29d9e95953cca68404cc0/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Takes JSON and matches it with percolation queries in ElasticSearch</span>
</span><span class='line'><span class="cm">  * @param json JsValue to match against </span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">matchAndPush</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;doc&quot;</span> <span class="o">-&gt;</span> <span class="n">json</span><span class="o">)).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">res</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;matches&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]].</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">matches</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">items</span> <span class="k">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">m</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">m</span> <span class="o">\</span> <span class="s">&quot;_id&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>        <span class="n">jsonTweetsChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Matches</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">HashSet</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">++</span> <span class="n">items</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, the tweet is <strong>POSTed</strong> to the <em>elasticPercolatorURL</em> inside the <em>doc</em> property of a <strong>JSON</strong> object. The result <em>res</em> is then parsed for the <em>matches</em> array as a List[Jsvalue], which is then mapped into a List[String] with the matching query IDs. Finally, a HashSet[String] is built from this list and pushed into the <em>jsonTweetsChannel</em> together with the json inside a <strong>Matches</strong> object.</p>

<p>Okay, that&#8217;s all for this article. Initially I wanted it to be about replacing <strong>AngularJS</strong> with <strong>ReactJS</strong>, but then I did not have enough time left before my vacation and after running into this problem. So that article is next, probably some time later this month.</p>

<p>Cheers,
Matthias</p>

<p>Check out my <strong><a href="http://matthiasnehlsen.com/reviews">reviews page</a></strong> where I share my thoughts on books and gadgets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala.js and ReactJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs/"/>
    <updated>2014-01-24T12:45:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs</id>
    <content type="html"><![CDATA[<p>In this article I will present a simple reactive web application using <strong><a href="http://www.scala-js.org">Scala.js</a></strong> and <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side. It is based on <strong><a href="https://github.com/matthiasn/sse-chat">sse-chat</a></strong>, an application I initially wrote for demonstrating the use of <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">AngularJS with Play Framework</a></strong>. I then rewrote the client for an article about <strong><a href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/">using ReactJS on the client side</a></strong>. In the latest version now, there is an additional client that connects to the same server and utilizes Scala.js to build the web client. I recently gave a talk about this at Ping Conference in Budapest, <strong><a href="http://m.ustream.tv/recorded/42780242">check it out</a></strong> if you&#8217;re interested. I discovered ReactJS through <strong><a href="http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/">David Nolen&#8217;s blog</a></strong> and his excellent <strong><a href="https://github.com/swannodette/om">OM library</a></strong> which combines ReactJS with <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong>. His <strong><a href="http://swannodette.github.io/2013/12/31/time-travel/">second article on Om</a></strong> also inspired me to try out an <strong>undo</strong> functionality with the immutable data structures that Scala.js has to offer. For learning more about ReactJS, I recommend going through the <strong><a href="http://facebook.github.io/react/docs/tutorial.html">tutorial</a></strong> and also reading my last <strong><a href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/">blog post</a></strong>.</p>

<!-- more -->


<h1>Why would someone want Scala on the client in the first place?</h1>

<p>Great question, I am glad you asked. A couple of things come to my mind:</p>

<ul>
<li><p>If you work with Scala on the server side, you will be familiar with its powerful collection library. You will be able to use it instead of wrapping your head around stuff like <strong><a href="http://underscorejs.org">underscore</a></strong>. Nothing wrong with underscore, it just adds to the things we have to think about when writing an application.</p></li>
<li><p>JavaScript, while being powerful in its own right, is quite different from Scala. If you are working in Scala on the backend anyways, you can avoid context switches. These inevitably occur when going back and forth between Scala and JavaScript.</p></li>
<li><p>Immutable data structures are powerful and make reasoning about an application much more straightforward. Implementing an <strong>undo</strong> functionality becomes almost trivial with this approach.</p></li>
</ul>


<p>Here is the new client in action. Note that <strong>undo</strong> will revert the application state by one step (including name changes and such). <strong>Undo all</strong> will go through all steps until the beginning of time at a fast pace.</p>

<iframe width="420" height="600" src="http://sse-chat.matthiasnehlsen.com/react-scalajs-opt" frameborder="0"></iframe>




<br />


<br />


<h1>Architectural Overview</h1>

<p>The server side has stayed the same with the different clients. All clients (AngularJS, ReactJS, ReactJS and Scala.js) co-exist in the same project on <strong><a href="https://github.com/matthiasn/sse-chat">GitHub</a></strong>. I would like to refer you to <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">this article</a></strong> if you want to learn more about the server side. From the client&#8217;s perspective, there is a <strong><a href="https://developer.mozilla.org/en-US/docs/Server-sent_events/Using_server-sent_events">Server Sent Event</a></strong> stream of messages for a particular chat room that the client subscribes to via an <strong><a href="http://www.w3.org/TR/2011/WD-eventsource-20110208/">EventSource</a></strong> object. New messages are POSTed using an <strong><a href="http://de.wikipedia.org/wiki/XMLHttpRequest">XmlHttpRequest</a></strong> object (facilitated by <strong><a href="http://jquery.com/">jQuery</a></strong>). Users can change their names, they can select the chat room and they can submit messages to the chat room they are connected to. Romeo and Juliet are having a conversation in room 1, just to make it a little more interesting to watch.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-chat-scalajs.png"></p>

<p>Application state is represented by a Scala <strong><a href="http://www.scala-lang.org/old/node/107">Case Class</a></strong>. A case class object stores the current name of the user, the name of the room and the last 4 messages. The undo functionality is modeled through a <strong>Stack</strong>. Each time information changes, a copy of the head of the stack is made and a new version of the application state with the desired change is pushed on top of the stack. Thus going back in time becomes easy: the combination of pop and peek will go back one step in time. Remember that a <strong><a href="http://en.wikibooks.org/wiki/Data_Structures/Stacks_and_Queues">Stack</a></strong> is a <strong>LIFO</strong> (last-in-first-out) data structure that typically offers <em>push</em> for putting a new item on top of a stack, <em>pop</em> for removing the top element (with potentially consuming it) and <em>peek</em> or <em>top</em> for accessing the top element without removing it. In Scala&#8217;s stack <em>peek</em> is called <em>head</em> as a more general abstract term to get the first element of a collection.</p>

<p>Application state, in its current version, is passed to ReactJS for full render every single time something changes. This may sound like a lot of overhead if React completely re-rendered the DOM every single time. Luckily, it does not need to do that. Instead it utilizes a fast <strong><a href="http://facebook.github.io/react/index.html">Virtual DOM</a></strong>. It then diffs subsequent version of this virtual DOM and only manipulates the actual browser DOM where changes have occurred. This is really fast. If you run the chat app demo above for a while (or interact with it multiple times) so that the stack contains sufficient elements (hundreds), you should see changes in the browser at a full <strong>60 frames per second</strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/undo-all-60fps.png" title="images" alt="images"></p>

<p>React&#8217;s rendering performance can still be optimized, ut it runs fine at 60 fps as it is. <strong>Tip: You want 60fps</strong> in your application all the time, otherwise the user may experience jerky and overall unpleasant scrolling if anything that happens takes longer than the time between each frame. For 60fps that means every action must be finished within 16ms, preferably faster.</p>

<h1>Source Code</h1>

<p>So without further ado, let&#8217;s have a look at how to implement the client side chat functionality. What I suggest here is probably far from ideal, but it&#8217;s a start. Please let me know about improvements you think should be made, ideally as a pull request.</p>

<p>First we will look at the main application logic:</p>

<figure class='code'><figcaption><span>Main Application</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/SseChat.scala'>SseChat.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** current version of application state modeled as immutable case class */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">AppState</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">msgs</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** Application state history modeled as stack. New versions of state get pushed onto stack.</span>
</span><span class='line'><span class="cm">   *  Previous states are available with a combination of pop and peek (called head in Scala implementation) */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stack</span> <span class="k">=</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">AppState</span><span class="o">](</span><span class="nc">InterOp</span><span class="o">.</span><span class="n">triggerReact</span><span class="o">)</span>
</span><span class='line'>  <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Utils</span><span class="o">.</span><span class="n">getInitialState</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** undo state change by popping stack and trigger rendering (which reads the head) */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undo</span><span class="o">(</span><span class="n">all</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** perform undo repeatedly until only initial element left, with interval duration between steps */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">undo</span><span class="o">()</span>
</span><span class='line'>      <span class="nc">InterOp</span><span class="o">.</span><span class="n">setTimeout</span><span class="o">(</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="o">),</span> <span class="n">interval</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** functions generating new version of state which are then pushed onto stack using updateState() */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUser</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">user</span> <span class="k">=</span> <span class="n">name</span><span class="o">))</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">msgs</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">msgs</span><span class="o">.</span><span class="n">takeRight</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">:+</span> <span class="n">msg</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoom</span><span class="o">(</span><span class="n">newRoom</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">room</span> <span class="k">=</span> <span class="n">newRoom</span><span class="o">))</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span><span class="o">,</span> <span class="nc">InterOp</span><span class="o">.</span><span class="n">addMsg</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span><span class="o">,</span> <span class="nc">InterOp</span><span class="o">.</span><span class="n">addMsg</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all, the following is happening:</p>

<ul>
<li><p>There is a case class for capturing each individual step of the application state.</p></li>
<li><p>A stack takes care of managing a history of application states. This stack is aware of changes. When such a change occurs, it will call the function specified upon initialization, in this case <em>InterOp.triggerReact</em>.</p></li>
<li><p>Undo pops the application state representation on top of the stack, causing <em>triggerReact</em> with the previous state.</p></li>
<li><p><em>UndoAll</em> steps through the entire history until application startup.</p></li>
<li><p>Setters obtain the top of the stack, copy and modify it and push the result on top of the stack (again causing a re-render).</p></li>
<li><p>Finally, in <em>main</em>  the application is initialized by starting the SSE connection.</p></li>
</ul>


<p>Next there is the <strong>InterOp</strong> file:</p>

<figure class='code'><figcaption><span>InterOp</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/InterOp.scala'>InterOp.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.scalajs.js</span>
</span><span class='line'><span class="k">import</span> <span class="nn">js.Dynamic.</span><span class="o">{</span> <span class="n">global</span> <span class="k">=&gt;</span> <span class="n">g</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">ChatMsgTrait</span> <span class="k">extends</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">text</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">user</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">time</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">room</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Scala representation of SseChatApp JavaScript object holding the JS side of the app */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">SseChatApp</span> <span class="k">extends</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">submitMessage</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">listen</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">handler</span><span class="k">:</span> <span class="kt">js.Function1</span><span class="o">[</span><span class="kt">ChatMsgTrait</span>, <span class="kt">Unit</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUserProps</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoomProps</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setMsgsProps</span><span class="o">(</span><span class="n">msgs</span><span class="k">:</span> <span class="kt">js.Array</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setStackSizeProps</span><span class="o">(</span><span class="n">stackSize</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setApp</span><span class="o">(</span><span class="n">interOp</span><span class="k">:</span> <span class="kt">InterOp.</span><span class="k">type</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** methods of this object are individually exported in startup.js (to avoid having the closure compiler rename them) */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">InterOp</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">triggerReact</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">state</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setUserProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">user</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setRoomProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setMsgsProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">msgs</span><span class="o">.</span><span class="n">toArray</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setStackSizeProps</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUser</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoom</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">setRoom</span><span class="o">(</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">submitMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="n">room</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="n">user</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">submitMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">undo</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">undo</span><span class="o">()</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setTimeout</span><span class="o">(</span><span class="n">fn</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">,</span> <span class="n">millis</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">setTimeout</span><span class="o">(</span><span class="n">fn</span><span class="o">,</span> <span class="n">millis</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go through this file step by step:</p>

<ul>
<li><p><strong>ChatMsgTrait</strong> represents an individual message.</p></li>
<li><p>The <strong>SseChatApp</strong> object represents a JavaScript object outside the Scala.js application. This makes the specified functions available from Scala.js code.</p></li>
<li><p>The <strong>InterOp</strong> object itself contains functions that are exported so that they are accessible from the outside world. We will look at the export mechanism below. As an example of such an exported function, <em>setUser</em> allows the ReactJS application to call the App.setRoom function.</p></li>
</ul>


<p>Next we have the change-aware stack implementation:</p>

<figure class='code'><figcaption><span>Stack implementation</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/ChangeAwareStack.scala'>ChangeAwareStack.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.Stack</span>
</span><span class='line'><span class="c1">// custom stack implementation based on mutable Stack for any type T</span>
</span><span class='line'><span class="c1">// takes callback function argument, which it will call on changes with the current head after the change</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Stack</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">push</span><span class="o">(</span><span class="n">elem</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">res</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">elem</span><span class="o">)</span>
</span><span class='line'>    <span class="n">onChange</span><span class="o">()</span>
</span><span class='line'>    <span class="n">res</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">pop</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">res</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span>
</span><span class='line'>    <span class="n">onChange</span><span class="o">()</span>
</span><span class='line'>    <span class="n">res</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">peek</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">head</span>  <span class="c1">// convenience method since stack implementation does not implement peek()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ChangeAwareStack</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation is straightforward:</p>

<ul>
<li><p><strong>ChangeAwareStack[T]</strong> extends <strong>scala.collection.mutable.Stack[T]</strong> and takes a function that is called when the data on the stack changes.</p></li>
<li><p><em>push</em> and <em>pop</em> are overridden, calling the function each overrides plus additionally calling the onChange functions.</p></li>
<li><p><em>peek</em> is just another name for <em>head</em>.</p></li>
<li><p>Finally a companion object allows instantiation without using <strong>new</strong>.</p></li>
</ul>


<p>Functions from the <strong>InterOp</strong> object are then exported with specified names; this happens in order to protect their respective names. Otherwise, the <strong><a href="https://developers.google.com/closure/compiler/">Google Closure Compiler</a></strong> would rename them. Without exporting the functions, they would also not be publicly accessible at all after the closure compiler optimization phase.</p>

<figure class='code'><figcaption><span>Exported Functions</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/js/startup.js'>startup.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ScalaJS</span><span class="p">.</span><span class="nx">modules</span><span class="p">.</span><span class="nx">com_matthiasnehlsen_sseChat_App</span><span class="p">().</span><span class="nx">main</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ScalaApp</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span> <span class="o">=</span> <span class="nx">ScalaJS</span><span class="p">.</span><span class="nx">modules</span><span class="p">.</span><span class="nx">com_matthiasnehlsen_sseChat_InterOp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;setUser&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">setUser__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;setRoom&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">setRoom__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;undo&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">undo__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;undoAll&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">undoAll__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;submitMsg&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">addMsg__Lcom_matthiasnehlsen_sseChat_ChatMsgTrait__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;triggerReact&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">triggerReact__V</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">[</span><span class="s1">&#39;ScalaApp&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides naming the exported functions by putting them in an object on the global scope, there is also a call to the <em>main</em> method of the Scala.js application. Personally, I am not terribly happy with putting anything at all on the global scope. Right now I have two global objects, one for the React side of things and one for the exported functions from the Scala.js application. This could quite easily be brought down to one by exporting the functions as properties of the same object used by the ReactJS application. I am just too lazy to do this right now. Please let me know if you have any ideas on how to reduce this to zero objects on the global scope.</p>

<p>Now let&#8217;s have a look at an excerpt of the ReactJS application, written in JSX. Please note that for simplicity reasons I am running the JSX to JavaScript in your browser. You don&#8217;t want to do that in a production system.</p>

<figure class='code'><figcaption><span>ReactJS application (excerpt)</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/public/js/react-app-scalajs.js'>react-app-scalajs.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** undo component*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">UndoBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleUndo</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">undo</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleUndoAll</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">undoAll</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;undo&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Undo&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleUndo</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Undo All&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleUndoAll</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span> <span class="nx">Stack</span> <span class="nx">size</span><span class="o">:</span>  <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">undoSize</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>     <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** ChatApp is the main component in this application, it holds all state, which is passed down to child components</span>
</span><span class='line'><span class="cm"> *  only as immutable props */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ChatApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">setUser</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleRoomChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">setRoom</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">UndoBox</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">}</span> <span class="nx">undoSize</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">stackSize</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">NameRoomBox</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span> <span class="nx">handleNameChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span>
</span><span class='line'>            <span class="nx">room</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">room</span><span class="p">}</span> <span class="nx">handleRoomChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleRoomChange</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">MsgList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">msgs</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">SaySomethingBox</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** render top-level ChatApp component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tlComp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">ChatApp</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="nx">ScalaApp</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;chat-app&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** pass props to top level component */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tlComp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** application ready, call initial trigger so that name and room get loaded without receiving message */</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">triggerReact</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>UndoBox</strong> is one of the application&#8217;s components, handling the undo functionality described above. All it does is assigning handlers to the buttons, in which the functions passed in as props are called.</p></li>
<li><p><strong>ChatApp</strong> is the main component of the application, it wires together the individual components and passes through the individual props.</p></li>
<li><p><strong>tlComp</strong> is the rendered top level component. In this call, we specify where to render the component and we also pass in the handler functions as props.</p></li>
<li><p><em>SseChat.setProps</em> is the function that passes props to the top level component. Once the JSX is compiled and initialized, this will replace the placeholder function inside react-interop.js.</p></li>
<li><p>At the end of the file, <em>ScalaApp.triggerReact</em> is called. This is done only to render the initial state (with a random name) independent of a message sent by the server. It just makes the initial rendering a bit smoother; otherwise it will not be needed.</p></li>
</ul>


<p>Finally, we have some JavaScript code for interoperability and communication with the server side:</p>

<figure class='code'><figcaption><span>ReactJS application (excerpt)</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/public/js/react-interop.js'>react-interop.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SseChatApp</span> <span class="o">=</span> <span class="nx">SseChatApp</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">listen</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">chatFeed</span><span class="p">;</span> <span class="c1">// holds SSE streaming connection for chat messages for current room</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// returns function that takes room as argument</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">chatFeed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="c1">// if initialized, close before starting new connection</span>
</span><span class='line'>        <span class="nx">chatFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/chatFeed/&quot;</span> <span class="o">+</span> <span class="nx">room</span><span class="p">);</span> <span class="c1">// (re-)initializes connection</span>
</span><span class='line'>        <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">handler</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">));</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// attach addMsg event handler</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** POST chat message */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">submitMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/chat&quot;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msg</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">contentType</span><span class="o">:</span> <span class="s2">&quot;application/json; charset=utf-8&quot;</span><span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** placeholder until replaced with real implementation upon compiling / initializing JSX */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * individual setProps because otherwise the closure compiler renamed function names on application state</span>
</span><span class='line'><span class="cm"> * case class object (would be more elegant with a single case class object)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setUserProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">user</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setRoomProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">room</span><span class="o">:</span> <span class="nx">room</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setMsgsProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msgs</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">msgs</span><span class="o">:</span> <span class="nx">msgs</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setStackSizeProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">stackSize</span><span class="p">)</span> <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">stackSize</span><span class="o">:</span> <span class="nx">stackSize</span> <span class="p">});</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><em>listen</em> is a function that is called for establishing a Server Sent Event connection to the server. Upon file loading, a self calling function closes over the ChatFeed variable so that it becomes accessible (and cancellable) on subsequent calls. This self-call then returns the actual function that allows establishing (and replacing) a connection to the stream for a particular room.</p></li>
<li><p><em>submitMsg</em> <strong>POST</strong>s a message to the server.</p></li>
<li><p>There are multiple functions setting props in the top level ReactJS component, such as <em>SseChatApp.setMsgsProps</em>. <em>SseChatApp.setProps</em> is a placeholder, it gets replaced once the JSX compiler has run and the ReactJS application has been loaded (see above).</p></li>
</ul>


<h1>Conclusion</h1>

<p>Scala.js is an interesting approach for client side development and certainly a technology to watch, particularly when you are working with <strong><a href="http://www.scala-lang.org/">Scala</a></strong> on the server side anyhow. It is still in the experimental phase, so I probably won&#8217;t have the Next Big Thing depend on it yet, but it may get there if there is enough interest in the community.</p>

<p><strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> is a library I already fully recommend. Working with it has been a breeze so far and it took a lot less time to get familiar with its features in comparison to <strong><a href="http://angularjs.org/">AngularJS</a></strong>. Its approach to immutable data is very natural for a functional programmer.
It is great to only have to think about components and then be able to build your application around that in the way you like it, instead of being forced to stick to a prescribed way of doing things.</p>

<p>I hope you found this useful; as always let me know what you think.</p>

<p>Until next time,
Matthias</p>

<p>Check out my <strong><a href="http://matthiasnehlsen.com/reviews">reviews page</a></strong> where I share my thoughts on books and gadgets.</p>
]]></content>
  </entry>
  
</feed>
