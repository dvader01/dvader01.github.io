<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2014-04-03T02:35:17+02:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BirdWatch: AngularJS vs. ReactJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/03/31/birdwatch-with-reactjs/"/>
    <updated>2014-03-31T22:21:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/03/31/birdwatch-with-reactjs</id>
    <content type="html"><![CDATA[<p><strong>Summary:</strong> in this article I will present a new version of the BirdWatch application that uses <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side instead of <strong><a href="http://angularjs.org">AngularJS</a></strong>. No worries if you liked the previous AngularJS version, I do not intend to replace it. Rather, I want to create another version of the client side web application in order to get a better intuition for the pros and cons of different frameworks and libraries. So think of it as something like the <strong><a href="http://todomvc.com">TodoMVC</a></strong> of reactive web applications. Well, not quite yet, but feel free to write another client version for comparison. EmberJS, anyone?
For this new version I have also rewritten the barchart as a ReactJS component with integrated trend analysis and no dependency on <strong><a href="http://d3js.org">D3.js</a></strong>. Again, there is nothing wrong with D3, I just like to try different approaches to the same problem.</p>

<!-- more -->


<p>In this article I will not go into a lot of detail about the server side of the BirdWatch application, there&#8217;s an <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">article for that</a></strong> already. What you need to know is that there is a server side application that connects to the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> and that subscribes to a defined set of terms, meaning that it will retrieve all tweets containing at least one of these terms, up to a limit of 1% of all tweets at a given time<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Then there is a client side JavaScript application that allows users to perform a live search inside a stream of tweets, with realtime updates of the UI when new matches to the search come in from Twitter. Here&#8217;s how that looks like. Click the image to try out the application:</p>

<p><a href="http://birdwatch.matthiasnehlsen.com" target="_blank"><img src="http://matthiasnehlsen.com/images/bw_reactjs.png" /></a></p>

<p>Here&#8217;s an animated architectural overview, mostly as a teaser for the previous article that describes the server side of the application in detail. Accordingly you can click it to get to that article:</p>

<p><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/" target="_blank"><img src="http://matthiasnehlsen.com/images/bw_expl_anim.gif" /></a></p>

<p>This all has been working really nicely with AngularJS for a couple of months. Now let&#8217;s see if we can build the same thing with <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side.</p>

<h2>Why might someone choose ReactJS over AngularJS</h2>

<p>In the current version of BirdWatch, AngularJS decides when to figure out if the data model changes so that it can determine when to re-render the UI. These calls can happen at any time, so these calls need to be idempotent <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. That requirement is fulfilled, any call to the crossfilter service for data is indeed itempotent, but there&#8217;s a catch: every call to get data is potentially expensive, and I&#8217;d rather avoid unnecessary calls to the <strong><a href="http://square.github.io/crossfilter/">crossfilter</a></strong> service. Instead I want to decide when the client UI is rendered by actively triggering the render process. That way I have full control when and how often the UI renderer is fed with new data.</p>

<p>As I have discussed in this <strong><a href="http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs/">recent article</a></strong>, ReactJS would also potentially be a better fit when working with immutable data. That is not a concern in the current version of BirdWatch, but it might well be in the future.</p>

<h2>Implementing the existing functionality with ReactJS</h2>

<p>There are four main areas of functionality in the application:</p>

<ul>
<li><p><strong>Search:</strong> The user can start a search by entering the terms into the search bar, which will refresh the data and establish a <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> connection to the server that will deliver matches to the search in real time. At the same time previous matches are retrieved and merged with the real time results.</p></li>
<li><p><strong>Rendering of Tweets:</strong> Different sort orders of tweets are displayed in a list of what I call tweet cards. In AngularJS, directives nicely handle the abstraction of one such tweet.</p></li>
<li><p><strong>Pagination:</strong> The application loads many more tweets than can displayed on one page (with 5000 tweets being the default). The AngularJS version implements this with a modified subset of the <strong><a href="http://angular-ui.github.io/bootstrap/">AngularUI-Bootstrap project</a></strong>.</p></li>
<li><p><strong>Charts:</strong> different visualizations are rendered on the page. At the core, D3 does this for us. In the AngularJS version, relatively thin wrappers make <strong><a href="http://docs.angularjs.org/guide/directive">directives</a></strong> out of these charts that get wired data and that re-render when the data changes.</p></li>
<li><p><strong>Bookmarkability:</strong> users can bookmark a search and come back to it later, send it to friends, tweet about it or whatever. AngularJS provides the <strong><a href="http://docs.angularjs.org/api/ng/provider/$locationProvider">$locationProvider</a></strong> for this.</p></li>
</ul>


<p>Let us go through these areas one by one.</p>

<h2>Search</h2>

<p>In this area, AngularJS and its two-way data-binding shines. There the content of the search input element is bound to a property on the <strong>$scope</strong>, just like the button is bound to a function that is also part of the <strong>$scope</strong> and that triggers a new search. ReactJS, on the other hand, does not offer two-way binding out of the box. There are helpers to achieve this, notably <strong><a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html">ReeactLink</a></strong>, but I have not tried this out. It also seems discouraged, generally. Here in this case it was fairly trivial to achieve the functionality without ReactJS at all, instead I am assigning the functionality using onclick for triggering the search function, and jQuery to achieve the same when enter is pressed inside the input field. AngularJS offers more of a full framework solution for such problems, but I am okay with this solution here.</p>

<figure class='code'><figcaption><span>Search Button</span><a href='https://github.com/matthiasn/BirdWatch/blob/603d4dfb85330e346afdf9241e36a62313eaa620/app/views/react_js.scala.html'>react_js.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;BirdWatch.search()&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The button is plain HTML with an onclick handler. As the handler function I have assigned the <em>search</em> function which lives in a property of the global BirdWatch object. In addition to the click handler for the button, I also wanted to be able to trigger a search when pressing ENTER inside the search field. jQuery is perfect for that:</p>

<figure class='code'><figcaption><span>Handling Enter in Search Field</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchForm&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally here is the function that triggers the search:</p>

<figure class='code'><figcaption><span>Function for triggering search</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">searchField</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#searchField&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">wordcount</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">activePage</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">crossfilter</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">(),</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#prev-size&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">searchField</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is plain old HTML / JavaScript / jQuery. You might think that that is such an old-fashioned way of doing it. But on the upside, no special framework knowledge is required, anyone who has done any web development in the last decade can do this without a learning curve. Alternatively, we could make a ReactJS component out of the search bar and pass this component the handler function as part of the <strong>props</strong> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. In this simple case I don&#8217;t feel like it is necessary to create a component for this, but this would be the way to go when more complex behavior is desired.</p>

<h2>Rendering of tweets</h2>

<p>This is where it gets much more interesting. AngularJS renders the list of tweets from the data model using <strong>ng-repeat</strong> like this:</p>

<figure class='code'><figcaption><span>ng-repeat in AngularJS version</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweetCard&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;tweet in cf.tweetPage(currentPage, pageSize, sortModel)&quot;</span>
</span><span class='line'>        <span class="na">data-tweet=</span><span class="s">&quot;tweet&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <em>cf.tweetPage</em> is a function delivering the data from the crossfilter object. The application code has little control over when this happens. It will certainly happen when explicitly calling <em>$scope.$apply</em> and also when anything else happens that has any effect on the data model, anywhere. This is what I meant when I said earlier that this might not be the most desirably thing when this function call is potentially expensive.</p>

<p>ReactJS works the other way around. The application instantiates a component for the list of tweets that knows how to render itself, and it will only subsequently do that when the application actively feeds it new data. Let&#8217;s look at that in more detail. In the HTML, there is only a single div without any special notation:</p>

<figure class='code'><figcaption><span>Tweet List Div in ReactJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/app/views/react_js.scala.html'>react_js.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in the component declaration, it looks as follows:</p>

<figure class='code'><figcaption><span>Tweet List Div in ReactJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/jsx/tweetlist.js'>tweetlist.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Component for conditional rendering of retweet count inside Tweet */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RetweetCount</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-right timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">numberFormat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span><span class="p">)}</span> <span class="nx">RT</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** single Tweet component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Tweet</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;tweet&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;http://www.twitter.com/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;thumbnail&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">profile_image_url</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;http://www.twitter.com/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;username&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;username_screen&quot;</span><span class="o">&gt;&amp;</span><span class="nx">nbsp</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">64</span><span class="p">;{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">screen_name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-right timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">fromNow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">created_at</span><span class="p">)}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;tweettext&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">dangerouslySetInnerHTML</span><span class="o">=</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-left timeInterval&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">numberFormat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">followers_count</span><span class="p">)}</span> <span class="nx">followers</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">RetweetCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">FavoriteCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">t</span><span class="p">.</span><span class="nx">favorite_count</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Tweet list component, renders all Tweet items (above) */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TweetList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">tweetNodes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tweet</span><span class="p">,</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Tweet</span> <span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="nx">tweet</span><span class="p">}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">idx</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;tweet-list&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">tweetNodes</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** render BirdWatch components */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tweetListComp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TweetList</span> <span class="nx">tweets</span><span class="o">=</span><span class="p">{[]}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;tweet-frame&#39;</span><span class="p">));</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tweetCount</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TweetCount</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;tweet-count&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setTweetCount</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetCount</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="nx">n</span><span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setTweetList</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tweetList</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetListComp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span><span class="nx">tweets</span><span class="o">:</span> <span class="nx">tweetList</span><span class="p">});</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <strong>TweetList</strong> component close to the bottom. This component itself has elements of the <strong>Tweet</strong> component type as child elements which it generates inside its only method <em>render</em> by mapping data in the array to individual elements. <em>Render</em>, by the way, is the only method that a ReactJS component is required to have. In this particular component, the child elements are generated by using the map function on the props.tweet, which accordingly needs to be an array, otherwise the JavaScript map function would not be available. In the mapper function, a <strong>Tweet</strong> component is created for every element of the array, and that element is passed to the Tweet component as <strong>props</strong>.</p>

<p>The Tweet component itself also has the a <em>render</em> function in which it creates a <strong>div</strong> holding the representation of a Tweet. Dynamic data for this comes from accessing the tweet object that was passed in the TweetList component. Note that the code above is not regular JavaScript but JSX, which allows writing a syntax fairly similar to HTML. This JSX is cross-compiled into JavaScript during the build process. More information on this build process can be found in the paragraph and in the <strong><a href="https://github.com/matthiasn/BirdWatch/tree/master/react-js">README</a></strong>.</p>

<p>The <strong>Tweet</strong> component then includes a <strong>RetweetCount</strong> component, to which it passes the RT count as <strong>props</strong>. This component has conditional logic in which it decides itself if it wants to return an empty <strong>div</strong> or actual content. The same goes for the <strong>FollowersCount</strong> component, which I have omitted here as it follows the same principle.</p>

<h2>Pagination</h2>

<p>Unlike in the AngularJS version, where I was relying on additional projects, I have implemented this from scratch with ReactJS. Here&#8217;s the entire component:</p>

<figure class='code'><figcaption><span>Pagination component</span><a href='https://github.com/matthiasn/BirdWatch/blob/b9dc0b4cf19ec47c893aed27a690230dc882d1f8/react-js/jsx/pagination.js'>pagination.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Pagination component, allows selecting the current page in the Tweet list */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PaginationItem</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">setActive</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">page</span><span class="p">)},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">active</span> <span class="o">?</span> <span class="s2">&quot;active&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">setActive</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="nx">a</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">page</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Pagination</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">toggleLive</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">toggleLive</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleFirst</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleLast</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">numPages</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleNext</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setNext</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handlePrevious</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPrev</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">numPages</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">numPages</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">paginationItems</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">numPages</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">PaginationItem</span> <span class="nx">page</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="p">}</span> <span class="nx">active</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">activePage</span><span class="p">}</span> <span class="nx">setPage</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setPage</span><span class="p">}</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pagination-mini&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">live</span> <span class="o">?</span> <span class="s2">&quot;active&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">toggleLive</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Live</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleFirst</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">First</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handlePrevious</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Previous</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">paginationItems</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNext</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Next</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleLast</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Last</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pagination</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Pagination</span> <span class="nx">numPages</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;pagination&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setPagination</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="nx">pagination</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">setPaginationHandlers</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">handlers</span><span class="p">)</span> <span class="p">{</span> <span class="nx">pagination</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">handlers</span><span class="p">);</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, we have two components, one for each item and one that combines the individual items. In the Pagination component, we first determine the minimum of either the number of pages (passed in as <strong>props</strong>) or 25 in order to render a maximum of 25 pages. Then we do a map on this the resulting range (with the range being created by an <strong><a href="http://underscorejs.org">underscore</a></strong> function), rendering one PaginationItem component for each of these pages. So far this is comparable to the components we have already seen above. What is new here is that the <em>handler functions</em> are also passed as <strong>props</strong> and assigned by the component. The nice thing about this is that this way we can also dynamically assign handler functions. We could just as well call functions on the global application object inside the handlers, but conceptually I find it cleaner to think about the component only ever being passed props without needing to know anything about the application it is embedded in.</p>

<h2>Bookmarkability</h2>

<p>At first I did not really know how to achieve this feature using ReactJS. I have seen examples using <strong><a href="http://backbonejs.org">Backbone</a></strong> and its <strong><a href="http://backbonetutorials.com/what-is-a-router/">router</a></strong>, which would make sense for more complex applications. One such example is <strong><a href="https://medium.com/react-tutorials/c00be0cf1592">this article</a></strong> and another one is <strong><a href="http://webdesignporto.com/react-js-with-backbone-router-and-local-storage/">this article</a></strong>. For this application, introducing Backbone seemed like overkill though, so I was looking for a simpler approach. Turns out achieving this is super simple using <strong><a href="http://jquery.com">jQuery</a></strong> and the plain old <strong><a href="http://www.w3.org/DOM/">DOM API</a></strong>. For the search function I had already created a jQuery object:</p>

<figure class='code'><figcaption><span>searchField jQuery object</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">searchField</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#searchField&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then inside the search function, I simply set the <strong>window.location.hash</strong> with a <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">URI encoded</a></strong> version of the search term:</p>

<figure class='code'><figcaption><span>setting location hash when searching</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when loading the page, I read the location hash into the search field and call <em>search()</em>, which reads the content of the search field and triggers the search with whatever is in there:</p>

<figure class='code'><figcaption><span>trigger search on page load</span><a href='https://github.com/matthiasn/BirdWatch/blob/ca0ffd54795f26bcbfdcdf5e3e61ea6d0e2d1950/react-js/src/app.js'>app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">searchField</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</span><span class='line'><span class="nx">BirdWatch</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Build system</h2>

<p>To round things off, I have configured a <strong><a href="http://gruntjs.com">grunt-based</a></strong> build system that automatically <strong><a href="http://en.wikipedia.org/wiki/Source-to-source_compiler">transpiles</a></strong> JSX into plain old JavaScript and then concatenates the files into a single JavaScript file. I have also included tasks for <strong><a href="http://www.jshint.com">JsHint</a></strong> and <strong><a href="https://github.com/es-analysis/plato">Plato code analysis</a></strong> to improve code quality. Ideally there should be additional tasks for a CSS preprocessor such as <strong><a href="http://lesscss.org">LESS</a></strong> and minification of HTML, CSS and JavaScript files to achieve the best user experience possible, most notably fast load times. Maybe I&#8217;ll get around to that at some point. I should also do the same for the AngularJS version.</p>

<h2>Building an SVG Bar Chart with ReactJS (without D3.js)</h2>

<p><strong><a href="http://d3js.org">D3.js</a></strong> is an amazing technology and really great visualizations have been built with it. However it also has a considerably steep learning curve. I personally find ReactJS easier to reason about because unlike D3.js it does not have the notion of <strong><em>update</em></strong>. Instead, we always pass it the entire data and it will put the changes in effect itself through an intelligent diffing mechanism where it compares current and previous versions of a (fast) virtual DOM and only puts the detected changes into effect in the (slow) actual DOM. Now I thought it would be nice if this concept could be applied to <strong><a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG (scalable vector graphics)</a></strong> as well and not only to HTML. Turns out the same principles apply, accordingly I have found it fairly simple to re-build the bar chart and have ReactJS instead of D3 create the SVG inside the <strong><a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a></strong>. The resulting code is much shorter than the previous D3 version, despite a lot of added functionality. The previous version was a simplistic bar chart whereas the new version has a built-in trend analysis using <strong><a href="https://github.com/Tom-Alexander/regression-js">regression-js</a></strong>, a neat little regression analysis library. In this new chart each bar is aware of its history and determines its trends using linear regression. Here&#8217;s how that looks like:</p>

<p><img src="http://matthiasnehlsen.com/images/react-barchart.png" /></p>

<p>Each bar has two associated trend indicators, one for showing recent movements in the ranking and the other for an overall trend of the word occurrence. The trends are determined using a simple linear regression, where the slope of the resulting function directly translates into an upward or downward trend. For today I don&#8217;t have the time to go into detail about the implementation of this chart, but this topic should make for an interesting article in the future.</p>

<h1>Conclusion</h1>

<p>ReactJS is a nice complement for rendering the UI of the BirdWatch application. From bird&#8217;s-eye view, it is really not more than a function that accepts data and that effects a DOM representation in line with the provided data as a side effect. It does the rendering in a very efficient way and it is low-maintenance; it does not require any more attention than the call necessary to inform it about data changes. I find its data flow model very easy to reason about, simpler in fact than the multide of concepts one needs to think about when building an application with AngularJS. AngularJS has also worked really well for this application so far though, so I&#8217;d say both are fine approaches to single page web applications. For now I&#8217;m curious about your opinion. You can find the source code on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>. A live version is available in two version: using <strong><a href="http://birdwatch.matthiasnehlsen.com/"> ReactJS </a></strong> and using <strong><a href="http://birdwatch.matthiasnehlsen.com/angular/#/">AngularJS</a></strong>.</p>

<p>Until next time,
Matthias</p>

<p>Would you like to see work-in-progress, both in terms of projects and articles? <iframe src="http://ghbtns.com/github-btn.html?user=matthiasn&type=follow&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="165" height="20"></iframe></p>

<p>By the way, this is the first article in which I make use of the footnotes feature in <strong><a href="http://octopress.org">Octopress</a></strong> that I just recently discovered. I&#8217;m curious if you find this useful or if you&#8217;d prefer explanations directly in the text.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The list of technical terms I am using for the live demo under birdwatch.matthiasnehlsen.com easily fits into this cap, in which case the application will receive all these tweets. The term <strong>Obama</strong> also usually fits into this limit. The term <strong>love</strong> on the other hand doesn&rsquo;t. If you were to download BirdWatch from GitHub, create a Twitter API key and replace the list of software terms with only the word <strong>love</strong>, I bet you will reach the 1% limit any second of the day. However not to worry, Twitter will still deliver at the rate limit, which last time I tried was about 4 million tweets per day. Sure, you might loose Tweets doing this, but not to worry when looking for popular tweets as those will appear time and time again as a retweet, making it highly unlikely to miss them over time. Only the current retweet count may lag behind when the last update as a retweet was dropped.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><strong>Idempotent</strong>: This basically means that it must be possible to call something multiple times without additional side-effects, if any at all. Idempotency is for example also essential in scenarios where some service gurantees at-least-once delivery. In that case you don&rsquo;t want to run into trouble (like wrongfully incrementing a counter) when that service delivers more than once.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><strong>Props</strong> in ReactJS refers to immutable data dynamically passed to a component. The component will then render itself according to the data it is fed. Functions, being first class in JavaScript, can also be passed as props. JavaScript does not actually know immutable data structures, but conceptionally we should treat any data passed to a component as immutable as it will make our component much easier to reason about. <a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ElasticSearch 1.0.0 - Breaking Changes]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/02/16/elasticsearch-v1/"/>
    <updated>2014-02-16T18:50:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/02/16/elasticsearch-v1</id>
    <content type="html"><![CDATA[<p><strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong> 1.0.0 is out, hooray! Great stuff, congrats to everyone involved. Not that I had any complaints about <strong>v0.9</strong>, but still, this is a great achievement. One of the changes is some <strong><a href="http://www.elasticsearch.org/blog/percolator-redesign-blog-post/">major rework</a></strong> of the <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-percolate.html">Percolation Query API</a></strong>, making it much more powerful than before. Unfortunately, the update broke the percolation query mechanism in the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application. But the fix wasn&#8217;t very hard. So in today&#8217;s article, I will revisit the topic of Percolation Queries by explaining what they are, how the new version has become more powerful and what was needed to fix my application. Please refer to this earlier <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">article</a></strong> if you want to know more about the overall architecture of the <strong>BirdWatch</strong> application.</p>

<!-- more -->


<p>After running <code>brew update</code> and <code>brew upgrade</code> I noticed that live query result updates in my local installation did not work any longer. Pressing <em>F5</em> did show new intermittent Tweets though, so the system did not appear completely broken. A look into the ElasticSearch changelog quickly revealed that there had been some major rework on the Percolation API. Exactly this API is used for matching new Tweets to currently established streaming connections.</p>

<h2>So what is this percolation query thing?</h2>

<p>A percolation query is a query like any other, with one difference: the query is not run against existing data but against future data, item by item as the data is inserted into an index. For that the query itself is stored in ElasticSearch and then each item (Tweet in this case) that is stored is also presented to the percolator mechanism to find the queries that have this item as a result. This resulting query ID is then used to find the streaming connection that is interested in matches to this query and stream the matched Tweet to the connected client immediately. This might sound a little abstract, so let me provide an example:</p>

<p>You are interested in Tweets that have the words <strong>Scala</strong> and <strong>Akka</strong> in them. Your query then looks like this: &#8220;scala AND akka&#8221;. Well, there is a little more to it, like which fields to use as a default, but for this example the simplification should suffice. First the query is run against existing data, for example returning the last 5000 items that match. But you are also interested in live data, not only in the past. So then the query is registered in the percolation query index, using the <strong><a href="http://de.wikipedia.org/wiki/SHA-2">SHA-256</a></strong> hash as the ID. Now when a Tweet comes along that has these words in them, it is presented to the percolator, which returns the ID of the query, potentially among others that match. This query ID is then used to find the streaming connection to your web client so that the Tweet can be streamed to you immediately.</p>

<p>Internally, ElasticSearch stores all the percolation queries in memory. It then creates a temporary index for each document that is to be matched against all the queries and then runs all these queries against that index in order to determine matching queries.</p>

<h2>Changes in ElasticSearch v1.0.0</h2>

<p>In previous versions of Elasticsearch there was a single, specialized index for percolation among cluster of nodes. The problem with that was that it did not scale particularly well. This limitation has been removed in the latest version. Instead the percolation queries can be distributed over any number of shards, all of which will then be asked to percolate a document against the stored queries. With the change, now the percolation query mechanism should scale nicely, whereas before the performance would degrade relatively soon when there was a large number of queries to run against a new document. Every query still has to run over a new document that is tested for a match, but at least that work can now be distributed over many nodes. Also there is nothing special about the percolation index any longer, it is just a regular index.</p>

<p>Let us look at an example using <strong>curl</strong>. We have three persisted queries in our index:</p>

<figure class='code'><figcaption><span>Percolation Queries </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">curl</span> <span class="s1">&#39;localhost:9200/persistent_searches/.percolator/_search?pretty=true&#39;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;took&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;timed_out&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;hits&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;max_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hits&quot;</span> <span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;38a0963a6364b09ad867aa9a66c6d009673c21e182015461da236ec361877f77&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(java) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T19:19:32.237Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;684888c0ebb17f374298b65ee2807526c066094c701bcc7ebbe1c1095f494fc1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(*) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T19:35:54.332Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;.percolator&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;49d0feca545a82d29fffbdf6749dcf0086f9c44f6faa9b8e1e2e008b5716e488&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;_score&quot;</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;query_string&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;default_field&quot;</span><span class="o">:</span><span class="s2">&quot;text&quot;</span><span class="p">,</span><span class="s2">&quot;default_operator&quot;</span><span class="o">:</span><span class="s2">&quot;AND&quot;</span><span class="p">,</span><span class="s2">&quot;query&quot;</span><span class="o">:</span><span class="s2">&quot;(akka scala) AND lang:en&quot;</span><span class="p">}},</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2014-02-19T20:00:04.312Z&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I insert a tweet in English that contains the words <strong>Akka</strong> and <strong>Scala</strong>, two of these queries should match. The second query matches anything that is in English and the third more specifically matches anything with these words. Let&#8217;s see:</p>

<figure class='code'><figcaption><span>Percolation Queries </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">curl</span> <span class="s1">&#39;localhost:9200/persistent_searches/tweets/_percolate?pretty=true&#39;</span> <span class="o">-</span><span class="nx">d</span> <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">&gt;     &quot;doc&quot; : {</span>
</span><span class='line'><span class="s1">&gt;         &quot;text&quot; : &quot;blah, blah, akka blah, scala blah, blah&quot;,</span>
</span><span class='line'><span class="s1">&gt;         &quot;lang&quot; : &quot;en&quot;</span>
</span><span class='line'><span class="s1">&gt;     }</span>
</span><span class='line'><span class="s1">&gt; }&#39;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;took&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;total&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;matches&quot;</span> <span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;684888c0ebb17f374298b65ee2807526c066094c701bcc7ebbe1c1095f494fc1&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;persistent_searches&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;49d0feca545a82d29fffbdf6749dcf0086f9c44f6faa9b8e1e2e008b5716e488&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Changes to the BirdWatch code</h2>

<p>The URL format has changed, I have created the <strong>persistent_searches</strong> index, into which the queries of type <strong>.percolator</strong> are inserted. We have seen these URLs in action above already.</p>

<p>As mentioned above, percolation queries are now stored in a regular index that behaves like any other (because it <strong>is</strong> a standard index). This also means that the index is dynamically created when first addressed, so we no longer need the initialization step for creating the index (using curl on the command line) before successfully running the application for the first time. That&#8217;s great as I&#8217;ve had a few users run into that problem before.</p>

<p>In previous versions of ElasticSearch, there was no result header. Instead there was only a simple array of the matched query IDs. In <strong>v1</strong>, there is now a result header, just like in regular ElasticSearch queries, and the <em>matches</em> array. This array contains one object per resulting percolation query. Each of these match objects not only contains the <em>id</em> of the matching query but also the <em>index</em> where this search was stored. In this application we do not need any of this, so we can parse only the IDs of the matching queries:</p>

<figure class='code'><figcaption><span>Twitter Client</span><a href='https://github.com/matthiasn/BirdWatch/blob/0ce1b15c27eb1ec9cbf29d9e95953cca68404cc0/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Takes JSON and matches it with percolation queries in ElasticSearch</span>
</span><span class='line'><span class="cm">  * @param json JsValue to match against </span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">def</span> <span class="n">matchAndPush</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;doc&quot;</span> <span class="o">-&gt;</span> <span class="n">json</span><span class="o">)).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">res</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;matches&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]].</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">matches</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">items</span> <span class="k">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">m</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">m</span> <span class="o">\</span> <span class="s">&quot;_id&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>        <span class="n">jsonTweetsChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Matches</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">HashSet</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">++</span> <span class="n">items</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above, the tweet is <strong>POSTed</strong> to the <em>elasticPercolatorURL</em> inside the <em>doc</em> property of a <strong>JSON</strong> object. The result <em>res</em> is then parsed for the <em>matches</em> array as a List[Jsvalue], which is then mapped into a List[String] with the matching query IDs. Finally, a HashSet[String] is built from this list and pushed into the <em>jsonTweetsChannel</em> together with the json inside a <strong>Matches</strong> object.</p>

<p>Okay, that&#8217;s all for this article. Initially I wanted it to be about replacing <strong>AngularJS</strong> with <strong>ReactJS</strong>, but then I did not have enough time left before my vacation and after running into this problem. So that article is next, probably some time later this month.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala.js and ReactJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs/"/>
    <updated>2014-01-24T12:45:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/01/24/scala-dot-js-and-reactjs</id>
    <content type="html"><![CDATA[<p>In this article I will present a simple reactive web application using <strong><a href="http://www.scala-js.org">Scala.js</a></strong> and <strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> on the client side. It is based on <strong><a href="https://github.com/matthiasn/sse-chat">sse-chat</a></strong>, an application I initially wrote for demonstrating the use of <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">AngularJS with Play Framework</a></strong>. I then rewrote the client for an article about <strong><a href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/">using ReactJS on the client side</a></strong>. In the latest version now, there is an additional client that connects to the same server and utilizes Scala.js to build the web client. I recently gave a talk about this at Ping Conference in Budapest, <strong><a href="http://m.ustream.tv/recorded/42780242">check it out</a></strong> if you&#8217;re interested. I discovered ReactJS through <strong><a href="http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/">David Nolen&#8217;s blog</a></strong> and his excellent <strong><a href="https://github.com/swannodette/om">OM library</a></strong> which combines ReactJS with <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong>. His <strong><a href="http://swannodette.github.io/2013/12/31/time-travel/">second article on Om</a></strong> also inspired me to try out an <strong>undo</strong> functionality with the immutable data structures that Scala.js has to offer. For learning more about ReactJS, I recommend going through the <strong><a href="http://facebook.github.io/react/docs/tutorial.html">tutorial</a></strong> and also reading my last <strong><a href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/">blog post</a></strong>.</p>

<!-- more -->


<h1>Why would someone want Scala on the client in the first place?</h1>

<p>Great question, I am glad you asked. A couple of things come to my mind:</p>

<ul>
<li><p>If you work with Scala on the server side, you will be familiar with its powerful collection library. You will be able to use it instead of wrapping your head around stuff like <strong><a href="http://underscorejs.org">underscore</a></strong>. Nothing wrong with underscore, it just adds to the things we have to think about when writing an application.</p></li>
<li><p>JavaScript, while being powerful in its own right, is quite different from Scala. If you are working in Scala on the backend anyways, you can avoid context switches. These inevitably occur when going back and forth between Scala and JavaScript.</p></li>
<li><p>Immutable data structures are powerful and make reasoning about an application much more straightforward. Implementing an <strong>undo</strong> functionality becomes almost trivial with this approach.</p></li>
</ul>


<p>Here is the new client in action. Note that <strong>undo</strong> will revert the application state by one step (including name changes and such). <strong>Undo all</strong> will go through all steps until the beginning of time at a fast pace.</p>

<iframe width="420" height="600" src="http://sse-chat.matthiasnehlsen.com/react-scalajs-opt" frameborder="0"></iframe>




<br />


<br />


<h1>Architectural Overview</h1>

<p>The server side has stayed the same with the different clients. All clients (AngularJS, ReactJS, ReactJS and Scala.js) co-exist in the same project on <strong><a href="https://github.com/matthiasn/sse-chat">GitHub</a></strong>. I would like to refer you to <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">this article</a></strong> if you want to learn more about the server side. From the client&#8217;s perspective, there is a <strong><a href="https://developer.mozilla.org/en-US/docs/Server-sent_events/Using_server-sent_events">Server Sent Event</a></strong> stream of messages for a particular chat room that the client subscribes to via an <strong><a href="http://www.w3.org/TR/2011/WD-eventsource-20110208/">EventSource</a></strong> object. New messages are POSTed using an <strong><a href="http://de.wikipedia.org/wiki/XMLHttpRequest">XmlHttpRequest</a></strong> object (facilitated by <strong><a href="http://jquery.com/">jQuery</a></strong>). Users can change their names, they can select the chat room and they can submit messages to the chat room they are connected to. Romeo and Juliet are having a conversation in room 1, just to make it a little more interesting to watch.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-chat-scalajs.png"></p>

<p>Application state is represented by a Scala <strong><a href="http://www.scala-lang.org/old/node/107">Case Class</a></strong>. A case class object stores the current name of the user, the name of the room and the last 4 messages. The undo functionality is modeled through a <strong>Stack</strong>. Each time information changes, a copy of the head of the stack is made and a new version of the application state with the desired change is pushed on top of the stack. Thus going back in time becomes easy: the combination of pop and peek will go back one step in time. Remember that a <strong><a href="http://en.wikibooks.org/wiki/Data_Structures/Stacks_and_Queues">Stack</a></strong> is a <strong>LIFO</strong> (last-in-first-out) data structure that typically offers <em>push</em> for putting a new item on top of a stack, <em>pop</em> for removing the top element (with potentially consuming it) and <em>peek</em> or <em>top</em> for accessing the top element without removing it. In Scala&#8217;s stack <em>peek</em> is called <em>head</em> as a more general abstract term to get the first element of a collection.</p>

<p>Application state, in its current version, is passed to ReactJS for full render every single time something changes. This may sound like a lot of overhead if React completely re-rendered the DOM every single time. Luckily, it does not need to do that. Instead it utilizes a fast <strong><a href="http://facebook.github.io/react/index.html">Virtual DOM</a></strong>. It then diffs subsequent version of this virtual DOM and only manipulates the actual browser DOM where changes have occurred. This is really fast. If you run the chat app demo above for a while (or interact with it multiple times) so that the stack contains sufficient elements (hundreds), you should see changes in the browser at a full <strong>60 frames per second</strong>.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/undo-all-60fps.png" title="images" alt="images"></p>

<p>React&#8217;s rendering performance can still be optimized, ut it runs fine at 60 fps as it is. <strong>Tip: You want 60fps</strong> in your application all the time, otherwise the user may experience jerky and overall unpleasant scrolling if anything that happens takes longer than the time between each frame. For 60fps that means every action must be finished within 16ms, preferably faster.</p>

<h1>Source Code</h1>

<p>So without further ado, let&#8217;s have a look at how to implement the client side chat functionality. What I suggest here is probably far from ideal, but it&#8217;s a start. Please let me know about improvements you think should be made, ideally as a pull request.</p>

<p>First we will look at the main application logic:</p>

<figure class='code'><figcaption><span>Main Application</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/SseChat.scala'>SseChat.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** current version of application state modeled as immutable case class */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">AppState</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">msgs</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** Application state history modeled as stack. New versions of state get pushed onto stack.</span>
</span><span class='line'><span class="cm">   *  Previous states are available with a combination of pop and peek (called head in Scala implementation) */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stack</span> <span class="k">=</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">AppState</span><span class="o">](</span><span class="nc">InterOp</span><span class="o">.</span><span class="n">triggerReact</span><span class="o">)</span>
</span><span class='line'>  <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Utils</span><span class="o">.</span><span class="n">getInitialState</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** undo state change by popping stack and trigger rendering (which reads the head) */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undo</span><span class="o">(</span><span class="n">all</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** perform undo repeatedly until only initial element left, with interval duration between steps */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">undo</span><span class="o">()</span>
</span><span class='line'>      <span class="nc">InterOp</span><span class="o">.</span><span class="n">setTimeout</span><span class="o">(</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="o">),</span> <span class="n">interval</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** functions generating new version of state which are then pushed onto stack using updateState() */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUser</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">user</span> <span class="k">=</span> <span class="n">name</span><span class="o">))</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">msgs</span> <span class="k">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">msgs</span><span class="o">.</span><span class="n">takeRight</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">:+</span> <span class="n">msg</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoom</span><span class="o">(</span><span class="n">newRoom</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">room</span> <span class="k">=</span> <span class="n">newRoom</span><span class="o">))</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span><span class="o">,</span> <span class="nc">InterOp</span><span class="o">.</span><span class="n">addMsg</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span><span class="o">,</span> <span class="nc">InterOp</span><span class="o">.</span><span class="n">addMsg</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all, the following is happening:</p>

<ul>
<li><p>There is a case class for capturing each individual step of the application state.</p></li>
<li><p>A stack takes care of managing a history of application states. This stack is aware of changes. When such a change occurs, it will call the function specified upon initialization, in this case <em>InterOp.triggerReact</em>.</p></li>
<li><p>Undo pops the application state representation on top of the stack, causing <em>triggerReact</em> with the previous state.</p></li>
<li><p><em>UndoAll</em> steps through the entire history until application startup.</p></li>
<li><p>Setters obtain the top of the stack, copy and modify it and push the result on top of the stack (again causing a re-render).</p></li>
<li><p>Finally, in <em>main</em>  the application is initialized by starting the SSE connection.</p></li>
</ul>


<p>Next there is the <strong>InterOp</strong> file:</p>

<figure class='code'><figcaption><span>InterOp</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/InterOp.scala'>InterOp.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.scalajs.js</span>
</span><span class='line'><span class="k">import</span> <span class="nn">js.Dynamic.</span><span class="o">{</span> <span class="n">global</span> <span class="k">=&gt;</span> <span class="n">g</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">ChatMsgTrait</span> <span class="k">extends</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">text</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">user</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">time</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">room</span><span class="k">:</span> <span class="kt">js.String</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Scala representation of SseChatApp JavaScript object holding the JS side of the app */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">SseChatApp</span> <span class="k">extends</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">submitMessage</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">listen</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">handler</span><span class="k">:</span> <span class="kt">js.Function1</span><span class="o">[</span><span class="kt">ChatMsgTrait</span>, <span class="kt">Unit</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUserProps</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoomProps</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setMsgsProps</span><span class="o">(</span><span class="n">msgs</span><span class="k">:</span> <span class="kt">js.Array</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setStackSizeProps</span><span class="o">(</span><span class="n">stackSize</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setApp</span><span class="o">(</span><span class="n">interOp</span><span class="k">:</span> <span class="kt">InterOp.</span><span class="k">type</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** methods of this object are individually exported in startup.js (to avoid having the closure compiler rename them) */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">InterOp</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">addMsg</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">triggerReact</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">state</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setUserProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">user</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setRoomProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setMsgsProps</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">msgs</span><span class="o">.</span><span class="n">toArray</span><span class="o">[</span><span class="kt">ChatMsgTrait</span><span class="o">])</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">setStackSizeProps</span><span class="o">(</span><span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setUser</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">setRoom</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">setRoom</span><span class="o">(</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">submitMsg</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">ChatMsgTrait</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="n">room</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">room</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="n">user</span> <span class="k">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>    <span class="nc">SseChatApp</span><span class="o">.</span><span class="n">submitMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">undo</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">undo</span><span class="o">()</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">App</span><span class="o">.</span><span class="n">undoAll</span><span class="o">(</span><span class="n">interval</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">setTimeout</span><span class="o">(</span><span class="n">fn</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">,</span> <span class="n">millis</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">setTimeout</span><span class="o">(</span><span class="n">fn</span><span class="o">,</span> <span class="n">millis</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go through this file step by step:</p>

<ul>
<li><p><strong>ChatMsgTrait</strong> represents an individual message.</p></li>
<li><p>The <strong>SseChatApp</strong> object represents a JavaScript object outside the Scala.js application. This makes the specified functions available from Scala.js code.</p></li>
<li><p>The <strong>InterOp</strong> object itself contains functions that are exported so that they are accessible from the outside world. We will look at the export mechanism below. As an example of such an exported function, <em>setUser</em> allows the ReactJS application to call the App.setRoom function.</p></li>
</ul>


<p>Next we have the change-aware stack implementation:</p>

<figure class='code'><figcaption><span>Stack implementation</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/src/main/scala/com/matthiasnehlsen/sseChat/ChangeAwareStack.scala'>ChangeAwareStack.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.matthiasnehlsen.sseChat</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.Stack</span>
</span><span class='line'><span class="c1">// custom stack implementation based on mutable Stack for any type T</span>
</span><span class='line'><span class="c1">// takes callback function argument, which it will call on changes with the current head after the change</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Stack</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">push</span><span class="o">(</span><span class="n">elem</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">res</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">elem</span><span class="o">)</span>
</span><span class='line'>    <span class="n">onChange</span><span class="o">()</span>
</span><span class='line'>    <span class="n">res</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">pop</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">res</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span>
</span><span class='line'>    <span class="n">onChange</span><span class="o">()</span>
</span><span class='line'>    <span class="n">res</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">peek</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">head</span>  <span class="c1">// convenience method since stack implementation does not implement peek()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">ChangeAwareStack</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ChangeAwareStack</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">onChange</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation is straightforward:</p>

<ul>
<li><p><strong>ChangeAwareStack[T]</strong> extends <strong>scala.collection.mutable.Stack[T]</strong> and takes a function that is called when the data on the stack changes.</p></li>
<li><p><em>push</em> and <em>pop</em> are overridden, calling the function each overrides plus additionally calling the onChange functions.</p></li>
<li><p><em>peek</em> is just another name for <em>head</em>.</p></li>
<li><p>Finally a companion object allows instantiation without using <strong>new</strong>.</p></li>
</ul>


<p>Functions from the <strong>InterOp</strong> object are then exported with specified names; this happens in order to protect their respective names. Otherwise, the <strong><a href="https://developers.google.com/closure/compiler/">Google Closure Compiler</a></strong> would rename them. Without exporting the functions, they would also not be publicly accessible at all after the closure compiler optimization phase.</p>

<figure class='code'><figcaption><span>Exported Functions</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/scala-js/js/startup.js'>startup.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ScalaJS</span><span class="p">.</span><span class="nx">modules</span><span class="p">.</span><span class="nx">com_matthiasnehlsen_sseChat_App</span><span class="p">().</span><span class="nx">main</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ScalaApp</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span> <span class="o">=</span> <span class="nx">ScalaJS</span><span class="p">.</span><span class="nx">modules</span><span class="p">.</span><span class="nx">com_matthiasnehlsen_sseChat_InterOp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;setUser&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">setUser__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;setRoom&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">setRoom__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;undo&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">undo__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;undoAll&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">undoAll__T__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;submitMsg&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">addMsg__Lcom_matthiasnehlsen_sseChat_ChatMsgTrait__V</span><span class="p">;</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">[</span><span class="s2">&quot;triggerReact&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">InterOp</span><span class="p">.</span><span class="nx">triggerReact__V</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">[</span><span class="s1">&#39;ScalaApp&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ScalaApp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides naming the exported functions by putting them in an object on the global scope, there is also a call to the <em>main</em> method of the Scala.js application. Personally, I am not terribly happy with putting anything at all on the global scope. Right now I have two global objects, one for the React side of things and one for the exported functions from the Scala.js application. This could quite easily be brought down to one by exporting the functions as properties of the same object used by the ReactJS application. I am just too lazy to do this right now. Please let me know if you have any ideas on how to reduce this to zero objects on the global scope.</p>

<p>Now let&#8217;s have a look at an excerpt of the ReactJS application, written in JSX. Please note that for simplicity reasons I am running the JSX to JavaScript in your browser. You don&#8217;t want to do that in a production system.</p>

<figure class='code'><figcaption><span>ReactJS application (excerpt)</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/public/js/react-app-scalajs.js'>react-app-scalajs.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** undo component*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">UndoBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleUndo</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">undo</span><span class="p">();</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleUndoAll</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">undoAll</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;undo&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Undo&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleUndo</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Undo All&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleUndoAll</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span> <span class="nx">Stack</span> <span class="nx">size</span><span class="o">:</span>  <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">undoSize</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>     <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** ChatApp is the main component in this application, it holds all state, which is passed down to child components</span>
</span><span class='line'><span class="cm"> *  only as immutable props */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ChatApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">setUser</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleRoomChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">.</span><span class="nx">setRoom</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">UndoBox</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">}</span> <span class="nx">undoSize</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">stackSize</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">NameRoomBox</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span> <span class="nx">handleNameChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span>
</span><span class='line'>            <span class="nx">room</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">room</span><span class="p">}</span> <span class="nx">handleRoomChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleRoomChange</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">MsgList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">msgs</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">SaySomethingBox</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">scalaApp</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** render top-level ChatApp component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tlComp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">ChatApp</span> <span class="nx">scalaApp</span><span class="o">=</span><span class="p">{</span><span class="nx">ScalaApp</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;chat-app&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** pass props to top level component */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tlComp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** application ready, call initial trigger so that name and room get loaded without receiving message */</span>
</span><span class='line'><span class="nx">ScalaApp</span><span class="p">.</span><span class="nx">triggerReact</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>UndoBox</strong> is one of the application&#8217;s components, handling the undo functionality described above. All it does is assigning handlers to the buttons, in which the functions passed in as props are called.</p></li>
<li><p><strong>ChatApp</strong> is the main component of the application, it wires together the individual components and passes through the individual props.</p></li>
<li><p><strong>tlComp</strong> is the rendered top level component. In this call, we specify where to render the component and we also pass in the handler functions as props.</p></li>
<li><p><em>SseChat.setProps</em> is the function that passes props to the top level component. Once the JSX is compiled and initialized, this will replace the placeholder function inside react-interop.js.</p></li>
<li><p>At the end of the file, <em>ScalaApp.triggerReact</em> is called. This is done only to render the initial state (with a random name) independent of a message sent by the server. It just makes the initial rendering a bit smoother; otherwise it will not be needed.</p></li>
</ul>


<p>Finally, we have some JavaScript code for interoperability and communication with the server side:</p>

<figure class='code'><figcaption><span>ReactJS application (excerpt)</span><a href='https://github.com/matthiasn/sse-chat/blob/71081d0978eed13cf1e1a896c3c69e011bcbff15/public/js/react-interop.js'>react-interop.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SseChatApp</span> <span class="o">=</span> <span class="nx">SseChatApp</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">listen</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">chatFeed</span><span class="p">;</span> <span class="c1">// holds SSE streaming connection for chat messages for current room</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// returns function that takes room as argument</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">chatFeed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="c1">// if initialized, close before starting new connection</span>
</span><span class='line'>        <span class="nx">chatFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/chatFeed/&quot;</span> <span class="o">+</span> <span class="nx">room</span><span class="p">);</span> <span class="c1">// (re-)initializes connection</span>
</span><span class='line'>        <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">handler</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">));</span>
</span><span class='line'>        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// attach addMsg event handler</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** POST chat message */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">submitMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/chat&quot;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msg</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">contentType</span><span class="o">:</span> <span class="s2">&quot;application/json; charset=utf-8&quot;</span><span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** placeholder until replaced with real implementation upon compiling / initializing JSX */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * individual setProps because otherwise the closure compiler renamed function names on application state</span>
</span><span class='line'><span class="cm"> * case class object (would be more elegant with a single case class object)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setUserProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">user</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setRoomProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">room</span><span class="o">:</span> <span class="nx">room</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setMsgsProps</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msgs</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">msgs</span><span class="o">:</span> <span class="nx">msgs</span> <span class="p">});</span> <span class="p">};</span>
</span><span class='line'><span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setStackSizeProps</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">stackSize</span><span class="p">)</span> <span class="p">{</span> <span class="nx">SseChatApp</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">stackSize</span><span class="o">:</span> <span class="nx">stackSize</span> <span class="p">});</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><em>listen</em> is a function that is called for establishing a Server Sent Event connection to the server. Upon file loading, a self calling function closes over the ChatFeed variable so that it becomes accessible (and cancellable) on subsequent calls. This self-call then returns the actual function that allows establishing (and replacing) a connection to the stream for a particular room.</p></li>
<li><p><em>submitMsg</em> <strong>POST</strong>s a message to the server.</p></li>
<li><p>There are multiple functions setting props in the top level ReactJS component, such as <em>SseChatApp.setMsgsProps</em>. <em>SseChatApp.setProps</em> is a placeholder, it gets replaced once the JSX compiler has run and the ReactJS application has been loaded (see above).</p></li>
</ul>


<h1>Conclusion</h1>

<p>Scala.js is an interesting approach for client side development and certainly a technology to watch, particularly when you are working with <strong><a href="http://www.scala-lang.org/">Scala</a></strong> on the server side anyhow. It is still in the experimental phase, so I probably won&#8217;t have the Next Big Thing depend on it yet, but it may get there if there is enough interest in the community.</p>

<p><strong><a href="http://facebook.github.io/react/">ReactJS</a></strong> is a library I already fully recommend. Working with it has been a breeze so far and it took a lot less time to get familiar with its features in comparison to <strong><a href="http://angularjs.org/">AngularJS</a></strong>. Its approach to immutable data is very natural for a functional programmer.
It is great to only have to think about components and then be able to build your application around that in the way you like it, instead of being forced to stick to a prescribed way of doing things.</p>

<p>I hope you found this useful; as always let me know what you think.</p>

<p>Until next time,
Matthias</p>

<p><em>Want to be informed about new articles => <strong><a href="#signup">newsletter</a></strong>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Framework and Facebook's React library]]></title>
    <link href="http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library/"/>
    <updated>2014-01-05T23:30:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2014/01/05/play-framework-and-facebooks-react-library</id>
    <content type="html"><![CDATA[<p>Over the holidays I discovered Facebook&#8217;s <strong><a href="http://facebook.github.io/react">React</a></strong>, an interesting library for generating reactive user interfaces. I wanted to try it out in a real-world application, and I thought of one such application I still had running as a demo: <strong><a href="https://github.com/matthiasn/sse-chat">sse-chat</a></strong>, a little chat application I wrote last summer to learn how to make <strong><a href="http://www.playframework.com/">Play Framework</a></strong> and <strong><a href="http://angularjs.org/">AngularJS</a></strong> cooperate in a very basic way. So I thought, why not rewrite the client side using <strong><a href="http://facebook.github.io/react">React</a></strong>, offering the exact same functionality as the <strong><a href="http://angularjs.org/">AngularJS</a></strong> version. Both are also available in the new version with no changes to the backend code except for the added route, as both versions can be accessed in parallel.</p>

<!-- more -->


<p>The constraint of making it behave exactly like the AngularJS version was a great practice and it actually only took me an afternoon to complete. Touching the existing demo version also had me notice that the live version of it had been up for like 4 months or so, without any trouble. I have the same experience with my <strong><a href="http://birdwatch.matthiasnehlsen.com/#/">BirdWatch</a></strong> application. Kudos to the Play Framework and Akka developers for enabling such reliable server systems.</p>

<p>Here&#8217;s the new version using <strong>React</strong> instead of <strong>AngularJS</strong>:</p>

<iframe width="420" height="475" src="http://sse-chat.matthiasnehlsen.com/react" frameborder="0"></iframe>


<p>You can open the AngularJS version of the demo inside the <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">article from last summer</a></strong> in another browser and communicate between the two, they share the same backend. Romeo and Juliet are having a chat in room 1, but hey, why not. Better than you just chatting with yourself. You can learn more about the server side in the previous article. In this article we will look exclusively at the web client. Here&#8217;s an overview of the architecture with React:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/react-sse-chat.png" title="image" alt="images"></p>

<p>So what is different with the <strong>React</strong> library? It offers a <strong>declarative</strong> approach just like AngularJS, but it is subtantially different in many quite interesting ways:</p>

<ul>
<li><strong>Components</strong> are the basic building blocks, they encapsulate markup and logic together in one place.</li>
<li>Components receive <strong>immutable</strong> data (called <strong>props</strong>) from parent elements.</li>
<li>Components can have state if necessary.</li>
<li>React <strong>prefers immutable</strong> props over mutable state wherever possible, making state changes much easier to reason about.</li>
<li>Each component knows how to <strong>render itself</strong>.</li>
<li>Components can have other components as children. They can pass their own state or props to these as immutable props.</li>
<li>The entire DOM is rendered into a (fast) <strong>virtual DOM</strong> with every change made. Changes can either come from mutated state or from parent elements as immutable props.</li>
<li>This virtual DOM is then <strong>diffed</strong> against a representation of the current DOM, with the actual DOM only being manipulated where new and old versions differ.</li>
<li>Data coming from business logic outside will not be touched; React can work with <strong>immutable data</strong> thoughout.</li>
<li>Hierarchical components, props, state, handlers. That&#8217;s pretty much it, no more rather unintuitive concepts to understand.</li>
</ul>


<h2>How is it different from AngularJS?</h2>

<p>What I find most intriguing here is how React can work with immutable data. AngularJS, on the other hand needs to modify data that is used in <strong>$scope</strong> in order to keep track of changes.</p>

<p>I tried to use AngularJS with <strong><a href="https://github.com/clojure/clojurescript">ClojureScript</a></strong> a few months back and I ran into a problem with <strong><a href="http://stackoverflow.com/questions/19863873/angularjs-infinite-digest-loop-when-no-scope-changes">infinite digest loops (StackOverflow)</a></strong>, something I quite honestly didn&#8217;t want to know about. So the problem seemed to be, and please correct me if I&#8217;m wrong, that ClojureScript was handing a shiny new data structure to AngularJS over and over again in order to guarantee immutability internally, just like Underscore generated a new data structure on every call to filter (see the StackOverflow discussion cited above). Angular needs to modify data in order to keep track of updates though, resulting in an infinite cycle that it fortunately is clever enough to stop after a few iterations. Let&#8217;s have a quick look at what Angular does with data. It needs to mark individual elements in a collection with a <strong>hashKey</strong> property in order to keep track of their changes:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/ng-hash-key.png" title="image" alt="images"></p>

<p>Now that&#8217;s a problem when the data is considered immutable. I assume ClojureScript delivered fresh JavaScript objects from the ClojureScript data structures at the edge of the application where I called a function from Angular, with the result being that on subsequent calls the hashKey was always missing, making Angular upset. Let&#8217;s emulate this behavior by getting the data for the ng-repeat from a function call that is guaranteed to deliver an array consisting of shiny new objects on every call:</p>

<figure class='code'><figcaption><span>Causing an Infinite Digest Loop in Angular</span><a href='https://github.com/matthiasn/sse-chat/blob/e0b55172eede0f265cedf03cde46ae6b39639e82/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">msgs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">msgs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msgs</span><span class="p">)),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we also need to change the index.html to have the ng-repeat get the data from a function call, but just follow the link in the code block above to see the full source code for the branch I have created. With these changes in place, every subsequent call to the <strong><em>msgs</em></strong> function will be an array with newly generated objects, causing the following error on every single change to the application state, each of which triggers the digest cycle:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/ng-digest.png" title="image" alt="images"></p>

<p>Note that the error output in the browser console is 23KB in size, even when using the minified production version of Angular, so I can only assume this is real problem.</p>

<p>Now in my daytime job I mostly write Scala code and I really like the peace of mind that immutability can give us, so I&#8217;d rather not have to depend on letting the UI part of the web application modify the data model just to keep track of changes. I want to further explore immutability in the browser, for example by using ClojureScript or the younger <strong><a href="http://www.scala-js.org/">Scala.js</a></strong>, which also allows working with immutable data structures. I have only played around a little bit with the latter, but it certainly is an interesting approach.</p>

<p>A nice example of working with immutable data (from ClojureScript) and React is David Nolen&#8217;s great <strong><a href="https://github.com/swannodette/om">Om library</a></strong>. Immutability allows for amazing features like a simple undo functionality, even saving the entire history of state mutation during the lifecycle of the application. It shouldn&#8217;t be too difficult to achieve the same in Scala.js, for example by modelling the application state as an immutable data structure and then pushing each version into an array that is then used as a stack. Pop the last state and render what you can peek at, undo done. Conceptually this is really simple to think about iff (if and only if) your UI rendering code requires no state of its own and simply renders an immutable data structure, which React is capable of.</p>

<h2>Source code time</h2>

<p>Let&#8217;s now have a look at the actual source code of the new React based client written in JavaScript and <strong><a href="http://facebook.github.io/react/docs/jsx-in-depth.html">JSX</a></strong>. JSX is a JavaScript XML syntax, which is transformed into plain old JavaScript using a preprocessor. It makes writing DOM elements simpler, however there is no need to use it; instead we can write a React application in (somewhat clunkier) JavaScript code directly instead. It is recommended to do the conversion on the server side, for example in a grunt task, but there is a client-side script for development as well. I chose to ignore the recommendation in this demo for simplicity; your browser will handle the conversion just fine. However for a commercial product I would certainly follow the recommendation to make the client side loading experience as smooth as possible.</p>

<p>The HTML for our app becomes very simple. In this application it is called react.scala.html, but that&#8217;s really only because it made the hookup to a route easier, otherwise there is no good reason to use a play/scala template here:</p>

<figure class='code'><figcaption><span>react.scala.html</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/app/views/react.scala.html'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;chat-app&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//fb.me/react-0.8.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//fb.me/JSXTransformer-0.8.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/jsx&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/js/react-app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we do above is provide a DOM element hosting the application markup plus loading the necessary scripts. All the interesting stuff happens inside <strong>react.app.js</strong>, which is loaded last. Let us go through, component by component, starting from the top of the hierarchy with the <strong>ChatApp</strong> component:</p>

<figure class='code'><figcaption><span>ChatApp component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** randomly generate initial user name */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">initialName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Jane Doe #&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** ChatApp is the main component in this application, it holds all state, which is passed down to child components</span>
</span><span class='line'><span class="cm"> *  only as immutable props */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ChatApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">room</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">initialName</span><span class="p">()</span> <span class="p">};</span>  <span class="c1">// creates initial application state</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">componentWillMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">room</span><span class="p">);</span>  <span class="c1">// called on initial render of the application</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleNameChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>  <span class="c1">// update name state with new value in text box</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleRoomChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">room</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>  <span class="c1">// update room state with the newly selected value</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>  <span class="c1">// re-initialize SSE stream with new room</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">addMsg</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">));</span>  <span class="c1">// push message into state.data array</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">data</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="mi">4</span><span class="p">)});</span>  <span class="c1">// replace state.data with up to last 5 entries</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">listen</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">chatFeed</span><span class="p">;</span>            <span class="c1">// holds SSE streaming connection for chat messages for current room</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">room</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">// returns function that takes room as argument</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">chatFeed</span><span class="p">)</span> <span class="p">{</span> <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span> <span class="p">}</span>    <span class="c1">// if initialized, close before starting new connection</span>
</span><span class='line'>            <span class="nx">chatFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/chatFeed/room&quot;</span> <span class="o">+</span> <span class="nx">room</span><span class="p">);</span>       <span class="c1">// (re-)initializes connection</span>
</span><span class='line'>            <span class="nx">chatFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addMsg</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>  <span class="c1">// attach addMsg event handler</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}(),</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">NameRoomBox</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">handleNameChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span>
</span><span class='line'>                <span class="nx">handleRoomChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleRoomChange</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">MsgList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">SaySomethingBox</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="nx">room</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">room</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this simple example, the ChatApp component is where most of the application logic lives in. I would probably prefer if it lived somewhere completely outside of React in more complex applications, for example in ClojureScript or Scala.js code, or in well-organized JavaScript code using underscore. Then not even the top element of the React application would need to have state at all. But in this simple example it should suffice to keep everything together in the top-level React component. So what goes on in said component?</p>

<ul>
<li>Inside the <strong><em>getInitialState function</em></strong>, the <strong>initial state</strong> is provided.</li>
<li>The <strong><em>listen</em></strong> function initiates the SSE connection for the current chat room, potentially closing an already established connection. It is organized as an enclosing function that is immediately called upon initialization of the component. That initial call sets up a chatFeed var and returns another function that henceforth lives inside the <strong><em>listen</em></strong> property of the component. This function can then be called when an open connection to the SSE stream for the current room is desired.</li>
<li>The <strong><em>addMsg</em></strong> function mutates component state by calling <strong>this.setState</strong>.</li>
<li>The <strong><em>handleRoomChange</em></strong> and <strong>handleNameChange</strong> functions modify <strong>room</strong> and <strong>name</strong> state. <strong><em>handleRoomChange</em></strong> also calls listen again to re-establish the SSE stream for the new room.</li>
<li>The <strong><em>componentWillMount</em></strong> function establishes the SSE connection by calling <strong><em>listen(room)</em></strong>, once, upon initialization of the component.</li>
</ul>


<p>Next let&#8217;s look at the first child component of the single <strong>ChatApp</strong> component.</p>

<figure class='code'><figcaption><span>NameRoomBox component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** name and room selection component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NameRoomBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">roomOpts</span><span class="o">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">option</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">room</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Room</span> <span class="p">{</span><span class="nx">room</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/option&gt; }),</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="nx">Your</span> <span class="nx">Name</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;user&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;userField&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class='line'>                <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">select</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;roomSelect&quot;</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">handleRoomChange</span><span class="p">}</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">room</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">roomOpts</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/select&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <strong>NameRoomBox</strong> component, only two things actually happen:</p>

<ul>
<li>The <strong>roomOpts</strong> property is initialized with a list of all 5 room <option> elements. The JSX transpiler thankfully does this for us.</li>
<li>The <strong><em>render</em></strong> function returns a <code>&lt;div&gt;</code> with an <code>&lt;input&gt;</code> for the name and a <code>&lt;select&gt;</code> for the room inside, using the <code>&lt;option&gt;</code>elements created in the first step. It also attaches the handler functions provided inside <strong>props</strong> to respond to user input.</li>
</ul>


<p>The next component inside <strong>ChatApp</strong> is the <strong>MsgList</strong> component:</p>

<figure class='code'><figcaption><span>MsgList component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** chat messages list component, renders all ChatMsg items (above) */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MsgList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">msgNodes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">ChatMsg</span> <span class="nx">user</span><span class="o">=</span><span class="p">{</span><span class="nx">msg</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span> <span class="nx">time</span><span class="o">=</span><span class="p">{</span><span class="nx">msg</span><span class="p">.</span><span class="nx">time</span><span class="p">}</span> <span class="nx">text</span><span class="o">=</span><span class="p">{</span><span class="nx">msg</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;chat&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">msgNodes</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>MsgList</strong> component only has one function: <strong><em>render</em></strong>, which takes the array of messages provided as props and maps it into individual <strong>ChatMsg</strong> components, which we will look at next:</p>

<figure class='code'><figcaption><span>ChatMsg component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** single chat message component */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ChatMsg</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;msg &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span> <span class="o">===</span> <span class="s2">&quot;Juliet&quot;</span> <span class="o">?</span> <span class="s2">&quot;juliet&quot;</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span> <span class="o">?</span> <span class="s2">&quot;others&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)}</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">time</span><span class="p">}</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">user</span><span class="p">}</span> <span class="nx">says</span><span class="o">:</span> <span class="o">&lt;</span><span class="err">/strong&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>ChatMsg</strong> component above only knows how to render itself. Depending on the name of the user sending a message, it is rendered in different colors by assigning the element different CSS classes. Now the last component to look at is the <strong>SaySomethingBox</strong>:</p>

<figure class='code'><figcaption><span>SaySomethingBox component</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** chat message input component*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SaySomethingBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handleSubmit</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span> <span class="nx">user</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">time</span><span class="o">:</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toUTCString</span><span class="p">(),</span> <span class="nx">room</span><span class="o">:</span> <span class="s2">&quot;room&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">room</span> <span class="p">};</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/chat&quot;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">msg</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">contentType</span><span class="o">:</span><span class="s2">&quot;application/json; charset=utf-8&quot;</span><span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span><span class="s2">&quot;json&quot;</span><span class="p">});</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">().</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="c1">// empty text field</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;textField&quot;</span> <span class="nx">ref</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;Say something&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;input-block-level&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn btn-primary&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Submit&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>     <span class="p">);}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <strong>SaySomethingBox</strong> component, two things happen:
+ The <strong><em>render</em></strong> function renders the UI and attaches the <strong><em>handleSubmit</em></strong> function to the events fired by either submitting the form by pressing enter inside the <code>&lt;input&gt;</code> element or clicking the submit button.
+ The <strong><em>handleSubmit</em></strong> function POSTs the text in the <code>&lt;input&gt;</code> field to the server using jQuery&#8217;s <code>$.ajax</code> function. It uses the <strong>name</strong> and <strong>room</strong> from <strong>props</strong> to construct the JSON message. The message POSTing logic could just as well live inside the top level component, maybe it should, but I don&#8217;t feel like changing it right now.</p>

<p>That&#8217;s pretty much it, with one last function call to get the whole application started:</p>

<figure class='code'><figcaption><span>React.renderComponent</span><a href='https://github.com/matthiasn/sse-chat/blob/6ee4f3de7076c2a9ac39ab75f62d95062df04ede/public/js/react-app.js'>react-app.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** render top-level ChatApp component */</span>
</span><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">ChatApp</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;chat-app&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p><strong><a href="http://facebook.github.io/react">React</a></strong> offers an intriguing way of rendering potentially immutable data into a virtual DOM with every single change of the data. This virtual DOM will then be diffed against the current DOM (or, more likely, the previous version of the virtual DOM, but just guessing there) and then only the changes are performed on the real DOM, limiting the supposedly slow DOM manipulations to an absolute minimum. I have yet to convince myself about this, but reportedly this whole process is very fast, allowing for 60 FPS even in a mobile WebView, with JavaScript performaning a lot worse than in &#8220;real&#8221; browsers such as Mobile Safari, Mobile Chrome and any recent Desktop browser. React is also conceptually very simple; there are not a lot of things to understand. However I do feel that I need to develop better ideas on how to structure a larger application.</p>

<p>So far all this may sound like a lot of praise for React, but let me emphasize where <strong>AngularJS</strong> really has the edge at this point:</p>

<ul>
<li>Workable best practices for organizing large applications.</li>
<li>Many more online resources. I don&#8217;t feel much love for Angular&#8217;s own documentation, but at least there are plenty of great tutorials and blog articles about it out there.</li>
<li>Reasonably mature support for automated building and testing.</li>
</ul>


<p>So, will I continue using AngularJS? <strong>Yes</strong>. Am I curious about doing more with React? <strong>Another yes</strong>. I need a larger project in order to experience React in a more complex setting. Oh, there&#8217;s one project that comes to mind, but that&#8217;s a story for another day. Before I forget: you can find the source code for the application on <strong><a href="https://github.com/matthiasn/sse-chat">GitHub</a></strong>.</p>

<p>Cheers,
Matthias</p>

<p><em>You should follow me on Twitter <a href="https://twitter.com/matthiasnehlsen" target="_blank">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year's Resolution]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/12/31/new-years-resolution/"/>
    <updated>2013-12-31T19:40:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/12/31/new-years-resolution</id>
    <content type="html"><![CDATA[<p>I never really thought much of New Year’s resolutions because I could never live up to them. 2013 was different though. One year ago my resolution was to start writing a blog and to create one or more open source projects, just for the fun of it. And this time I actually succeeded. So I thought I might continue with this resolution thing.</p>

<!-- more -->


<p>2013 has been pretty good for me, for the most part at least, except for the fact that my beloved bike was stolen from inside the apartment building two days ago, thanks to modern battery technology allowing for cordless angle grinders. But I am digressing. Usually I am a fan of powerful batteries. In terms of learning more about software, it has been great. I have started writing this blog and I have created my first ever open source project, <strong><a href="http://birdwatch.matthiasnehlsen.com/">BirdWatch</a></strong>, and it has been cool to build it and improve it. Along the way it has also been great to learn more about <strong><a href="http://www.scala-lang.org">Scala</a></strong>, <strong><a href="http://www.playframework.com">Play Framework</a></strong>, <strong><a href="http://angularjs.org">AngularJS</a></strong> and JavaScript in general.</p>

<p>I have also written a few articles that I really like. Not all of them, of course, but there are a few. I find this particularly rewarding to watch after a good friend of mine, a journalist and professional writer, had set somewhat different expectations. I asked him early on how long it had taken him until he was completely satisfied with his output on a regular basis, like looking at an article the next day and not wanting to rewrite it for the umpteenth time. He said that it had taken him about seven years of writing professionally, full time. So I can either consider myself lucky that I am happy with a decent share of the articles, or maybe I just have low standards, or both.</p>

<p>I also recently started working on an AngularJS based blogging engine, which I have not published yet. It offers live preview and animated code blocks, among other things. It is pretty much production ready, I find, I am just lacking the time to actually bring it to the point that I want to see it published. Or maybe I should just embrace the imperfection and publish it as is. Maybe there is someone who already finds it useful and wants to put some effort in it. One should be embarrassed of one&#8217;s first release anyways, right?</p>

<p>Recently I started asking myself if working on a blogging engine may be some elaborate procrastination strategy on my part, in order to have an excuse to not actually write. Octopress works reasonably well, after all. On the other hand, I do not really like the authoring process all that much, particularly when it comes to embedding source code, which I find quite unsatisfying.</p>

<p>I also finally started working on a book about three months ago, after having been approached by editors a few times who had read one or more of the articles that I also like. I will talk more about the content of the book in due course. Writing a book is an interesting endeavor and quite different from writing a blog.</p>

<p>So what do I want to do differently in 2014 when it comes to the blog, book writing and authoring fun, open source toy projects?</p>

<ul>
<li><p>More frequent blog posts. I would like to publish stuff more often, even if that means shorter articles. I bet some readers will be happy with that; I know that my articles so far have not exactly been short. I am aiming for two fixed publications per month, maybe around the 5th and the 20th of each month, give or take. I am aware that this puts additional pressure on me, but I think it will be better to get into a good rhythm there.</p></li>
<li><p>Morning pages. I have been introduced to this concept by the <strong><a href="http://pragprog.com/book/ahptl/pragmatic-thinking-and-learning">Pragmatic Programmer</a></strong> series and I have found it to be great to do an unfiltered first-thing-in-the-morning brain dump. I just don’t do it regularly enough yet. One point where I don’t agree with the concept as introduced in the book is that it needs to be on paper, not on screen. I find that restriction to be somewhat pointless because it ends up with me not ever looking at the output again. And I find that typing does not keep me from getting whatever idea out of my brain, into a form that is full-text searchable.</p></li>
<li><p>Quite the contrary, I want the thoughts I write down not only to be searchable but also be tagged by both subject and people. That way I feel I could bundle thoughts better, particularly about ideas that are not concrete enough yet to have found their way into a to-do list. I would like to write a tool for doing so, maybe with an AngularJS frontend and backed by ElasticSearch. Could be another project on github, this time something I am actually using on a daily basis. But then again, this may just be one of these procrastination strategies. Time will tell.</p></li>
<li><p>I want to check my own github profile less often. It is really cool to watch your projects receiving stars from other developers who find something useful or otherwise cool. But it can become quite addictive to check the github app on my smartphone to see if anything has changed, in particular when something has changed only recently. So less of that. Once a day or so is plenty.</p></li>
<li><p>I need to become better at leaving work at work. As interesting as the engineering problems there might be, I should not think about them at all outside of work. I have plenty of other areas I want to focus on, like this blog, the book or one of my next toy projects.</p></li>
<li><p>I need to make more time for physical exercise. I really perform better in all areas and I feel better when I have worked out three or four times per week. So I need to get back into that habit.</p></li>
<li><p>I want to do more in <strong><a href="http://clojure.org">Clojure</a></strong>. I have spent some time with the language and it resonates really well with the way I am thinking.</p></li>
<li><p>I want to <strong><a href="http://learnyouahaskell.com">learn me a Haskell for great good</a></strong>, just for the fun of it.</p></li>
</ul>


<p>Well, this is it for now. Let’s see how many of these I can actually put into practice. So many interesting things to explore, so little time.</p>

<p>Have a great 2014, everyone.</p>

<p>Cheers,
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Template with Live Reload and 100/100 PageSpeed]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/11/23/live-page-reload-on-any-device/"/>
    <updated>2013-11-23T18:36:00+01:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/11/23/live-page-reload-on-any-device</id>
    <content type="html"><![CDATA[<p>A few weeks ago I started working on the follow-up to my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> project. This new project is another single page application based on <strong><a href="http://angularjs.org">AngularJS</a></strong>, but that is not part of the story I am going to tell you today at all. Instead, today I will talk about <strong>speed</strong>. As in, how long does it take for a web page to load, on a mobile device? I was doing some research by opening different websites under suboptimal conditions, such as 3G with only two to three bars, or even worse the dreaded <strong>E</strong> with four to five bars. Not terribly difficult to simulate, I only need to disable the Wifi and walk into different corners of my apartment for that. Opening my own blog made me sad: with the bad 3G connection it took like <strong>10 seconds</strong> for the index page to show anything at all. No way I would ever wait that long for any page to load. And I would quite likely not even try again. So I went on a quest to make this better. The result is of course on <strong><a href="https://github.com/matthiasn/live-html5">GitHub</a></strong>.</p>

<!-- more -->


<p>So what happens when the browser loads a page? First a DNS lookup takes place, translating the human-readable domain name into an IP address. Then that domain is contacted using an HTTP GET request for the particular URL. If no specific file is given in the request, a server will usually try to return a file named <strong>index.html</strong> inside the folder that maps to the request URL. This <strong>index.html</strong> then typically contains multiple links to stylesheets and scripts, all of which trigger the same cascade (minus the DNS lookup if subsequent requests point to the same domain). Many of the resources are blocking; the page will only display after they are loaded.</p>

<p>We can examine the request behavior by looking at a timeline chart, like this one for the index page of this blog:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/gtmetrix-blog.png" title="image" alt="gtmetrix result for matthiasnehlsen.com"></p>

<p>You will notice that the <strong>DOM loaded</strong> event fired after more than an entire second (the blue line), or a little less than 200ms after the blocking screen.css has finished loading.</p>

<p>I have used <strong><a href="http://gtmetrix.com">GTmetrix</a></strong> for generating the charts. The numbers are comparable to what I can measure in Chrome Developer Tools, with a decent DSL subscription. So presumably they are much better than what a suboptimal mobile connection would yield.</p>

<p>Now pre-LTE mobile networks have much longer network round-trip times than copper or fiber-based tethered networks, even under ideal conditions. And things of course do not degrade gracefully when the signal deteriorates.</p>

<p>I wanted to know how much worse network round-trip times actually are on mobile networks, so I measured a <strong><a href="http://en.wikipedia.org/wiki/Ping_(networking_utility)">ping</a></strong> to the domain of this blog with a free iPhone app called <strong><a href="https://itunes.apple.com/us/app/network-ping-lite/id289967115">Ping Lite</a></strong>.</p>

<p>As a baseline measurement, I did the ping over Wi-Fi + DSL and got around 55ms on average:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/iphone_ping_wlan.png" title="image" alt="iPhone ping wifi"></p>

<p>Interestingly this is about 25ms slower than what I got with the command line ping on my Mac on the same network. I have no idea where this delay comes from, could be something in iOS or in the Ping Lite app. But it doesn&#8217;t really matter; a 25ms delay is not near as noticeable as the delay introduced by switching to a mobile network. Using 3G under ideal conditions (five bars) I consistently got a little less than 500ms:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/iphone_ping_3g.png" title="image" alt="iPhone ping 3G"></p>

<p>That is much worse than the Wi-Fi connection indeed, particularly when multiple files need to be loaded; then these times really add up. Not a big surprise that the Edge connection is even worse, particularly in terms of consistency:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/iphone_ping_edge.png" title="image" alt="iPhone ping EDGE"></p>

<p>Thinking about the timeline, it is not hard to imagine what influence the higher round-trip times will have on the <strong>DOM loaded</strong> event when potentially multiple blocking requests have to be completed before the browser renders the page.</p>

<p>So what can be improved here? Three things came to my mind:</p>

<ul>
<li>Loading external stylesheets takes additional round trips. These are blocking and the page will only render when all the requests are completed. Stylesheets could in theory be loaded asynchronously, but a flash of unstyled content (FOUC) would then occur. Frankly, I&#8217;d rather not have the page load at all than subjecting anyone to that. But why not <strong>inline</strong> all of the CSS in the index.html file in the first place?</li>
<li>No compression was used so far; that alone should cut down the time until <strong>DOM loaded</strong> by substantially shortening the gray portion of the timeline bars.</li>
<li>The CSS seems fairly <strong>large</strong>; there is no way that 37.8KB of styling are necessary for what is rendered on the page. Add up the computed styles of every single element of the page and you will end up with a few Kilobytes at most. Everything else is dead weight.</li>
</ul>


<p>So I decided to try inlining custom CSS in the HTML file and then compressing the file using gzip. I was also interested in the fairly new CSS3 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes">Flexbox Layout</a></strong>, so I decided to write the CSS based on flexbox by hand instead of using <strong><a href="http://getbootstrap.com">Bootstrap</a></strong>. That way I should be able to avoid loading tens of unnecessary stylesheet Kilobytes. You can find out more about flexbox in this great <strong><a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/">tutorial</a></strong>. Note that everything presented in this article would work equally well with <strong><a href="http://getbootstrap.com">Twitter Bootstrap</a></strong>, particularly when you work with the <strong><a href="https://github.com/twbs/bootstrap">Bootstrap LESS source</a>, and honestly there is no reason not to. LESS is a delight, I fand that it makes CSS more approachable from a developers perspective. LESS also makes it easy to only include the Bootstrap parts that are used on the page, making the download much smaller. On the other hand, the distribution version of a popular version from a </strong>CDN** (content delivery network) has the advantage that it will quite likely come from the browser cache, considering how ubiquously Bootstrap is used these days. It seems to be a good idea to avoid delivering the distribution version from your own server, particularly when uncompressed and not minified. Waiting for those extra almost 100 Kilobytes will drive visitors away.</p>

<p>At the end, I find either option viable. What I want to avoid isI would just like to bri</p>

<p> But if I decide to deliver the CSS myself, it should be as concise as possible.</p>

<p>I set up a build system based on <strong><a href="http://gruntjs.com">grunt</a></strong> and started trying out flexbox. It turned out that my frustration tolerance for reloading the page on my mobile devices was so low that I shortly thereafter found myself working on a live <strong>CSS reload</strong> feature. After covering <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> more than once on this blog, I thought I might as well utilize SSE for notifying the browser about file system changes. Detecting file system changes is a solved problem, so all it took was transmitting the events to the browser and have a script on the client side initiate a page reload / refresh. To my surprise, SSE support has only <strong><a href="http://caniuse.com/eventsource">recently come to Android</a></strong>, requiring either the KitKat built-in browser, or Chrome for Android version 30. Things worked well with Chrome 30 on Jelly Bean and with mobile Safari on iOS 6 and 7. I cannot say anything about older versions or other browsers. Please report if things fail in your browser, or better submit a fix.</p>

<p>For the CSS authoring I have chosen <strong><a href="http://lesscss.org">LESS</a></strong> because it makes the whole CSS authoring process a lot smoother. LESS mixins really help in getting rid of a lot of repetition. During the authoring of the page I am using browser-side LESS>>CSS compilation using <strong><a href="http://lesscss.org">less.js</a></strong>. That turned out to be an excellent choice. I stumbled upon the <strong>less.refresh()</strong> function, which has the awesome feature of refreshing the style <strong>without</strong> triggering an entire page reload.</p>

<p>The refresh function combined with the file system refresh messages sent over the SSE connection
 With that feature, I could really focus on minute changes to the CSS without the page jumping at all, even on the mobile device. The video below will illustrate this nicely.</p>

<p>Have a look what this means in practice:</p>

<div class="video-container">
    <iframe width="320" height="180" src="http://matthiasnehlsen.com//www.youtube.com/embed/mNxFQva-Shw"></iframe>
</div>


<p>Things look decent for flexbox in terms of <strong><a href="http://caniuse.com/flexbox">compatibility</a></strong>. In the mobile world, flexbox has been supported since Android 2.1 and iOS 3.1, and by now it is supported on at least the latest browser version on each platform, which should cover the vast majority of mobile devices out there. On the desktop side of things, flexbox has also been supported for a while on different platforms, even on IE since version 10. This is in contrast to SSE, which Microsoft apparently does not want to support at all. But there is one <strong>caveat</strong>: Flexbox exists in different versions, with the old ones prefixed. For -webkit, even different prefixed versions exist. In itself that is not a huge problem, particularly if you use <strong><a href="http://lesscss.org/#-mixins">LESS mixins</a></strong> so you do not have to continuously repeat yourself. But it is still a quite annoying because it means optimizing for different browser versions. Well, nothing new in the world of browser compatibility issues.</p>

<p>I spent some time with the flexbox CSS and the layout of the sample index.html in the <strong><a href="https://github.com/matthiasn/live-html5">live-html5</a></strong> project looks fine to me when viewed with the latest versions of all major browsers, but I have not had the time to even out edges in older versions, particularly in Firefox and IE. If you see a problem there, please fix it and submit a pull request. Old browsers have not been the focus of my experiments much. No reason why they shouldn&#8217;t be supported by the template as well as possible though. Thanks!</p>

<p>Anyways, so all that worked nicely, with a responsive layout with an <strong>aside</strong> element on the right side if the media query detects a wide browser page (e.g. desktop or iPad in landscape orientation) and a stacked layout otherwise. You have seen it in the video above, it is simple and seems to work fine. It is also <strong><a href="http://validator.w3.org/check?uri=http%3A%2F%2Fmatthiasn.github.io%2Flive-html5%2F&amp;charset=%28detect+automatically%29&amp;doctype=Inline&amp;group=0">valid HTML5</a></strong>.</p>

<p>Finally, when I revisited the page speed issue, I implemented automatic CSS inlining, minification and compression. Grunt is great for that, unless you actually like mindless and repetitive tasks. Have a look at the <strong><a href="http://matthiasn.github.io/live-html5/">project description</a></strong> and <strong><a href="https://github.com/matthiasn/live-html5">code</a></strong> to find out more about the build task.</p>

<p>Here is the final result of Google PageSpeed Insights after all the automated optimizations:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/pagespeed-100.png" title="image" alt="pagespeed 100 result"></p>

<p>Great, this is what I wanted to see. Let us have a look at timeline chart for the sample page now. Arguably the complexity of this page is higher than the blog index page, so I think this is a fair comparison:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/gtmetrix-live-html5.png" title="image" alt="gtmetrix result for optimized live-html5 page"></p>

<p>The <strong>DOM loaded</strong> event now occurs after 86ms, which is more than 12 times faster than what we saw for the index page of the blog initially. It also happens after loading only 7.7KB. That will load much faster over a suboptimal mobile connection for sure. Note that the remaining two resources are not important for the perceived speed. All that matters is the HTML and the embedded styles. The picture is at the bottom of the page on a small screen anyways, and I bet no visitor will give up because a <strong><a href="http://fontawesome.io">font-awesome symbol</a></strong> renders with some delay.</p>

<p>This concludes the quest for speed. The sample page loads as I wanted it to, with nothing less than a 100/100 score on Google PageSpeed Insights. Flexbox seems to work fine particularly for a mobile audience. Finally, the build system removes the pain of optimizing things by hand.</p>

<p>I find the presented solutions particularly sweet as they work together. But you might find individual parts useful as well. I am particularly thinking about the live reload server / client pattern; it will work equally well in a project that uses Bootstrap or whatever. You are not even bound to LESS. You can still use less.js for loading and refreshing CSS without a page refresh. The refreshed CSS could equally well be generated by a <strong><a href="http://sass-lang.com">SASS</a></strong> based CSS build system watching file folders. Or you just edit plain old CSS by hand if that makes you feel good.</p>

<p>In fact I have made the page refresh feature work with <strong><a href="http://www.playframework.com">Play Framework</a></strong>. For that the server.js will need to be started in whichever folder you want to watch and the script snippet needs do be loaded during development. The script would by default not be allowed to contact the <strong><a href="https://github.com/matthiasn/live-html5/blob/master/scripts/server.js">server.js</a></strong> backend because it runs on a different port. The <strong><a href="http://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy</a></strong> of the browser prohibits this. But an instance of nginx can run in front of both server and serve all resources on the same port, including the Server Sent Event stream. You can find the <strong><a href="https://github.com/matthiasn/live-html5/blob/master/conf/nginx.conf">nginx configuration file</a></strong> in the <strong>conf</strong> folder of the project. This even works with the partial CSS reload feature by loading the CSS file(s) as LESS and embedding the <strong><a href="http://lesscss.org">less.js</a></strong> script. I&#8217;d be happy to write an article about this, should the demand present itself.</p>

<h2>Contributions</h2>

<p>I am using this particular project to learn more about the technologies involved. Please submit pull requests wherever you see potential for improvements.</p>

<h2>Outlook</h2>

<p>In this article I have talked about some implementation details for an optimized delivery of a static page to mobile devices. Along the way I have also presented a convenience feature, the smooth live reload particularly for CSS but also for other resources.</p>

<p>I can report that this kind of build system and the live reload feature are also useful when building a single page application. In my new project which I have mentioned in the beginning I am taking the reload feature further by also using it for updating the data model. With that, page refreshes based on  data model changes become equally smooth as the CSS refreshes presented here. But more on that in future articles. As usual, you can find the code on <strong><a href="https://github.com/matthiasn/live-html5">GitHub</a></strong>.</p>

<p>Cheers,
Matthias</p>

<p><em>You should follow me on Twitter <a href="https://twitter.com/matthiasnehlsen" target="_blank">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Crossfilter with AngularJS]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/09/15/using-crossfilter-with-angularjs/"/>
    <updated>2013-09-15T20:40:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/09/15/using-crossfilter-with-angularjs</id>
    <content type="html"><![CDATA[<p>So far I have found my <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application nice to look at but not terribly useful as an original way of finding information. Let&#8217;s face it - the vast majority of tweets are not terribly useful. But there are some in there that are highly relevant. What are their characteristics? At the most basic level, they come from people with huge numbers of followers and / or have been re-tweeted a lot. It&#8217;s these tweets that have a large audience, not the ones from users with low follower counts. The latter make up the majority of the chatter, though. How do we find these more relevant tweets within an observation period?</p>

<!-- more -->


<p>I am running a private instance of this application which is listening to tweets on US politics. In this instance of the application I have been increasingly annoyed by an overwhelming amount of irrelevancy. I&#8217;d search for &#8220;Obama Syria&#8221; and get shiploads of tweets from crazies; finding the relevant stuff was next to impossible when I only had the result set sorted by time.</p>

<p><strong><a href="http://square.github.io/crossfilter/">Crossfilter</a></strong> to the rescue. Over the weekend I finally had time to integrate it into the project. Now you will be able to sort tweets not only in natural order (by time) but also by the number of followers of the author</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/cf_followers.png" title="image" alt="images"></p>

<p>or the number of times a particular tweet has been retweeted. As usual you can <strong><a href="http://birdwatch.matthiasnehlsen.com">try this out</a></strong>.</p>

<p> <img class="left" src="http://matthiasnehlsen.com/images/cf_retweets.png" title="image" alt="images"></p>

<p>The re-tweets sort order currently evaluates the number of total re-tweets during the entire lifecycle of the tweet, which makes this sort order somewhat biased towards older tweets that were re-tweeted a lot in the past but not necessarily proportionately often during the observation time, which is the time span between now (whenever looking at the page as searches are live) and the oldest tweet in the data set. One additional metric could be the number of retweets of a tweet during the observation period, not the total number. That should not be all that difficult using crossfilter.</p>

<p>Let&#8217;s have a look at the source code. The <strong><a href="http://square.github.io/crossfilter/">Crossfilter</a></strong> object lives in an <strong><a href="http://angularjs.org">AngularJS</a></strong> service, which is a singleton within the application. The functionality is then exposed through exported functions for adding data, clearing the <strong><a href="http://square.github.io/crossfilter/">crossfilter</a></strong> and retrieving items for the paginated tweets page.</p>

<figure class='code'><figcaption><span>Crossfilter service</span><a href='https://github.com/matthiasn/BirdWatch/blob/ff861aa0df86c0c0ea2a078a0c3af50a6bc877b1/app/assets/javascripts/services/crossfilter.js'>crossfilter.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// crossfilter service</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">).</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;cf&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// crossfilter object: browser side analytics library, holds array type data (w/incremental updates).</span>
</span><span class='line'>    <span class="c1">// dimensions are fast queries on data, e.g. view sorted by followers_count or retweet_count of the original message</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">([]);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetIdDim</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">followersDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">followers_count</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetsDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalIdDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// freeze imposes filter on crossfilter that only shows anything older than and including the latest</span>
</span><span class='line'>    <span class="c1">// tweet at the time of calling freeze. Accordingly unfreeze clears the filter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">freeze</span>    <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">]);</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">unfreeze</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">add</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>     <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="p">};</span>                            <span class="c1">// add new items, as array</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">clear</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">};</span>                             <span class="c1">// reset crossfilter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">noItems</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">();</span> <span class="p">};</span>                        <span class="c1">// crossfilter size total</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">numPages</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">/</span> <span class="nx">pageSize</span><span class="p">);</span> <span class="p">};</span>  <span class="c1">// number of pages</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// predicates</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweeted</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mapper functions</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalTweet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">);</span> <span class="p">};</span>   <span class="c1">// returns original tweet</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetId</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">};</span>                                    <span class="c1">// returns tweet id</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetCount</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">retweeted</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span> <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">maxRetweets</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">retweet_count</span> <span class="o">=</span> <span class="nx">retweetCount</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">top</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}));</span>
</span><span class='line'>        <span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// deliver tweets for current page. fetches all tweets up to the current page,</span>
</span><span class='line'>    <span class="c1">// throws tweets for previous pages away.</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">tweetPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentPage</span><span class="p">,</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">,</span> <span class="nx">live</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">fetchTweets</span><span class="p">(</span><span class="nx">currentPage</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">),</span> <span class="p">(</span><span class="nx">currentPage</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// fetch tweets from crossfilter dimension associated with particular sort order up to the current page,</span>
</span><span class='line'>    <span class="c1">// potentially mapped and filtered</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fetchTweets</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span>      <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;latest&quot;</span><span class="p">)</span>    <span class="p">{</span> <span class="k">return</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">);</span> <span class="p">}</span>    <span class="c1">// latest: desc order of tweets by ID</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;followers&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">followersDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">maxRetweets</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>   <span class="c1">// desc order of tweets by followers</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;retweets&quot;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// descending order of tweets by total retweets of original message</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">first</span><span class="p">(</span>               <span class="c1">// filtered to be unique, would appear for each retweet in window otherwise</span>
</span><span class='line'>              <span class="nx">_</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">retweetsDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">retweeted</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">originalTweet</span><span class="p">),</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">tweetId</span><span class="p">),</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[];</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on the selected sort order different dimensions are used to generate the paginated tweets list. Sorting by time of tweeting is achieved with a dimension sorting by tweet IDs (which are in chronological order). Another dimension sorts tweets by the follower count of the tweet author. In this case, maxRetweets (mapper function) looks up all retweets within the data set in memory and sets the retweet count to the highest value found. The tweets with the highest number of retweets are found using the retweets dimension. Within this dimension multiple versions of the same original tweet are returned when the tweet has been retweeted multiple times during the observation period. The _.uniq function from <strong><a href="http://underscorejs.org/">underscore.js</a></strong> is used to filter out those duplicate entries. The descending order of retweet_count in the returned array from the dimension guarantees that the version of a retweet with the highest re-tweet count is found first and retained.</p>

<p>The paginated data is generated by retrieving all items from the selected dimension up to the current page. The _.rest function from <strong><a href="http://underscorejs.org/">underscore.js</a></strong> then drops the items for all pages that come before the current page.</p>

<p><strong><a href="http://angularjs.org">AngularJS</a></strong> then takes care of rendering a view by calling the tweetPage function from the crossfilter service every time the UI is updated. This means that the visual representation of the data is always up to date, with automatic updates for example when a tweet in the followers order is retweeted again. All that without having to manipulate the DOM directly, thanks to
<strong><a href="http://angularjs.org">AngularJS</a></strong>.</p>

<p>Evaluating the crossfilter dimension functions again and again can be problematic when tens of individual tweets per second arrive through the <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> connection with the server, though. In order to avoid evaluating the <strong><a href="http://square.github.io/crossfilter/">crossfilter</a></strong> functions multiple times per second I use _.throttle in the registerCallback function in controllers.js:</p>

<figure class='code'><figcaption><span>Insertion Cache inside Controller</span><a href='https://github.com/matthiasn/BirdWatch/blob/ff861aa0df86c0c0ea2a078a0c3af50a6bc877b1/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">insertionCache</span> <span class="o">=</span> <span class="nx">insertionCache</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>    <span class="c1">// every received item is appended to insertionCache.</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">throttle</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>                       <span class="c1">// throttle because every insertion triggers expensive</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">insertionCache</span><span class="p">);</span>  <span class="c1">// $scope.apply(), insert cache once every 3 seconds,</span>
</span><span class='line'>    <span class="nx">insertionCache</span> <span class="o">=</span> <span class="p">[];</span>                      <span class="c1">// then empty cache.</span>
</span><span class='line'><span class="p">},</span> <span class="mi">3000</span><span class="p">)();</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, you can now increase the number of pre-loaded tweets to up to 20,000 under <strong>settings</strong>. That may slow the application down, though. A lot of things aren&#8217;t perfect yet, but overall it seems to be working fine.</p>

<p>Anyhow, I will go into more detail later. The source code for the entire application can be found on <strong><a href="https://github.com/matthiasn/BirdWatch">GitHub</a></strong>. My <strong><a href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/">previous article</a></strong> is the place to go for an explanation of the overall architecture of the application. It is a work in progress and I will get back to it in the next couple of days. For now I just wanted to give you a quick update on what I have been up to this weekend.</p>

<p>Until next time,
Matthias</p>

<p><em>You should follow me on Twitter <a href="https://twitter.com/matthiasnehlsen" target="_blank">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch explained]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained/"/>
    <updated>2013-09-10T22:54:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/09/10/birdwatch-explained</id>
    <content type="html"><![CDATA[<p><strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> is an <strong><a href="https://github.com/matthiasn/BirdWatch">open-source</a></strong> reactive web application that consumes the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> for a selection of terms. It processes those matching tweets in a server side application that is based on <strong><a href="http://www.playframework.com">Play Framework</a></strong>. The tweets are then stored inside <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>, where they are available for complex full-text searches.
On the client side, a <strong><a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a></strong> based on <strong><a href="http://angularjs.org">AngularJS</a></strong> allows the user to perform a live search for tweets with certain keywords and to do some analysis on them, such as word count statistics, activity over time and sorting results by followers and retweet counts.</p>

<!-- more -->


<p>Searches are conducted in real time thanks to so called <strong><a href="http://www.elasticsearch.org/guide/reference/api/percolate/">Percolation queries</a></strong> within ElasticSearch. Besides being used to retrieve previous matches, each search is also registered with ElasticSearch. New tweets are then matched against existing queries and delivered to the client via <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>. This will be explained in more detail in the ElasticSearch section towards the end of this article. The client side visualizations based on <strong><a href="http://d3js.org">D3.js</a></strong> are then updated with those new search results.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_beer.png" title="image" alt="images"></p>

<p>Here is an architectural overview with a focus on the <strong><a href="https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala">Twitter client</a></strong>:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_anim.gif" title="image" alt="images"></p>

<h3>TwitterClient Actor</h3>

<p>This server side application component establishes the communication with Twitter and then monitors the connection with a supervisor actor. The connection may be disrupted, but the supervisor will then notice inactivity and start a new connection.</p>

<p>So what is an Actor?</p>

<blockquote><p>Actors are very lightweight concurrent entities. They process messages asynchronously using an event-driven receive loop. Pattern matching against messages is a convenient way to express an actor&#8217;s behavior. They raise the abstraction level and make it much easier to write, test, understand and maintain concurrent and/or distributed systems. You focus on workflow—how the messages flow in the system—instead of low level primitives like threads, locks and socket IO.</p><footer><strong>Akka Actors</strong> <cite><a href='http://akka.io'>http://akka.io</a></cite></footer></blockquote>


<p>The underlying Actor Model as a model of concurrent computation was first described in a 1973 paper by Carl Hewitt, Peter Bishop and Richard Steiger. I can recommend this <strong><a href="http://channel9.msdn.com/Shows/Going+Deep/Hewitt-Meijer-and-Szyperski-The-Actor-Model-everything-you-wanted-to-know-but-were-afraid-to-ask">video</a></strong> in which Carl Hewitt explains the Actor Model 39 years after its initial inception. Be warned of Erik Meijers vibrant shirt, you may want to dial down the color saturation of your screen ;-) Other than that, I found this video really helpful in getting a better understanding of the subject.</p>

<p>Let&#8217;s have a look at the source code. The Twitter client establishes a connection to the Twitter streaming endpoint using the <strong><a href="http://www.playframework.com/documentation/2.1.3/ScalaWS">Play WS API</a></strong>. This connection stays open indefinitely. The remote side then delivers new tweets in byte array chunks whenever a match for the specified set of topics has been tweeted. This set of topics is passed in via a query string parameter (see <strong>start()</strong> function). The URL for starting a streaming API client has the following format:</p>

<p><small><strong>https://stream.twitter.com/1.1/statuses/filter.json?track=angularjs,playframework,elasticsearch</strong></small></p>

<figure class='code'><figcaption><span>WS Connection</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Starts new WS connection to Twitter Streaming API. Twitter disconnects the previous one automatically. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Starting client for topics &quot;</span> <span class="o">+</span> <span class="n">topics</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="n">twitterURL</span> <span class="o">+</span> <span class="n">topics</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;%2C&quot;</span><span class="o">).</span><span class="n">replace</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">,</span> <span class="s">&quot;%20&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">withTimeout</span><span class="o">(-</span><span class="mi">1</span><span class="o">).</span><span class="n">sign</span><span class="o">(</span><span class="nc">OAuthCalculator</span><span class="o">(</span><span class="nc">Conf</span><span class="o">.</span><span class="n">consumerKey</span><span class="o">,</span> <span class="nc">Conf</span><span class="o">.</span><span class="n">accessToken</span><span class="o">)).</span><span class="n">get</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="n">tweetIteratee</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The supervisor monitors the connection through TweetReceived messages it receives for each tweet and that indicate when the last tweet was received. CheckStatus messages are sent to the supervisor at regular intervals and prompt it to check when the last tweet was received. If the time span is too long, the supervisor will treat the connection as dead and establish a new one.</p>

<figure class='code'><figcaption><span>Connection Supervisor</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Actor taking care of monitoring the WS connection */</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Supervisor</span><span class="o">(</span><span class="n">eventStream</span><span class="k">:</span> <span class="kt">akka.event.EventStream</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">lastTweetReceived</span> <span class="k">=</span> <span class="mi">0L</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">lastBackOff</span> <span class="k">=</span> <span class="mi">0L</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Receives control messages for starting / restarting supervised client and adding or removing topics */</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">AddTopic</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="n">topics</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">RemoveTopic</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">topics</span><span class="o">.</span><span class="n">remove</span><span class="o">(</span><span class="n">topic</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span> <span class="n">start</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">CheckStatus</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">lastTweetReceived</span> <span class="o">&gt;</span> <span class="n">retryInterval</span> <span class="o">&amp;&amp;</span> <span class="n">now</span> <span class="o">-</span> <span class="n">lastBackOff</span> <span class="o">&gt;</span> <span class="n">backOffInterval</span><span class="o">)</span> <span class="n">start</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">BackOff</span> <span class="k">=&gt;</span> <span class="n">lastBackOff</span> <span class="k">=</span> <span class="n">now</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">TweetReceived</span> <span class="k">=&gt;</span> <span class="n">lastTweetReceived</span> <span class="k">=</span> <span class="n">now</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The WS client receives tweets as byte array chunk and passes them to the TweetIteratee function.</p>

<figure class='code'><figcaption><span>Tweet Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Iteratee for processing each chunk from Twitter stream of Tweets. Parses Json chunks </span>
</span><span class='line'><span class="cm">    * as Tweet instances and publishes them to eventStream. */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">chunk</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">chunk</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">supervisor</span> <span class="o">!</span> <span class="nc">TweetReceived</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">chunkString</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="s">&quot;Easy there, Turbo. Too many requests recently. Enhance your calm.&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">supervisor</span> <span class="o">!</span> <span class="nc">BackOff</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>      <span class="o">(</span><span class="n">json</span> <span class="o">\</span> <span class="s">&quot;id_str&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">String</span><span class="o">].</span><span class="n">map</span> <span class="o">{</span> <span class="n">id</span> <span class="k">=&gt;</span> <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticTweetURL</span> <span class="o">+</span> <span class="n">id</span><span class="o">).</span><span class="n">put</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">matchAndPush</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The TweetIteratee function once again uses an asynchronous <strong><a href="http://www.playframework.com/documentation/2.1.3/ScalaWS">WS client</a></strong> to insert the <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> representation of the tweet into the ElasticSearch index. It then calls the matchAndPush function with the tweet as a JsValue. It also checks if Twitter finds that you have been calling the Streaming API too often, which has happened to me during the development process, most likely due to some mistakes on my part. In that case the chunk coming in through the open connection to Twitter contained the &#8220;Easy there, Turbo…&#8221; string you will find in the code above. I found that the best way to deal with that was to implement a backoff strategy, which is initiated by sending a BackOff message to the Supervisor actor. The receive method of the actor then performs pattern matching on incoming messages. In the case of receiving a BackOff case object, it will set the lastBackOff timestamp, keeping it from reconnecting until the backOffInterval has passed (see CheckStatus in the earlier code block).</p>

<figure class='code'><figcaption><span>Matching Tweets with Queries</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/app/actors/TwitterClient.scala'>TwitterClient </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Takes JSON and matches it with percolation queries in ElasticSearch</span>
</span><span class='line'><span class="cm">    * @param json JsValue to match against </span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">matchAndPush</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;doc&quot;</span> <span class="o">-&gt;</span> <span class="n">json</span><span class="o">)).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">res</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="o">\</span> <span class="s">&quot;matches&quot;</span><span class="o">).</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]].</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">m</span> <span class="k">=&gt;</span> <span class="n">jsonTweetsChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Matches</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">HashSet</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">++</span> <span class="n">m</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MatchAndPush then matches the tweet with pre-registered queries by POSTing it to the percolation query endpoint of ElasticSearch, which returns a list of the matched query IDs. The query IDs are hashes of the query string itself. That way each query will only be inserted once instead of individually for every client. The tweet is then combined with the query IDs for matching searches and pushed into the tweets channel of Concurrent.broadcast. The controller action responsible for streaming tweets to web clients will then attach an Emuratee / Iteratee chain which determines if the tweet is to be relayed to a particular client or not, depending on the hash of the search string.</p>

<h3>Controller</h3>

<p>Now let&#8217;s have a look at the controller of the application which serves:</p>

<ul>
<li>the main page</li>
<li>previous tweets that match a search</li>
<li>a <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> stream with future matches for the query.</li>
</ul>


<p>The endpoints for these actions are defined in the routes file:</p>

<figure class='code'><figcaption><span>Application Routes</span><a href='https://github.com/matthiasn/BirdWatch/blob/22f8e3f90a11690eda5e36a339a116821dc1b2ff/conf/routes'>routes </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>GET        /                     controllers.BirdWatch.index
</span><span class='line'>GET        /tweetFeed            controllers.BirdWatch.tweetFeed(q: String ?= &quot;*&quot;)
</span><span class='line'>POST       /tweets/search        controllers.BirdWatch.search
</span></code></pre></td></tr></table></div></figure>


<p>Here is an overview of the controller actions:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/controller.png" title="image" alt="images"></p>

<p>Let&#8217;s start with code for the <strong>index</strong> action which serves the main page. The HTML comes from a rendered view, which in this case is almost entirely plain HTML, except that the some configuration parameters for Google Analytics are inserted here. This has the advantage that the instance specific configuration can be kept in the application.conf file.</p>

<figure class='code'><figcaption><span>Index Action</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller action serving single page application */</span>
</span><span class='line'><span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Conf</span><span class="o">.</span><span class="n">getOrEmpty</span><span class="o">(</span><span class="s">&quot;ga.hostname&quot;</span><span class="o">),</span> <span class="nc">Conf</span><span class="o">.</span><span class="n">getOrEmpty</span><span class="o">(</span><span class="s">&quot;ga.domain&quot;</span><span class="o">),</span> <span class="nc">Conf</span><span class="o">.</span><span class="n">getOrEmpty</span><span class="o">(</span><span class="s">&quot;ga.id&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>search</strong> action serves search results from <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>. The search itself is POSTed in <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> format and passed straight through to ElasticSearch. The WS client is used to make a request to a local instance of <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>. The future response to this request is then mapped into the response of the search action. The <strong>search</strong> controller action is really only a proxy for development purposes. My <strong><a href="http://birdwatch.matthiasnehlsen.com">deployed instance</a></strong> of the application has <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> running in front of it, which for this route directly talks to ElasticSearch instead of keeping the <strong><a href="http://en.wikipedia.org/wiki/Garbage_collection">garbage collection</a></strong> mechanism of the <strong><a href="http://en.wikipedia.org/wiki/Java_virtual_machine">JVM</a></strong> busy with unprocessed data. We will have a look at <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> configuration further down in this article.</p>

<figure class='code'><figcaption><span>Search Action</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller for serving main BirdWatch page including the SSE connection */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">BirdWatch</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** Controller Action serving Tweets as JSON going backwards in time. Query passed in as JSON */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">search</span> <span class="k">=</span>  <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">url</span> <span class="k">=</span>  <span class="n">elasticTweetURL</span> <span class="o">+</span> <span class="s">&quot;_search&quot;</span>
</span><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="n">body</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span> <span class="n">res</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="n">body</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&#8217;ll get to the most complicated part: serving the live stream for a search in the <strong>tweetFeed</strong> action. This controller makes use of the <strong><a href="http://www.playframework.com/documentation/2.1.3/Iteratees">Iteratee</a></strong> library from Play Framework. I wrote an <strong><a href="http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence/">article about Iteratees</a></strong> a while back. I haven&#8217;t read it in a while, it may need some revision but you might still find it useful. It’s rather long, but then this article isn’t exactly what you would call short either.</p>

<p>The client establishes a connection to the streaming endpoint served by the <strong>tweetFeed</strong> action, which then delivers the results - not all at once, but in chunks whenever new data is available for this request. This data originates from the <strong><a href="http://www.playframework.com/documentation/2.2.0/api/scala/index.html#play.api.libs.iteratee.Enumerator">Enumerator</a></strong> from the <strong><a href="http://www.playframework.com/documentation/2.2.0/api/scala/index.html#play.api.libs.iteratee.Concurrent$">Concurrent.broadcast</a></strong> object (provided by Play Framework) which we have seen above. <strong><a href="http://www.playframework.com/documentation/2.2.0/api/scala/index.html#play.api.libs.iteratee.Iteratee">Iteratees</a></strong> can attach to this Enumerator. In essence, Iteratees are functions that define what to do with each new piece of information. Enumeratees are transformer functions that can be placed in between the Enumerator as the source and the Iteratee as the final sink of this information. As to the streaming action, the <strong>Ok.feed</strong> itself represents the Iteratee, doing nothing more than delivering each chunk to the connected client. Iteratees can also hold an accumulator for the current state of an ongoing computation, in which case the individual Iteratee becomes the representation of a step of an ongoing computation, but that feature of Iteratees is not used in this use case.</p>

<p>Enumeratees are then placed between the source and the sink, forming a processing chain. This is the most interesting part of the code:</p>

<figure class='code'><figcaption><span>Streaming Action and Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span> <span class="o">+</span> <span class="n">queryID</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">query</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">res</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">.</span><span class="n">feed</span><span class="o">(</span><span class="nc">TwitterClient</span><span class="o">.</span><span class="n">jsonTweetsOut</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesFilter</span><span class="o">(</span><span class="n">queryID</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesToJson</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">connDeathWatch</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">)</span>  <span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the action we establish a connection to ElasticSearch by posting the query as a percolation query (see <strong>ElasticSearch section</strong> below). The ID of the query is determined by hashing the entire query using SHA-256. That way repeated queries always have the same ID within ElasticSearch. Once that request is complete, we respond to the client with a feed that contains the following processing chain:</p>

<ul>
<li>Tweets with matched query IDs originate from the TwitterClient.jsonTweetsOut Enumerator.</li>
<li>The matchesFilter Enumeratee checks if the matches set contains the query hash. If not, no further actions will take place.</li>
<li>A buffer ensures that the application is not held up if the sink is too slow, for example, when a client connection suffers from network congestion. Tweets will be dropped when the buffer is full, which won&#8217;t be much of an issue because if your connection is so slow, you probably don&#8217;t want to use this application in the first place.</li>
<li>Matches are converted to JSON</li>
<li>The connection uptime is monitored. In this Enumeratee the duration of the connection will be logged.</li>
<li>The data is converted to comply with the <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> specifications.</li>
</ul>


<p>Below, you&#8217;ll find the entire code related to the streaming endpoint. The Enumeratees are adapters between the Enumerator from the TwitterClient where the Tweets originate and the chunked response we pass back to the client. They can either transform elements passing through the chain from one type to another, filter them based on a predicate function or buffer them.</p>

<figure class='code'><figcaption><span>Streaming Action and Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/app/controllers/BirdWatch.scala'>BirdWatch.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller for serving main BirdWatch page including the SSE connection */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">BirdWatch</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** calculates milliseconds between passed in DateTime and time of function call */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">duration</span><span class="o">(</span><span class="n">since</span><span class="k">:</span> <span class="kt">DateTime</span><span class="o">)</span> <span class="k">=</span> <span class="nc">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">getMillis</span> <span class="o">-</span> <span class="n">since</span><span class="o">.</span><span class="n">getMillis</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Enumeratee for detecting disconnect of SSE stream */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">connDeathWatch</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">Request</span><span class="o">[</span><span class="kt">AnyContent</span><span class="o">],</span> <span class="n">since</span><span class="k">:</span> <span class="kt">DateTime</span><span class="o">)</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">JsValue</span>, <span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">onIterateeDone</span> <span class="o">{</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Logger</span><span class="o">.</span><span class="n">logRequest</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="s">&quot;SSE disconnected&quot;</span><span class="o">,</span> <span class="mi">200</span><span class="o">,</span> <span class="n">duration</span><span class="o">(</span><span class="n">since</span><span class="o">))}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Filtering Enumeratee applying containsAll function */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">matchesFilter</span><span class="o">(</span><span class="n">qID</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">filter</span><span class="o">[</span><span class="kt">Matches</span><span class="o">]</span> <span class="o">{</span> <span class="n">pm</span> <span class="k">=&gt;</span> <span class="n">pm</span><span class="o">.</span><span class="n">matches</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">qID</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Enumeratee: TweetMatches to Tweet adapter */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">matchesToJson</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">Matches</span>, <span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">[</span><span class="kt">Matches</span><span class="o">]</span> <span class="o">{</span> <span class="n">pm</span> <span class="k">=&gt;</span> <span class="n">pm</span><span class="o">.</span><span class="n">json</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Serves Tweets as Server Sent Events over HTTP connection TODO: change to POST */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">tweetFeed</span><span class="o">(</span><span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Logger</span><span class="o">.</span><span class="n">logRequest</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="s">&quot;/tweetFeed?q=&quot;</span> <span class="o">+</span> <span class="n">q</span><span class="o">,</span> <span class="mi">200</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">query</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;query&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;query_string&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;default_field&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;text&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="s">&quot;default_operator&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;AND&quot;</span><span class="o">,</span> <span class="s">&quot;query&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">q</span> <span class="o">+</span> <span class="s">&quot;) AND lang:en&quot;</span><span class="o">))),</span>
</span><span class='line'>        <span class="s">&quot;timestamp&quot;</span> <span class="o">-&gt;</span> <span class="n">dtFormat</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">))</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/** identify queries by hash, only store unique queries once */</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">md</span> <span class="k">=</span> <span class="nc">MessageDigest</span><span class="o">.</span><span class="n">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-256&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">queryID</span> <span class="k">=</span> <span class="n">md</span><span class="o">.</span><span class="n">digest</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="n">getBytes</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="s">&quot;%02x&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="k">_</span><span class="o">)).</span><span class="n">mkString</span>
</span><span class='line'>
</span><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticPercolatorURL</span> <span class="o">+</span> <span class="n">queryID</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">query</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">res</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">.</span><span class="n">feed</span><span class="o">(</span><span class="nc">TwitterClient</span><span class="o">.</span><span class="n">jsonTweetsOut</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesFilter</span><span class="o">(</span><span class="n">queryID</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">matchesToJson</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="n">connDeathWatch</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">)</span>  <span class="o">)</span>
</span><span class='line'>          <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AngularJS Client</h3>

<p><strong><a href="http://angularjs.org">AngularJS</a></strong> is a modern approach to <strong><a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Applications</a></strong>. It is said to teach the browser new tricks. It also brings the <strong>fun</strong> back to developing Single Page applications. <strong>Seriously</strong>. So what is so special about it? It&#8217;s approach is a declarative one. This means that we declare how UI elements are supposed to look like depending on the application state, but we do not have to concern ourselves with how exactly this is achieved. This might not sound like much at first, but it really does make all the difference. No more direct DOM manipulation with jQuery or the like. Instead we create new elements as so called directives that know how to lay themselves out on the page. These elements are then used in the page markup, as if they existed all along in HTML. We will look at that in more detail for the TweetCard directive, which shows a simple custom directive.</p>

<p>Here&#8217;s the overall architecture of the AngularJS application:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_angular1.png" title="image" alt="images"></p>

<p>There are singleton services in the application that only get instantiated once for the lifecycle of the application. First there is the tweets service which takes care of the communication with the server side. It pre-loads existing tweets and also establishes a <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> connection for future search results. This service allows the registration of a callback function which is called with search results, no matter if from previous tweets or from the SSE connection.</p>

<figure class='code'><figcaption><span>Tweets Service in AngularJS</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/services/tweets.js'>tweets.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** tweets service, load previous tweets and receives subsequent live tweets for given query */</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;tweets&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">utils</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetFeed</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetsCache</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** callback function to perform when new tweet(s) arrive */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">onNewTweets</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">registerCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span> <span class="nx">onNewTweets</span> <span class="o">=</span> <span class="nx">callback</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Load previous Tweets, paginated. Recursive function, calls itself with the next chunk to load until</span>
</span><span class='line'><span class="cm">     *  eventually n, the remaining tweets to load, is not larger than 0 any longer. guarantees at least n hits</span>
</span><span class='line'><span class="cm">     *  if available, potentially more if (n % chunkSize != 0) */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">loadPrev</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$http</span><span class="p">({</span><span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">buildQuery</span><span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">offset</span><span class="p">),</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/tweets/search&quot;</span><span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">onNewTweets</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">_source</span><span class="p">;</span> <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">));</span>
</span><span class='line'>                    <span class="nx">loadPrev</span><span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">n</span> <span class="o">-</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">,</span> <span class="nx">offset</span> <span class="o">+</span> <span class="nx">chunkSize</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Start Listening for Tweets with given query */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">queryString</span><span class="p">,</span> <span class="nx">prevSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">tweetFeed</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nx">tweetFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">searchString</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">queryString</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">searchString</span> <span class="o">=</span> <span class="nx">queryString</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="nx">searchString</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** handle incoming tweets: add to tweetsCache array, run callback at most every second */</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cachedCallback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">tweetsCache</span> <span class="o">=</span> <span class="nx">tweetsCache</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">)));</span>
</span><span class='line'>            <span class="nx">_</span><span class="p">.</span><span class="nx">throttle</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>        <span class="c1">// throttle because insertion too expensive on high traffic searches</span>
</span><span class='line'>                <span class="nx">onNewTweets</span><span class="p">(</span><span class="nx">tweetsCache</span><span class="p">);</span>  <span class="c1">// run callback with all items in cache</span>
</span><span class='line'>                <span class="nx">tweetsCache</span> <span class="o">=</span> <span class="p">[];</span>          <span class="c1">// then empty cache.</span>
</span><span class='line'>            <span class="p">},</span> <span class="mi">1000</span><span class="p">)();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">tweetFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/tweetFeed?q=&quot;</span> <span class="o">+</span> <span class="nx">searchString</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">tweetFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nx">cachedCallback</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">loadPrev</span><span class="p">(</span><span class="nx">searchString</span><span class="p">,</span> <span class="nx">prevSize</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// load previous tweets in chunks of size 500</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">search</span><span class="o">:</span> <span class="nx">search</span><span class="p">,</span> <span class="nx">registerCallback</span><span class="o">:</span> <span class="nx">registerCallback</span><span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only other components that knows anything about this service is controller which provides the callback function that specifies what needs to happen with each new tweet / array of tweets. This allows for a proper decoupling of the services.</p>

<figure class='code'><figcaption><span>AngularJS Controller</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Controllers */</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.controllers&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">,</span> <span class="s1">&#39;charts.barchart&#39;</span><span class="p">,</span> <span class="s1">&#39;charts.wordcloud&#39;</span><span class="p">,</span> <span class="s1">&#39;ui.bootstrap&#39;</span><span class="p">]).</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;BirdWatchCtrl&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">utils</span><span class="p">,</span> <span class="nx">barchart</span><span class="p">,</span> <span class="nx">wordcloud</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">wordCount</span><span class="p">,</span> <span class="nx">cf</span><span class="p">,</span> <span class="nx">tweets</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSizeOpts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;100&#39;</span><span class="p">,</span> <span class="s1">&#39;500&#39;</span><span class="p">,</span> <span class="s1">&#39;1000&#39;</span><span class="p">,</span> <span class="s1">&#39;2000&#39;</span><span class="p">,</span> <span class="s1">&#39;5000&#39;</span><span class="p">,</span> <span class="s1">&#39;10000&#39;</span><span class="p">,</span> <span class="s1">&#39;20000&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSize</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSizeOpts</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">pageSizeOpts</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">pageSize</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">pageSizeOpts</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">toggleLive</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>                             <span class="c1">// freezes view when switched off by having the</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span><span class="p">)</span> <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">freeze</span><span class="p">();</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">unfreeze</span><span class="p">();</span> <span class="p">}</span> <span class="c1">// crossfilter limit results to tweets older</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span> <span class="o">=</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">live</span><span class="p">;</span>                               <span class="c1">// than the latest at the time of calling freeze()</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span> <span class="o">=</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">().</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">legalStuff</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">legalStuff</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">cf</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">sortModel</span> <span class="o">=</span> <span class="s1">&#39;latest&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">words</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** Add a string to the search bar when for example clicking on a chart element */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">addSearchString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">searchString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span> <span class="o">=</span> <span class="nx">searchString</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">searchString</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span> <span class="o">+=</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">searchString</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>  <span class="c1">// Term should appear immediately, not only after search returns</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** update UI every ten seconds to keep time ago for tweets accurate */</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">onTimeout</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">updateTimeout</span> <span class="o">=</span> <span class="nx">$timeout</span><span class="p">(</span><span class="nx">onTimeout</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">updateTimeout</span> <span class="o">=</span> <span class="nx">onTimeout</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** actions to perform when new tweets are available through the streaming connection */</span>
</span><span class='line'>        <span class="nx">tweets</span><span class="p">.</span><span class="nx">registerCallback</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">words</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">.</span><span class="nx">getWords</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">cf</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** Search for Tweets with given query, run on startup */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">wordCount</span> <span class="o">=</span> <span class="nx">wordCount</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">tweets</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">searchText</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">prevSize</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">cf</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller provides the $scope for the associated view, which is written as HTML, with some custom AngularJS code. The $scope variables are fairly straighforward, AngularJS two-way binds items in the view to the $scope so that when the value in either changes, the other updates as well. An example of this two-way data binding is the search text field. The binding to $scope.searchText is defined in the view:</p>

<figure class='code'><figcaption><span>Main View</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="c">&lt;!-- Search field in NavBar --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-form pull-left col-lg-6 input-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;search()&quot;</span> <span class="na">class=</span><span class="s">&quot;input-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;searchText&quot;</span>
</span><span class='line'>                    <span class="na">placeholder=</span><span class="s">&quot;Example search: java (job OR jobs OR hiring)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;input-group-btn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;search()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-search&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with this binding in place, modifying the content of the search field mutates $scope.searchText and vice versa. Changing the $scope.searchText programmatically would update the content of the search field as well. There is no need to concern ourselves with complicated ways of manipulating the DOM directly. This is probably the main reason why code in AngularJS tends to be much shorter than in more traditional approaches.</p>

<p>We briefly talked about directives above. Let&#8217;s have a look at one simple directive to get a better understanding, the TweetCard directive. A directive can either be an entirely new element or apply to a class. In this case we are using the class approach. Any element on the page that has class of <strong>tweetCard</strong> will be rendered by AngularJS according to the code in the directive. In this particular case the code is very simple:</p>

<figure class='code'><figcaption><span>TweetCard Directive</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/directives.js'>directives.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.directives&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;charts.barchart&#39;</span><span class="p">,</span> <span class="s1">&#39;charts.wordcloud&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="cm">/** Tweet Card Layout (with external template)*/</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;tweetCard&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span> <span class="nx">tweet</span><span class="o">:</span> <span class="s2">&quot;=tweet&quot;</span> <span class="p">},</span>
</span><span class='line'>            <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;/assets/templates/tweetCard.tpl.html&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>All that happens here is a $scope variable named tweet is assigned, which becomes available for two-way data binding inside the template code:</p>

<figure class='code'><figcaption><span>TweetCard Template Markup</span><a href='http://github.com/matthiasn/BirdWatch/blob/f23ff20638d180ed7aecf36a1071bf1d2bce2e69/public/templates/tweetCard.tpl.html'>tweetCard.tpl.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.twitter.com/&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;thumbnail&quot;</span> <span class="na">src=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">tooltip-placement=</span><span class="s">&quot;bottom&quot;</span> <span class="na">tooltip=</span><span class="s">&quot;click to visit Twitter profile&quot;</span>
</span><span class='line'>       <span class="na">href=</span><span class="s">&quot;http://www.twitter.com/&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;username&quot;</span> <span class="na">ng-bind=</span><span class="s">&quot;tweet.user.name&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;username_screen&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;#64;</span><span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pull-right timeInterval&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweettext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-bind-html-unsafe=</span><span class="s">&quot;tweet.htmlText&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pull-left timeInterval&quot;</span><span class="nt">&gt;</span> followers<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;tweet.retweeted_status.retweet_count&quot;</span> <span class="na">class=</span><span class="s">&quot;pull-right timeInterval&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             retweets<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;tweet.retweet_count&quot;</span> <span class="na">class=</span><span class="s">&quot;pull-right timeInterval&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             retweets<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now whenever the underlying data representation in the model changes, the rendering of the tweetCard changes as well thanks to two-way data binding. The more complicated markup of the tweetCard is encapsulated in the template, using the directive from the view becomes simple and concise:</p>

<figure class='code'><figcaption><span>Repeated Tweet Directive in View</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Tweet Cards inside frame --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-lg-4&quot;</span> <span class="na">id=</span><span class="s">&quot;tweet-frame&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweetCard&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;tweet in cf.tweetPage(currentPage, pageSize, sortModel)&quot;</span>
</span><span class='line'>        <span class="na">data-tweet=</span><span class="s">&quot;tweet&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above a div of class tweetCard is declared with data-ng-repeat, which means that the element is repeated for each element in the result of the cf.tweetPage function. For each individual item (for <strong>tweet</strong> in cf.tweetPage), data-tweet is assigned with the item. It could also have been data-ng-repeat=&#8221;item in …&#8221; data-tweet=&#8221;item&#8221;, the names correspond here.</p>

<p>Here&#8217;s how the $scope of an individual tweetCard element looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_tweetcard_scope.png" title="image" alt="images"></p>

<p>Above we can see that the $scope of the TweetCard contains the previously assigned tweet object which becomes available to the template code for two-way data binding. The two-way data binding can be seen in action here when sorting the tweets by retweet count. For popular tweets that get retweeted a lot we can grab some popcorn and watch the visual representation of the tweet change in the browser based on data model changes.</p>

<h3>Visualizations using D3.js</h3>

<p><strong><a href="http://d3js.org">D3.js</a></strong> is a JavaScript library for data-driven visualizations that render SVG in the browser. There are excellent tutorials out there, the project homepage is a great place to start. I won&#8217;t go into much detail here, but for a better understanding of what is happening, here is some D3.js code from this application together with the resulting SVG in the DOM:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_d3js1.png" title="image" alt="images"></p>

<p>What we see above on the left side is that <strong>rect</strong>s (rectangles) get rendered depending on the data that is provided to the D3 code on the right side. This is why the library is said to be data-driven, the data drives what gets rendered on the page.</p>

<h3>Data Analysis using crossfilter.js</h3>

<p><strong><a href="http://square.github.io/crossfilter/">Crossfilter</a></strong> is a JavaScript library for exploring large datasets in the browser. This is achieved by defining dimensions on which to dissect the data. A dimension is a kind of sorted index where the indexing function is provided in the dimension constructor:</p>

<figure class='code'><figcaption><span>Crossfilter Service</span><a href='https://github.com/matthiasn/BirdWatch/blob/c52a8e2a2f465fdeeb12b929e1732c962f3ec834/app/assets/javascripts/services/crossfilter.js'>crossfilter.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// crossfilter service</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;birdwatch.services&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;cf&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// crossfilter object: browser side analytics library, holds array type data (w/incremental updates).</span>
</span><span class='line'>    <span class="c1">// dimensions are fast queries on data, e.g. view sorted by followers_count or retweet_count of the original message</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">([]);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetIdDim</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">followersDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">followers_count</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetsDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalIdDim</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Higher-order function, returns a function that rounds time down. Interval s is specified in seconds.</span>
</span><span class='line'>    <span class="c1">// Example: returned function makes Jan 1, 2012, 16:45:00 out of Jan 1, 2012, 16:45:55 when interval is 60s</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">dateRound</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">s</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">created_at</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">byMinGrp</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span>      <span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">by15MinGrp</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span>   <span class="mi">15</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">byHourGrp</span>  <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span>   <span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">by6HourGrp</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span> <span class="mi">6</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">byDayGrp</span>   <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="nx">dateRound</span><span class="p">(</span><span class="mi">24</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">)).</span><span class="nx">group</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">timeseries</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">if</span> <span class="p">(</span><span class="nx">byMinGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">)</span>   <span class="p">{</span> <span class="k">return</span> <span class="nx">byMinGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">by15MinGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">48</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">by15MinGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">byHourGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">96</span><span class="p">)</span>  <span class="p">{</span> <span class="k">return</span> <span class="nx">byHourGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">by6HourGrp</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">by6HourGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>                             <span class="p">{</span> <span class="k">return</span> <span class="nx">byDayGrp</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// freeze imposes filter on crossfilter that only shows anything older than and including the latest</span>
</span><span class='line'>    <span class="c1">// tweet at the time of calling freeze. Accordingly unfreeze clears the filter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">freeze</span>    <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">]);</span> <span class="p">};</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">unfreeze</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">add</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>     <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="p">};</span>                            <span class="c1">// add new items, as array</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">clear</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">};</span>                             <span class="c1">// reset crossfilter</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">noItems</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">();</span> <span class="p">};</span>                        <span class="c1">// crossfilter size total</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">numPages</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">/</span> <span class="nx">pageSize</span><span class="p">);</span> <span class="p">};</span>  <span class="c1">// number of pages</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// predicates</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweeted</span>     <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;retweeted_status&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mapper functions</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">originalTweet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">formatTweet</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">);</span> <span class="p">};</span>   <span class="c1">// returns original tweet</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweetId</span>       <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span> <span class="p">};</span>                                    <span class="c1">// returns tweet id</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweetCount</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">retweeted</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}</span> <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">maxRetweets</span>   <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span><span class="p">.</span><span class="nx">retweet_count</span> <span class="o">=</span> <span class="nx">retweetCount</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">top</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span> <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">retweeted_status</span><span class="p">.</span><span class="nx">retweet_count</span><span class="p">;</span> <span class="p">}));</span>
</span><span class='line'>        <span class="nx">originalIdDim</span><span class="p">.</span><span class="nx">filterAll</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// deliver tweets for current page. fetches all tweets up to the current page,</span>
</span><span class='line'>    <span class="c1">// throws tweets for previous pages away.</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">tweetPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">currentPage</span><span class="p">,</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">fetchTweets</span><span class="p">(</span><span class="nx">currentPage</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">),</span> <span class="p">(</span><span class="nx">currentPage</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// fetch tweets from crossfilter dimension associated with particular sort order up to the current page,</span>
</span><span class='line'>    <span class="c1">// potentially mapped and filtered</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fetchTweets</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">,</span> <span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span>      <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;latest&quot;</span><span class="p">)</span>    <span class="p">{</span> <span class="k">return</span> <span class="nx">tweetIdDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">);</span> <span class="p">}</span>    <span class="c1">// latest: desc order of tweets by ID</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;followers&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">followersDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">maxRetweets</span><span class="p">);</span> <span class="p">}</span> <span class="c1">// desc order of tweets by followers</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">===</span> <span class="s2">&quot;retweets&quot;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// descending order of tweets by total retweets of original message</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">first</span><span class="p">(</span>               <span class="c1">// filtered to be unique, would appear for each retweet in window otherwise</span>
</span><span class='line'>              <span class="nx">_</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">retweetsDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">size</span><span class="p">()).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">retweeted</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">originalTweet</span><span class="p">),</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">tweetId</span><span class="p">),</span> <span class="nx">pageSize</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[];</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple example is the <strong>followersDim</strong> dimension. The function provided does nothing but return the number of followers of the author of the Tweet. The dimension then provides access to the data set sorted by the followers count.</p>

<p>Dimensions can also be grouped, as can be seen with the different timing dimensions. In order to get all Tweets for a particular time span of say the hour between 4pm and 5pm of a particular day, the creation time for each Tweet is rounded down to the nearest hour and then the dimension is grouped by the hours. This powers the &#8216;Activity by Time Unit&#8217; chart in which the number of Tweets for the current search is broken down into time units of varying length, depending on the total time span.</p>

<h3>ElasticSearch</h3>

<p><strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong> is a distributed open source search engine. The more obvious feature is that it provides full-text search over our entire dataset, which by the time of the writing of this article consists of about ten million tweets.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/bw_expl_elastic1.png" title="image" alt="images"></p>

<p>The less obvious but very useful feature is that of the so called <strong><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html">Percolation Queries</a></strong>. These are kind of reverse searches that allow the registration of an observing real-time search in the percolation index. Each new tweet is then presented to the percolation endpoint of ElasticSearch to determine which of the registered searches match on the new item. This allows us to notify the web clients on each new match for the current search (also see the controller description on the server side above). The IDs of the queries could be generated randomly. I have chosen a different approach here and use SHA-256 hashes of the search text instead. That way each unique query (e.g. &#8220;shutdown beer&#8221;) only ever gets inserted (and matched against) once.</p>

<h3>nginx Proxy</h3>

<p>In a production environment it might make sense to not expose applications to the outside world directly but instead have a reverse proxy in between which responds to all requests and routes the requests to the proper IP-address / port internally.</p>

<p>This can be useful for the following reasons:</p>

<ul>
<li>Load Balancing. The reverse proxy can talk to multiple server backends and distribute the load among them.</li>
<li>Static file serving. Some implementations can serve static files much faster with less overhead than a solution based on the JVM.</li>
<li>SSL encryption. Not all application servers support SSL themselved, but all we need then is a proxy that does.</li>
<li>Using multiple server backend that run on different ports.</li>
<li>Serving multiple domain names.</li>
</ul>


<p>I am using <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> as a reverse proxy for two instances of the application on the same server, one for tech-related stuff <strong><a href="http://birdwatch.matthiasnehlsen.com">birdwatch.matthiasnehlsen.com</a></strong> and the other for things related to US politics <strong><a href="http://beltway.matthiasnehlsen.com">beltway.matthiasnehlsen.com</a></strong>. That works really well, I have found nginx to be rock solid and very fast.</p>

<p>Here is the configuration file:</p>

<figure class='code'><figcaption><span>nginx config nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user www-data;
</span><span class='line'>worker_processes 4;
</span><span class='line'>pid /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 15000;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  proxy_buffering    off;
</span><span class='line'>  proxy_set_header   X-Real-IP $remote_addr;
</span><span class='line'>  proxy_set_header   X-Scheme $scheme;
</span><span class='line'>  proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>  proxy_set_header   Host $http_host;
</span><span class='line'>
</span><span class='line'>  upstream elastic {
</span><span class='line'>    server 127.0.0.1:9200;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen               80;
</span><span class='line'>    keepalive_timeout    70;
</span><span class='line'>    server_name birdwatch.matthiasnehlsen.com;
</span><span class='line'>
</span><span class='line'>    location /tweets/search {
</span><span class='line'>      proxy_pass  http://elastic/birdwatch_tech/tweets/_search;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>      proxy_pass  http://127.0.0.1:9000;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen               80;
</span><span class='line'>    keepalive_timeout    70;
</span><span class='line'>    server_name beltway.matthiasnehlsen.com;
</span><span class='line'>
</span><span class='line'>    location /tweets/search {
</span><span class='line'>      proxy_pass  http://elastic/birdwatch_beltway/tweets/_search;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>      proxy_pass  http://127.0.0.1:9001;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Note the two server blocks in the configuration above for the two separate domains, each of which maps to one backend Play application. It would also be possible to have multiple backends for the same domain name and then let nginx balance the load between the multiple backends. There is only one shared ElasticSearch backend for the two domains, but /tweets/search maps to different indices depending on the domain name. In a development configuration this endpoint would be handled directly by the Play application, but for production I let nginx handle this transparently.</p>

<p>Okay, this concludes the explanation of my <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> toy project. Hope you enjoyed this rather long article. Please let me know if there is any need for clarification.</p>

<p>Cheers,
Matthias</p>

<p><em>You should follow me on Twitter <a href="https://twitter.com/matthiasnehlsen" target="_blank">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BirdWatch v0.2: Tweet Stream Analysis with AngularJS, ElasticSearch and Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/08/13/birdwatch-angularjs-elasticsearch-play/"/>
    <updated>2013-08-13T10:08:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/08/13/birdwatch-angularjs-elasticsearch-play</id>
    <content type="html"><![CDATA[<p>I am happy to get a huge update of the BirdWatch application out of the way. The changes are a lot more than what I would normally have wanted to work in for a single article, but then again there is enough interesting stuff going on in this new version that calls for multiple blog articles. Initially this application was only meant to be an exercise in streaming information to web clients. But along the way I noticed that this application can be useful and interesting beyond being a mere learning exercise. Let me explain what it has evolved to:</p>

<!-- more -->


<p>BirdWatch is an open-source real-time tweet search engine for a defined area of interest, and  I am running a <a target="_blank" href="http://birdwatch.matthiasnehlsen.com"><strong>public instance</strong></a> for software engineering related tweets. The application subscribes to all tweets containing at least one out of a set of terms (such as AngularJS, Java, JavaScript, MongoDB, Python, Scala, …). The application receives all those tweets immediately through the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong>. The limitation here is that the delivery is capped at one percent of all tweets. This is plenty for a well defined area of interest, considering that Twitter processes more than <strong><a href="http://articles.washingtonpost.com/2013-03-21/business/37889387_1_tweets-jack-dorsey-twitter">400 million tweets per day</a></strong>.</p>

<p>Here is how it looks like:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/130812-screenshot.png" title="image" alt="images"></p>

<p>As you can see above, there is now a search bar which allows you to narrow down the selection of tweets the application reasons about. Any search result is bookmarkable, making it easy not only to revisit the search at a later time but also to pass around the link. A link represents the result for the query at the time the link is opened, not at the time it is bookmarked. The application will then load a user-selectable amount of recent tweets matching the search criteria plus any new match for as long as the browser window is open.</p>

<p>Here are some examples.</p>

<p>You&#8217;re a Java developer and you&#8217;re looking for a new job? Try this search: <a target="_blank" href="http://birdwatch.matthiasnehlsen.com/#/(job%20OR%20hiring)%20java"><strong>java (job OR hiring)</strong></a></p>

<p>You want to limit your job search to London? No problem. Here you go: <a target="_blank" href="http://birdwatch.matthiasnehlsen.com/#/(job%20OR%20hiring)%20java"><strong>java (job OR hiring) london</strong></a></p>

<p>You&#8217;re interested in tweets about Python the language but not about <a target="_blank" href="http://www.youtube.com/watch?v=kQFKtI6gn9Y&list=TLbNXOyfwTL14"><strong>Monty Python</strong></a>: <a target="_blank" href="http://birdwatch.matthiasnehlsen.com/#/python%20-monty"><strong>python -monty</strong></a></p>

<p>Well, you get the idea. <strong>AND</strong> is the standard operator, it is applied unless <strong>OR</strong> is specifically used between two terms.</p>

<p>You can download the application and run it for a different area of your choosing. Personally, I&#8217;ve been running an instance that listens to tweets related to U.S. politics, an area I have been interested in ever since I lived in Washington DC in 2009/2010. Usually I have found that a quick look at the application before  watching video podcasts of my favorite political shows would show me what is then talked about in the shows. I may decide to run the application publicly for this interest area at some point as well, but for that I want to have more sophisticated analytics and charts in place. I have plenty of ideas in that area, but for now I want to get this out instead of working on the project by myself for another couple of weeks. I am also looking for contributions here, particularly in the area of great looking and useful charts.</p>

<p>So how can this be improved in the future? A stream of tweets filtered by topic area is a rich data set; the current charts really only scratch the surface of what is possible here. I would like to visualize the most often mentioned links so that I can see at a glance, which newspaper articles and other links are most talked about. This analysis could even be weighted by how many followers the person tweeting about a link has. After all, more followers mean that more people will be exposed to the link. Also there could be some visualizations about how tweets develop over time. What are the characteristics of people retweeting something? Is it picked up by someone with many followers and then later on by many people with few followers? Or is it the other way around? Get involved, there are plenty of options on how to work with the data.</p>

<p>You can find a brief overview of the technology in the project description on <a target="_blank" href="https://github.com/matthiasn/BirdWatch"><strong>Github</strong></a>.</p>

<p>In the future I will probably write some articles that further explain different parts of the application. Let me know what you are particularly interested in.</p>

<p>Alright, this is it for today. Until next time.
Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transforming Log Events into Information]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/07/09/transforming-logs-into-information/"/>
    <updated>2013-07-09T14:14:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/07/09/transforming-logs-into-information</id>
    <content type="html"><![CDATA[<p>Last week I was dealing with an odd behavior of the chat application demo I was running for <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">this article</a></strong>. The issue was timing-related and there were no actual exceptions that would have helped in identifying the problem. How are you going to even notice spikes and pauses in potentially thousands of lines in a logfile? I was upset, mostly with myself for not finding the issue earlier, and I promised myself to find a better tool. I needed a way to transform the raw logging data into useful information so I could first understand and then tackle the problem. In this article I will show what I have put together over the weekend. <strong>Part I</strong> describes the general approach and applies to any application out there, no matter what language or framework you are using. <strong>Part II</strong> describes one possible implementation of this approach using <strong><a href="http://www.playframework.com">Play Framework</a></strong>.</p>

<!-- more -->


<h3>Part I: Mining log data with Kibana and ElasticSearch</h3>

<p>I needed a way to filter events by event type and then visualize the events in a timeline, where vertical bars would indicate the number of items for a given time period. That would have made it immediately obvious that something was causing a delay in the delivery of messages to web clients.</p>

<p>I will be using <strong><a href="http://three.kibana.org">Kibana</a></strong> for this, a tool for analyzing <strong><a href="http://logstash.net">logstash</a></strong> data that is stored within <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>. Let me introduce these components quickly:</p>

<ul>
<li><p><strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong> is a really powerful open-source search engine based on <strong><a href="http://lucene.apache.org/core/">Apache Lucene</a></strong>. I have used it before and I know from experience that it works really well.</p></li>
<li><p><strong><a href="http://logstash.net">logstash</a></strong> is a tool that collects all your logs from any application and transfers them into ElasticSearch from where they can be searched and analyzed.</p></li>
<li><p><strong><a href="http://three.kibana.org">Kibana</a></strong> is a data analysis tool that makes it super simple to create your own dashboards for analyzing logstash data. The latest version is written using <strong><a href="http://angularjs.org">AngularJS</a></strong>.</p></li>
</ul>


<p>While <strong><a href="http://logstash.net">logstash</a></strong> is great for collecting and parsing logfiles and  storing them in a daily index in <strong><a href="http://www.elasticsearch.org">ElasticSearch</a></strong>, there is no good reason to dump the log data into a text file first and then have it parsed later. Instead we can generate <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> in the logstash format directly within an application and put it into ElasticSearch using the <strong><a href="http://www.elasticsearch.org/guide/reference/api/">REST API</a></strong>. It will then be immediately available for analysis within <strong><a href="http://three.kibana.org">Kibana</a></strong>.</p>

<p>Let&#8217;s look at this in action before going into details. We will be using a new branch of <strong><a href="https://github.com/matthiasn/sse-chat/tree/130707-kibana-demo">sse-chat</a></strong> for this. This simple chat application demo is logging the start and end time of SSE streams plus the delivery of individual messages from Romeo and Juliet, more about that <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">here</a></strong>. The data is from actual visits. For privacy reasons I am only logging country and region, not the city and most importantly not the IP address. I do believe that this will leave your privacy as a visitor uncompromised. But please let me know if you have other thoughts on the subject. You can have a look at the <strong><a href="https://github.com/matthiasn/sse-chat">source code</a></strong> if you are interested in what exactly is being logged.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/kibana.png" title="image" alt="images"></p>

<p><strong><a href="http://kibana.matthiasnehlsen.com/#/dashboard/elasticsearch/sse-chat" target="_blank">CLICK HERE</a></strong> to see a live version. The dashboard is interactive, so please play with it.</p>

<p>You can then open the <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/" target="_blank">article with the chat demo</a></strong> in another window. Your visit should show up within the refresh interval, and then again once you either close the window or refresh it.</p>

<p>Here is another dashboard, this one shows all the messages that have been delivered over SSE. This is the one that would have helped me finding the timing issues I have mentioned in the beginning:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/kibana2.png" title="image" alt="images"></p>

<p><strong><a href="http://kibana.matthiasnehlsen.com/#/dashboard/elasticsearch/sse-chat2" target="_blank">CLICK HERE</a></strong> to have a look for yourself.</p>

<p>Note that <strong><a href="http://three.kibana.org">Kibana</a></strong> comes with the tools to configure dashboards as you need them. This really only takes minutes for a simple dashboard and there is no coding involved.</p>

<p>Making this logging approach to logging work is really simple. All you need to do is have your web application generate log data in the proper format and <strong><a href="http://tools.ietf.org/html/rfc2616#section-9.5">POST</a></strong> it into the ElasticSearch index for the current day. This is how your <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> log items could look like if you want to use Kibana out of the box:</p>

<figure class='code'><figcaption><span>JSON item for SSE disconnect </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>  <span class="s2">&quot;_index&quot;</span> <span class="o">:</span> <span class="s2">&quot;logstash-2013.07.07&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_type&quot;</span> <span class="o">:</span> <span class="s2">&quot;play&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_source&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;@source&quot;</span><span class="o">:</span><span class="s2">&quot;sse-chat&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@tags&quot;</span><span class="o">:</span><span class="p">[],</span>
</span><span class='line'>      <span class="s2">&quot;@fields&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;instanceID&quot;</span><span class="o">:</span><span class="s2">&quot;sse-chat&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;request&quot;</span><span class="o">:</span><span class="s2">&quot;GET /chatFeed/room1&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;requestID&quot;</span><span class="o">:</span><span class="mi">64</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;user-agent&quot;</span><span class="o">:</span><span class="s2">&quot;Mozilla/5.0 […]&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;httpCode&quot;</span><span class="o">:</span><span class="mi">200</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;duration_ms&quot;</span><span class="o">:</span><span class="mi">2036</span><span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;@timestamp&quot;</span><span class="o">:</span><span class="s2">&quot;2013-07-07T23:15:12.803Z&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@source_host&quot;</span><span class="o">:</span><span class="s2">&quot;mn.local&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@source_path&quot;</span><span class="o">:</span><span class="s2">&quot;GET /chatFeed/room1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@message&quot;</span><span class="o">:</span><span class="s2">&quot;SSE disconnected&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;@type&quot;</span><span class="o">:</span><span class="s2">&quot;INFO&quot;</span> <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should be fairly easy to generate, with any modern web framework. Logstash uses a daily index for log items. That makes it easy to archive or purge older entries. Kibana makes this transparent, it automatically pulls in the correct indices when a query spans multiple days. Field names starting with &#8216;@&#8217; are predefined by logstash. The predefined fields would be better than textfile-based logging on their own because of the full-text search capabilities within ElasticSearch. It becomes extremely handy once you start making use of &#8216;@fields&#8217;: you can store arbitrary <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> in here and use the fields in the Kibana dashboard later. For example I am storing the geolocation data in here, in addition to data about browser and OS. It can be anything. All of the fields will become available in within Kibana, no further work necessary.</p>

<p>A major advantage of the approach described above is that you can easily integrate all your other logs as well and search them in the same tool. Please refer to the <strong><a href="http://logstash.net/docs/1.1.13/">logstash</a></strong> documentation for that.</p>

<h3>Part II: Implementation using Play Framework and Scala</h3>

<p>Let us implement this in Scala and Play using the <strong><a href="https://github.com/matthiasn/sse-chat/tree/130707-kibana-demo">sse-chat sample application</a></strong>. You may want to stop reading here if you are using a framework other than Play. However, you made it this far; you might as well have a look at an approach with Play Framework. You may find it worth considering for your next project, who knows.</p>

<p>So without further ado, here is the Logger object:</p>

<figure class='code'><figcaption><span>Logger Object (partially) Controller</span><a href='https://github.com/matthiasn/sse-chat/blob/4f118e5e73b17036ab0168ba78faa2061074a259/app/utilities/Logger.scala'>Logger.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** LogStash-format logger, allows passing anything that can </span>
</span><span class='line'><span class="cm"> * be expressed as a JsValue in addition to standard fields</span>
</span><span class='line'><span class="cm"> * @param sourcePath  source path of event </span>
</span><span class='line'><span class="cm"> * @param msg         event message   </span>
</span><span class='line'><span class="cm"> * @param eventType   event type</span>
</span><span class='line'><span class="cm"> * @param fields      arbitrary data as JsValue</span>
</span><span class='line'><span class="cm"> **/</span>
</span><span class='line'><span class="k">def</span> <span class="n">log</span><span class="o">(</span><span class="n">sourcePath</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">eventType</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">fields</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">now</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="nc">DateTimeZone</span><span class="o">.</span><span class="nc">UTC</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">logItem</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;@source&quot;</span> <span class="o">-&gt;</span> <span class="n">instanceID</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@tags&quot;</span> <span class="o">-&gt;</span> <span class="nc">JsArray</span><span class="o">(),</span>
</span><span class='line'>      <span class="s">&quot;@fields&quot;</span> <span class="o">-&gt;</span> <span class="n">fields</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@timestamp&quot;</span> <span class="o">-&gt;</span> <span class="n">dtFormat</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="n">now</span><span class="o">),</span>
</span><span class='line'>      <span class="s">&quot;@source_host&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;mn.local&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@source_path&quot;</span> <span class="o">-&gt;</span> <span class="n">sourcePath</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@message&quot;</span> <span class="o">-&gt;</span> <span class="n">msg</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;@type&quot;</span> <span class="o">-&gt;</span> <span class="n">eventType</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>    <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">elasticURL</span> <span class="o">+</span> <span class="s">&quot;/logstash-&quot;</span> <span class="o">+</span> <span class="n">indexFmt</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="n">now</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;/play&quot;</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="n">logItem</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above I am showing the basic logging functionality. All I am doing is to create a logstash-formatted <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> object and then POSTing it into the ElasticSearch index for the current day. Note that I am using UTC, this is more a personal preference than anything. Kibana will convert this to your local time if you so choose. The Geo-IP lookup is not the topic of this article, but have a look at the full source code, it should be pretty self-explanatory if you understand the code above. I&#8217;d be happy to add a section on this if there is demand.</p>

<p>Eventually I&#8217;d like to make an independent module out of this. First I would like to collect some ideas as to what the functionality should be, though. One thing I want to add is a controller that allows switching individual log events on and off, no matter if the application is run in production or development mode. That would make it possible to peek into a production environment and have fine-grained controlled over which events are logged.</p>

<p>So for now I have integrated the Logger object into a <strong><a href="https://github.com/matthiasn/sse-chat/tree/130707-kibana-demo">new branch of the sse-chat project</a></strong>. Copy and paste that into your own project as you see fit. And please let me know what other functionality you would like to see, I&#8217;ll be happy to integrate it into the planned module.</p>

<p>Cheers,
Matthias</p>

<p><em>You should follow me on Twitter <a href="https://twitter.com/matthiasnehlsen" target="_blank">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Follow-Up: AngularJS and Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/07/03/angularjs-and-play-maintenance/"/>
    <updated>2013-07-03T14:45:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/07/03/angularjs-and-play-maintenance</id>
    <content type="html"><![CDATA[<p>This is the follow-up on last week&#8217;s article about <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">AngularJS and Play Framework</a></strong>. I want to share with you the problems that I encountered on the server side while running the demo as well as my ideas of how to deal with comparable problems more efficiently in the future. I have not encountered any AngularJS-related problems with the chat application so we won&#8217;t deal with it today. I&#8217;ll have more on <strong><a href="http://angularjs.org">AngularJS</a></strong> next week.</p>

<!-- more -->


<h3>So, what was the problem?</h3>

<p>The article was online and the demo was running. Load on the server was not very high, I saw up to 60 users connected at the same time, so really not a load substantial enough that could cause problems. Yet sometimes when I connected, the chat room would load, but messages from the Shakespeare-reciting actors would not be delivered. I first suspected that the actors had crashed and no proper supervision strategy was in place. But there was nothing in the logs. Most of the time, everything did work, and when things didn‘t, I just restarted the server, scratching my head as to what the problem could be. I couldn‘t reproduce the problem in my dev environment, so there was really only one option: debug the system running on the server. Thanks to <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>, restarting a server is not a big deal, the SSE connection will reconnect automatically. Sure, messages that occur between dropped connection and reconnect will be lost, but that‘s not a problem for my demo, and nothing that can‘t be solved if need be.</p>

<p>Still, it doesn‘t feel right to keep inserting the logging code, recompiling and restarting an application in a &#8220;production&#8221; environment that has users connected to it. After experimenting with log levels and putting <strong>println</strong> statements into the code and then observing the shell, I eventually noticed a <strong>connection timeout</strong> error and afterwards a flood of message deliveries to all connected clients. What was going on here?</p>

<p>There was really only one explanation that made any sense to me: occasionally one of the connected clients would not properly disconnect, maybe on a mobile connection, and then that connection would time out after a while. So far so good. But why would that hold up other clients? Could it be that <strong><a href="https://github.com/playframework/Play20/tree/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.broadcast</a></strong> really came to a complete halt when any one of the attached <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumeratee">Enumeratee</a></strong> / <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Iteratee">Iteratee</a></strong> chains took longer than usual? Turns out the answer is yes, unless extra steps are taken. Let‘s look at a simple example. I recommend you fire up the Play / Scala REPL using <strong>play console</strong> and copy &amp; paste the code below:</p>

<figure class='code'><figcaption><span>No Buffer </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.iteratee.</span><span class="o">{</span><span class="nc">Concurrent</span><span class="o">,</span> <span class="nc">Enumeratee</span><span class="o">,</span> <span class="nc">Iteratee</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">channel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee1</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">i</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span> <span class="o">};</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee1: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee1</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee2</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span> <span class="n">i</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee2: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee2</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">50</span><span class="o">)</span> <span class="o">{</span> <span class="n">channel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above we create Enumerator and Channel through Concurrent.broadcast and attach two Iteratees, one of which occasionally puts its thread to sleep for 5 seconds. It holds up the other attached Iteratee as well. That&#8217;s not what I need here. How can we overcome this? By inserting a buffering Enumeratee:</p>

<figure class='code'><figcaption><span>With Buffer </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.iteratee.</span><span class="o">{</span><span class="nc">Concurrent</span><span class="o">,</span> <span class="nc">Enumeratee</span><span class="o">,</span> <span class="nc">Iteratee</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">channel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee1</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">i</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span> <span class="o">};</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee1: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee1</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">iteratee2</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span> <span class="n">i</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;iteratee2: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">out</span> <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;&gt;</span> <span class="n">iteratee2</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">50</span><span class="o">)</span> <span class="o">{</span> <span class="n">channel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the application behaves more like I would expect; individual Iteratees do not hold up everything any longer. Instead the buffering Enumeratee receives the messages, buffers them and frees up Concurrent.broadcast to call the next Iteratee with the current message. The buffer also drops messages when it is full.</p>

<p>Now after adding the buffering Enumeratee to the chat application, everything works just fine, as long as the individual buffers are large enough.</p>

<figure class='code'><figcaption><span>Chat Controller</span><a href='https://github.com/matthiasn/sse-chat/blob/678a02671a63fc50dc0da34ffe452b4f472e972e/app/controllers/ChatApplication.scala'>ChatApplication.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Controller action serving activity based on room */</span>
</span><span class='line'><span class="k">def</span> <span class="n">chatFeed</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">chatOut</span> <span class="o">&amp;&gt;</span> <span class="n">filter</span><span class="o">(</span><span class="n">room</span><span class="o">)</span>
</span><span class='line'>    <span class="o">&amp;&gt;</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span>
</span><span class='line'>    <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How can I handle a problem like this better the next time?</h3>

<p>Unit testing would hardly have helped here, unless we tested for the scenario of an incorrectly closed the WS connection. Better knowledge about the timing of events through better logging would have helped immensely, though. Logging to files is not extremely useful when trying to find anomalies like the aforementioned timeouts and spikes directly thereafter; at least my eyes are not good at detecting this in plain text.</p>

<p>What I would like to have instead is a fully searchable log in a webclient. I am thinking about something like <strong><a href="http://three.kibana.org/about.html">Kibana 3</a></strong>. With graphs as shown in the demo, the problem would have been immediately obvious. Long streaks of smooth delivery and then all of a sudden no messages dispatched to clients for two minutes and then the system catching up with a big spike.</p>

<p>So I am looking into combining <strong><a href="http://three.kibana.org/about.html">Kibana 3</a></strong> with a logging object in Play that receives all loggable events and which, depending on the environment (dev or production), by default either processes them further or not, with further configuration of the defaults for each logging type when specified. The logging object could then also expose an endpoint that allows switching individual loggers on or off during execution, without restarting the application. That way we could easily peek into a running instance in a production environment and watch what is going on, right now. I started working on this and I will present something here soon. Having such a logging system available will be a great help for all projects in the pipeline. I would like to shift my focus back to the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> project rather sooner than later, but first I want to have the right tools in place.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS and Play Framework]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/"/>
    <updated>2013-06-23T14:36:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework</id>
    <content type="html"><![CDATA[<p>I felt a sudden urge to write a <strong><a href="http://bit.ly/sse-chat-github">chat application</a></strong> during <strong><a href="http://scaladays.org">Scala Days</a></strong>. Writing the server side code in <strong><a href="http://www.scala-lang.org">Scala</a></strong> was fun and only took like 30 minutes. The JavaScript part was not nearly as gratifying. Changing the client to <strong><a href="http://angularjs.org">AngularJS</a></strong> over the last couple of days allowed me to reclaim client side development joy.</p>

<!-- more -->


<p><strong>UPDATE 06/27/2013:</strong> Here is how it looks like. <strong><a href="https://github.com/matthiasn/sse-chat/">The source is on GitHub</a></strong>.</p>

<iframe width="420" height="425" src="http://sse-chat.matthiasnehlsen.com/" frameborder="0" allowfullscreen></iframe>


<p>There should be actors randomly reciting Romeo and Juliet in Room 1 above if everything worked, but that&#8217;s not our problem right now. Last month I wrote about <strong><a href="http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets/">Server Sent Events vs. WebSockets</a></strong> and decided to go with SSE for my <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> application. In that application information only flows from server to the client, though, so I wanted proof of the concept that REST style calls are an appropriate way to communicate back with the server.</p>

<p>I challenged myself to write a chat server for this purpose, with 10 lines of code on the server side (or less). I knew this would be possible thanks to the awesome <strong><a href="http://www.playframework.com/documentation/2.1.1/Iteratees">Play Iteratee library</a></strong>:</p>

<figure class='code'><figcaption><span>Chat Controller</span><a href='https://github.com/matthiasn/sse-chat-example/blob/6d39660cca26ce089c6c80238a155ce6610b3684/app/controllers/ChatApplication.scala'>ChatApplication.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ChatApplication</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** Central hub for distributing chat messages */</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">chatOut</span><span class="o">,</span> <span class="n">chatChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Controller action serving chat page */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span> <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="s">&quot;Chat using Server Sent Events&quot;</span><span class="o">))</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Controller action for POSTing chat messages */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">postMessage</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">(</span><span class="n">parse</span><span class="o">.</span><span class="n">json</span><span class="o">)</span> <span class="o">{</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="n">chatChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="n">body</span><span class="o">);</span> <span class="nc">Ok</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Enumeratee for filtering messages based on room */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">filter</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">filter</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="n">json</span> <span class="o">\</span> <span class="s">&quot;room&quot;</span><span class="o">).</span><span class="n">as</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">==</span> <span class="n">room</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Controller action serving activity based on room */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">chatFeed</span><span class="o">(</span><span class="n">room</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="n">chatOut</span> <span class="o">&amp;&gt;</span> <span class="n">filter</span><span class="o">(</span><span class="n">room</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens here is fairly straightforward once we look at the drawing:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-chat.png" title="image" alt="images"></p>

<p>The <strong><a href="https://github.com/playframework/Play20/tree/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent object</a></strong> is the central information hub which provides us with a channel to push JSON into. The messages from all clients are pushed into the chatChannel <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Concurrent$$Broadcaster">Broadcaster</a></strong>. The individual streaming connections then attach an Iteratee to the provided chatOut <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumerator">Enumerator</a></strong>, with <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumeratee">Enumeratees</a></strong>  in between.</p>

<p>What is an <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Iteratee">Iteratee</a></strong>? An Iteratee is a function that represents a single step of an ongoing computation. Any state it might have is immutable; supplying input results in a new function / a new Iteratee. This ongoing computation is driven by an Enumerator which keeps track of the latest step. The Enumerator calls the associated Iteratee function with new input when available and then stores that resulting Iteratee (and so on). The way state is handled is somewhat comparable to a fold function that holds intermediate state in an accumulator using an immutable data structure, with the difference here being that the computation can run over an infinite stream.</p>

<p><strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.iteratee.Enumeratee">Enumeratees</a></strong> are adapters between Enumerators and Iteratees. They allow, for example, type transformation or filtering. The filter Enumeratee makes sure input will only be used when the input matches the criteria, which in this case is the message for the correct chat room for a particular stream / client connection. EventSource provides a transforming Enumeratee for wrapping chunks as Server Sent Events.</p>

<p>In the <strong>chatFeed</strong> function we have a chain of Enumerator and two Enumeratees: <strong>chatOut &amp;> filter(room) &amp;> EventSource()</strong>, which results in a composed Enumerator. We pass this composed Enumerator into Ok.stream, which internally connects the Enumerator with a simple Iteratee. This simple Iteratee does not hold intermediate state; it only does something for each input item: deliver it as a chunk of bytes to the client over the open HTTP connection.</p>

<p>Let&#8217;s visualize this:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-chat2.png" title="image" alt="images"></p>

<p>A message is pushed into the chatChannel and distributed to all attached Iteratees (wrapped by the filter Enumeratee and the EventSource). The message is then sent to the client as a Server Sent Event, but only if the filter predicate evaluates to true.</p>

<h1>AngularJS Client</h1>

<p>I wrote an <strong><a href="https://github.com/matthiasn/sse-chat/blob/0af191e628a450ca8fd4d41bcbff382011cd0a13/app/assets/javascripts/main.js">initial version</a></strong> using jQuery to manipulate the DOM. It worked fine, just getting there wasn&#8217;t really that much fun. I would have liked the expressive greatness of <strong><a href="http://www.playframework.com/documentation/2.1.1/ScalaTemplates">templates in Play</a></strong>, but without having to reload the page every time the model changes.</p>

<p>Last week I started learning AngularJS, so I thought I&#8217;d give it a try. Not only is the resulting code more than 30% smaller, it also is a real pleasure to work with. Dynamic views are written in an extended HTML vocabulary which attaches elements on the page to the $scope, which can be seen as the ViewModel of the application. The views are then automatically updated when the associated data changes.</p>

<figure class='code'><figcaption><span>AngularJS Chat View</span><a href='https://github.com/matthiasn/sse-chat/blob/6d39660cca26ce089c6c80238a155ce6610b3684/app/views/index.scala.html'>index.scala.html </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ChatCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Your Name: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;user&quot;</span> <span class="na">id=</span><span class="s">&quot;userField&quot;</span> <span class="na">value=</span><span class="s">&quot;John Doe&quot;</span>
</span><span class='line'>          <span class="na">ng-model=</span><span class="s">&quot;user&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;select</span> <span class="na">ng-model=</span><span class="s">&quot;currentRoom&quot;</span> <span class="na">ng-change=</span><span class="s">&quot;setCurrentRoom(currentRoom)&quot;</span>
</span><span class='line'>          <span class="na">ng-options=</span><span class="s">&quot;r.name for r in rooms&quot;</span><span class="nt">&gt;&lt;/select&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;chat&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot; msg&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;msg in msgs | limitTo:-10&quot;</span>
</span><span class='line'>        <span class="na">ng-class=</span><span class="s">&quot;msg.user !== user ? &#39;others&#39; : &#39;&#39;&quot;</span>
</span><span class='line'>        <span class="na">data-ng-show=</span><span class="s">&quot;hidden == false&quot;</span> <span class="na">data-ng-hide=</span><span class="s">&quot;hidden == true&quot;</span>
</span><span class='line'>        <span class="na">data-ng-animate=</span><span class="s">&quot;&#39;fadeIn&#39;&quot;</span><span class="nt">&gt;&lt;br/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;strong&gt;</span> says: <span class="nt">&lt;/strong&gt;&lt;br/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;submitMsg()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            Say something: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;chat&quot;</span> <span class="na">id=</span><span class="s">&quot;textField&quot;</span>
</span><span class='line'>              <span class="na">ng-model=</span><span class="s">&quot;inputText&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">id=</span><span class="s">&quot;saySomething&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span>
</span><span class='line'>              <span class="na">ng-click=</span><span class="s">&quot;submitMsg()&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The latest 10 items within <strong>$scope.msgs</strong> are rendered into the &#8220;chat&#8221; div above. The color of each div is also defined in the view by testing if the current user is the sender of the message or by adding CSS class &#8216;others&#8217; if not. No more direct DOM manipulation. Very nice.</p>

<figure class='code'><figcaption><span>AngularJS Chat Controller</span><a href='https://github.com/matthiasn/sse-chat/blob/6d39660cca26ce089c6c80238a155ce6610b3684/app/assets/javascripts/controllers.js'>controllers.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/** Controllers */</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;sseChat.controllers&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;sseChat.services&#39;</span><span class="p">]).</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ChatCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">chatModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">rooms</span> <span class="o">=</span> <span class="nx">chatModel</span><span class="p">.</span><span class="nx">getRooms</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">msgs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">inputText</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="s2">&quot;Jane Doe #&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">rooms</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** change current room, restart EventSource connection */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">setCurrentRoom</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span> <span class="o">=</span> <span class="nx">room</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">chatFeed</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">listen</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** posting chat text to server */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">submitMsg</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/chat&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">inputText</span><span class="p">,</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">time</span><span class="o">:</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toUTCString</span><span class="p">(),</span> <span class="nx">room</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">inputText</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** handle incoming messages: add to messages array */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">addMsg</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">msgs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">));</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** start listening on messages from selected room */</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">listen</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">chatFeed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/chatFeed/&quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentRoom</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">chatFeed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">addMsg</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">listen</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>$scope</strong> is managed by <strong><a href="http://angularjs.org">AngularJS</a></strong> and we define its properties inside the controller, for example <strong>$scope.msgs</strong>, as an empty array. Whenever new messages come in, they are appended to the array, automagically updating the view. Note that manipulations to the data structure that are not triggered by AngularJS itself must be wrapped in an <strong>apply()</strong> call in order to update the UI. That was one of the valuable lessons I learned.</p>

<p>I have to say I am really impressed by AngularJS, it is a great addition to my toolbox. I now feel that client side development will be as much fun as server side development already is with Play Framework. I will probably use this newly gained knowledge in the next version of the <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> application.</p>

<p>If you enjoyed this post, then make sure you&#8217;ll subscribe to my <strong><a href="http://eepurl.com/y0HWv" target="_blank">Newsletter</a></strong>.</p>

<p>There is a <strong><a href="http://matthiasnehlsen.com/blog/2013/07/03/angularjs-and-play-maintenance/">follow-up article</a></strong> with the lessons learned, please check it out if you are interested in the server side problems I encountered while running the demo application.</p>

<p>Cheers, Matthias</p>

<p><em>You should follow me on Twitter <a href="https://twitter.com/matthiasnehlsen" target="_blank">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Days 2013]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/06/10/scala-days-2013/"/>
    <updated>2013-06-10T10:31:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/06/10/scala-days-2013</id>
    <content type="html"><![CDATA[<p><strong><a href="http://scaladays.org">Scala Days 2013</a></strong> are starting at Hudson Theater in New York City today, with a very promising lineup of presentations. Unfortunately I won&#8217;t get to see all of them live as there are three parallel tracks. So far this is my selection of presentations I want to attend.</p>

<!-- more -->


<h3>Monday, June 10th</h3>

<p><strong><a href="https://twitter.com/odersky">Martin Odersky</a></strong> <br/>
Keynote - Scala with Style <br/>
Hudson Theater, 19:00 - 20:30</p>

<h3>Tuesday, June 11th</h3>

<p><strong><a href="https://twitter.com/etorreborre">Eric Torreborre</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/9:15-10:00/A-Walk-Down-the-Beach%2C-How-Kiama-Helps-Implementing-Distributed-Collections-on-Top-of-Hadoop">A Walk Down the Beach, How Kiama Helps Implementing Distributed Collections on Top of Hadoop</a> <br/>
Metropolis, 09:15 - 10:00</p>

<p><strong><a href="https://twitter.com/viktorklang">Viktor Klang</a></strong> &amp; <strong><a href="https://twitter.com/rolandkuhn">Roland Kuhn</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room1/10:15-11:00/Concurrency-%u2013-The-good%2C-the-bad%2C-the-ugly">Concurrency – The good, the bad, the ugly</a><br/>
Room 4.11, 10:15 - 11:00</p>

<p><strong><a href="https://twitter.com/ccsevers">Christopher Severs</a></strong> &amp; <strong><a href="https://twitter.com/BigDataSc">Vitaly Gordon</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/11:15-12:00/Scalable-and-Flexible-Machine-Learning-With-Scala">Scalable and Flexible Machine Learning With Scala</a><br/>
Metropolis, 11:15 - 12:00</p>

<p><strong><a href="https://twitter.com/kevin_j_brown">Kevin Brown</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/13:30-14:15/Big-Data-Analytics-with-Delite">Big Data Analytics with Delite</a><br/>
Metropolis, 13:30 - 14:15</p>

<p><strong><a href="https://twitter.com/matei_zaharia">Matei Zaharia</a></strong> &amp; <strong><a href="https://twitter.com/rxin">Reynold Xin</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/14:30-15:15/The-Spark-Stack%3A-Fast-and-Expressive-Big-Data-Analytics-in-Scala">The Spark Stack: Fast and Expressive Big Data Analytics in Scala</a><br/>
Metropolis, 14:30 - 15:15</p>

<p><strong><a href="https://twitter.com/josh_wills">Josh Wills</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room3/15:30-16:15/Scala-for-Data-Pipelines">Scala for Data Pipelines</a><br/>
Metropolis, 15:30 - 16:15</p>

<p><strong><a href="https://twitter.com/Sadache">Sadache Aldrobi</a></strong>:<br/>
<a href="http://scaladays.org/#/june-11/room1/16:30-17:15/Realtime-Web%2C-The-Urge-for-a-Programming-Model">Realtime Web, The Urge for a Programming Model</a><br/>
Room 4.11, 16:30 - 17:15</p>

<h3>Wednesday, June 12th</h3>

<p><strong><a href="https://twitter.com/springrod">Rod Johnson</a></strong>: <br/>
Keynote - Scala in 2018<br/>
Hudson Theater, 08:45 - 10:00</p>

<p><strong><a href="https://twitter.com/xeno_by">Eugene Burmako</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room1/10:15-11:00/Half-a-Year-in-Macro-Paradise">Half a Year in Macro Paradise</a><br/>
Room 4.11, 10:15 - 11:00</p>

<p><strong><a href="https://twitter.com/andrey_cheptsov">Andrey Cheptsov</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room3/11:15-12:00/Scala-Developer-Tools-in-IntelliJ-IDEA%3A-SBT%2C-Play-and-Scalate">Scala Developer Tools in IntelliJ IDEA: SBT, Play and Scalate</a> <br/>
Metropolis, 11:15 - 12:00</p>

<p><strong><a href="https://twitter.com/philippkhaller">Philipp Haller</a></strong> &amp;
<strong><a href="https://twitter.com/retronym">Jason Zaugg</a></strong>: <br/>
<a href="http://scaladays.org/#/june-12/room1/13:30-14:15/Scala-Async%3A-A-New-Way-to-Simplify-Asynchronous-Code-%28Make-the-Compiler-Do-It%21%29">Scala Async: A New Way to Simplify Asynchronous Code</a><br/>
Room 4.11, 13:30 - 14:15</p>

<p><strong><a href="https://twitter.com/tathadas">Tathagata Das</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room2/14:30-15:15/Spark-Streaming%3A-Fast-Distributed-Stream-Processing-with-a-High-Level-API">Spark Streaming: Fast Distributed Stream Processing with a High-Level API</a><br/>
Room 3.11, 14:30 - 15:15</p>

<p><strong>Rex Kerr</strong>:<br/>
<a href="http://scaladays.org/#/june-12/room2/15:30-16:15/Designing-for-performance">Designing for performance</a><br/>
Room 3.11, 15:30 - 16:15</p>

<p><strong><a href="https://twitter.com/sjrdoeraene">Sébastien Doeraene</a></strong>:<br/>
<a href="http://scaladays.org/#/june-12/room2/16:30-17:15/Scala.js%3A-write-in-Scala-for-the-browser">Scala.js: write in Scala for the browser</a><br/>
Room 3.11, 16:30 - 17:15</p>

<p>In the next couple of days I will write about presentations and topics I found particularly inspiring.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Play applications with ZeroMQ]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/06/02/scaling-play-applications-with-zeromq/"/>
    <updated>2013-06-02T07:48:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/06/02/scaling-play-applications-with-zeromq</id>
    <content type="html"><![CDATA[<p>Let us assume for a second that the <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> application needed to handle more load than a single server could handle. The current version could not just be run as multiple instances because then each one would establish a connection to Twitter, of which there is supposed to be only one per application. It would work to split the application into a TwitterClient part and a user-facing controller part, of which multiple instances could run as needed. How do we connect these separate parts of the application though?</p>

<!-- more -->


<p>One possible approach is using an HTTP stream between the parts as well, basically using the TwitterClient application as a hub for delivering the Twitter stream to multiple instances as needed. While this works, it is not an elegant solution: how do I handle reconnects? How do I even detect them? I&#8217;d rather not deal with this.</p>

<p>An Akka cluster should work. This approach seems more promising, as all the messaging elements are already there. But this does not offer the best possible flexibility, as it requires all participants to use Akka / the JVM / the same version of Scala. I&#8217;d rather not limit myself to one technology stack if not absolutely necessary.</p>

<p>I would prefer a solution that is completely agnostic of the technology each building block of the whole application uses. I might want to run statistics using <strong><a href="http://www.numpy.org">numpy</a></strong> in the future or whatever. This should be possible without much glue code. HTTP is obviously technology independent but it falls short due to the reconnect issues.</p>

<p>Turns out there is a great solution for polyglot applications: <strong><a href="http://www.zeromq.org/">ZeroMQ</a></strong>, a socket toolbox offering bindings for <strong><a href="http://zguide.zeromq.org/page:all">30+ languages</a></strong>. Unlike broker-centered JMS or RabbitMQ, ZeroMQ is a messaging library, not a full messaging solution. There are no brokers; instead we get access to TCP sockets (fast) that we can use to build complex communication patterns. I cannot say it any better than this:</p>

<blockquote><p>What ZeroMQ does is create an API that looks a lot like sockets, and feels the same, but gives you the messaging styles you actually want. By simply specifying the type of socket when you call zmq_socket you can have multicast, request/reply, and many other styles.</p><footer><strong>Zed Shaw on ZeroMQ</strong> <cite><a href='http://www.zeromq.org/intro:read-the-manual'>www.zeromq.org/&hellip;</a></cite></footer></blockquote>


<p>Please check out these articles for more in-depth information about ZeroMQ:</p>

<ul>
<li><strong><a href="http://nichol.as/zeromq-an-introduction">ZeroMQ an introduction, by Nicholas Piël</a></strong></li>
<li><strong><a href="http://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">ZeroMQ: Modern &amp; Fast Networking Stack, by Ilya Grigorik</a></strong></li>
<li><strong><a href="http://www.josetteorama.com/zeromq/">The Appeal and Controversy of ZeroMQ, by Pieter Hintjens</a></strong></li>
</ul>


<p>Let us put ZeroMQ to practical use. First thing to do is to install ZeroMQ. One thing to note is that the current Scala bindings require ZeroMQ version 2. On a Mac with homebrew installed you can do this (or refer to the <strong><a href="http://www.zeromq.org/area:download">ZeroMQ instructions</a></strong>):</p>

<figure class='code'><figcaption><span>Installing ZeroMQ (Mac) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install zeromq
</span><span class='line'>brew switch zeromq 2.2.0
</span></code></pre></td></tr></table></div></figure>


<p>For demonstration purposes I will publish and consume all messages from within the same application. I&#8217;m actually working on a more sophisticated version of the BirdWatch application that uses ZeroMQ between different applications running in separate JVMs, but more about that another time. For now I will split the TwitterClient class into separate TweetsPublisher and TweetsConsumer classes within the same application and let them communicate using ZeroMQ publish/subscribe topics. Check out this <strong><a href="https://github.com/matthiasn/BirdWatch/tree/130602-ZeroMQ">branch</a></strong> on GitHub.</p>

<figure class='code'><figcaption><span>TweetsPublisher</span><a href='https://github.com/matthiasn/BirdWatch/blob/980916bcecb7c65e34a1a1c983eb02ccede00674/app/actors/TweetsPublisher.scala'>TweetsPublisher.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** ZeroMQ Publishing Socket (clients attach to this). Specify IP </span>
</span><span class='line'><span class="cm"> *  address or use *:PORT if you want this open to outside world.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetPubSocket</span> <span class="k">=</span> <span class="nc">ZeroMQExtension</span><span class="o">(</span><span class="n">system</span><span class="o">).</span><span class="n">newSocket</span><span class="o">(</span><span class="nc">SocketType</span><span class="o">.</span><span class="nc">Pub</span><span class="o">,</span>
</span><span class='line'>  <span class="nc">Bind</span><span class="o">(</span><span class="s">&quot;tcp://127.0.0.1:21231&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Send message to socket (yes, it is that simple)*/</span>
</span><span class='line'><span class="n">tweetPubSocket</span> <span class="o">!</span> <span class="nc">ZMQMessage</span><span class="o">(</span><span class="nc">Seq</span><span class="o">(</span><span class="nc">Frame</span><span class="o">(</span><span class="s">&quot;birdwatch.tweets&quot;</span><span class="o">),</span> <span class="nc">Frame</span><span class="o">(</span><span class="n">json</span><span class="o">.</span><span class="n">toString</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>TweetsConsumer</span><a href='https://github.com/matthiasn/BirdWatch/blob/980916bcecb7c65e34a1a1c983eb02ccede00674/app/actors/TweetsConsumer.scala'>TweetsConsumer.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Actor listening to Tweets socket */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TweetsListener</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">ZMQMessage</span> <span class="o">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="cm">/** payload is Array[Byte], make String and parse into JSON*/</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="n">payload</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/** read into Tweet case class representation, push onto channel */</span>
</span><span class='line'>      <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">JsError</span> <span class="o">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Socket with attached listener */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetsListener</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">TweetsListener</span><span class="o">()),</span> <span class="s">&quot;TweetsListener&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetsSocket</span> <span class="k">=</span> <span class="nc">ZeroMQExtension</span><span class="o">(</span><span class="n">system</span><span class="o">).</span><span class="n">newSocket</span><span class="o">(</span><span class="nc">SocketType</span><span class="o">.</span><span class="nc">Sub</span><span class="o">,</span>
</span><span class='line'>  <span class="nc">Listener</span><span class="o">(</span><span class="n">tweetsListener</span><span class="o">),</span> <span class="nc">Connect</span><span class="o">(</span><span class="s">&quot;tcp://127.0.0.1:21231&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nc">Subscribe</span><span class="o">(</span><span class="s">&quot;birdwatch.tweets&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This additional layer of indirection opens up a wide range of possibilities. Scaling becomes straightforward, we can attach pretty much as many of the client-facing controller applications (once split up) to the Tweet publishing application, without even having to individually configure them. Have them all point to the same publishing socket, spread the load using for example <strong><a href="http://wiki.nginx.org/Main">nginx</a></strong> and you&#8217;re done.</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/zeromq.png" title="image" alt="images"></p>

<p>We can also swap individual parts of the application for better ones. I personally do not like the current approach to consuming the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> as used in <strong><a href="https://github.com/matthiasn/BirdWatch/blob/980916bcecb7c65e34a1a1c983eb02ccede00674/app/actors/TweetsPublisher.scala">TweetsPublisher.scala</a></strong> and I would like to replace it with the <strong><a href="https://dev.twitter.com/blog/the-hosebird-client-streaming-library">Twitter Hosebird Client (hbc)</a></strong>. If folks at Twitter have developed this for usage in their own projects, I have no doubt they can do this much better than my simple reconnect strategy possibly could. Last time I checked, hbc was not compatible with Scala version 2.10 used in Play 2.1 though, but thanks to ZeroMQ, the library can be run in its native habitat (Java application without having to worry about which version of Scala is used in some embedded library) and publish Tweets onto a ZeroMQ socket. The TweetsConsumer then would only have to point to another socket address. Anyone experienced with using ZeroMQ in a Java application interested in writing this client?</p>

<p>-Matthias</p>

<p><em>You should follow me on Twitter <a href="https://twitter.com/matthiasnehlsen" target="_blank">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making BirdWatch Interactive]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/26/making-birdwatch-interactive/"/>
    <updated>2013-05-26T20:45:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/26/making-birdwatch-interactive</id>
    <content type="html"><![CDATA[<p>Some weeks ago when I started working on the <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> project, I basically wanted to play around with Iteratees and stream information to the browser, any information. But in the meantime, I have become more excited in making Tweet visualizations useful and interesting. First I needed to move the reasoning over to the client though because the server side reasoning did not scale well at all. In the latest update I address both client-side reasoning and the first steps in making the application interactive.</p>

<!-- more -->


<p>My other application on GitHub, <strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong>, was quite useful in identifying where the scalability problem was. When getting as many as 1% of all Tweets from Twitter, which is the current limit for the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> without some extra agreement with Twitter (amounting to 3-4 million Tweets a day), server-side calculations for each client connection only allowed somewhere between ten and twenty concurrent connections whereas moving the calculations over to the client side now allows about 600 concurrent connections to a single server under the same load.</p>

<p>With that problem out of the way, I also added interactive functionality where the words in the word cloud and in the bar chart are now clickable, allowing drilling into the data. Currently this works with a logical AND. Only previous and live Tweets are now shown that contain all of the search words. The queries are resources that can be bookmarked, with the query encoded in the URL, comparable to a Google search.</p>

<p>Ok, this is becoming a little more interesting than the previous version where the observer did not have any influence over what was shown on the screen. I have used the current version of <strong><a href="http://bit.ly/BirdWatch">BirdWatch</a></strong> for following Tweets about the Champions League final between Bayern München and Borussia Dortmund at Wembley stadium (besides the TV, of course):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/champions_league.png" title="image" alt="images"></p>

<p>It was interesting to see a correlation between events in the game and the teams being mentioned in the Tweets. But that experience also showed me what is missing and could be addressed in a future version: a time component. I would find it interesting to track words and hashtags over time. That will be much more interesting and shall come in a future version.</p>

<p>Let&#8217;s look at a few implementation details in the current version:</p>

<h4>Filter Enumeratee</h4>

<p>Tweets from the TwitterClient are delivered to connected clients using a channel and enumerator provided by Concurrent.broadcast in the Play Iteratee API.</p>

<figure class='code'><figcaption><span>Tweet Enumerator</span><a href='https://github.com/matthiasn/BirdWatch/blob/74fbdfa568bbcc3f4c6c14de45b70a8bd6e828dc/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** system-wide channel / enumerator for attaching SSE streams to clients*/</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">tweetsOut</span><span class="o">,</span> <span class="n">tweetChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Tweets are from there fed into the EventSource object which acts as a simple Iteratee that does nothing more than generate a chunked HTTP response, with &#8220;data: &#8221; prepended to every piece of data (Tweets as <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> in this case), like this:</p>

<figure class='code'><figcaption><span>One Tweet via SSE </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;tweet_id&quot;</span><span class="o">:</span><span class="mi">339406567420080130</span><span class="p">,</span><span class="s2">&quot;img_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://a0.twimg.com/profile_images/3669634376/302cdf34520f1ffd45395438da689c3f_normal.jpeg&quot;</span><span class="p">,</span><span class="s2">&quot;profile_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://twitter.com/muhammadmucin&quot;</span><span class="p">,</span><span class="s2">&quot;screen_name&quot;</span><span class="o">:</span><span class="s2">&quot;muhammadmucin&quot;</span><span class="p">,</span><span class="s2">&quot;text&quot;</span><span class="o">:</span><span class="s2">&quot;RT @Milanello: Video: Nesta vs. Juventus (Champions League final in 2003): http://t.co/heGrklYXo6 #TempestaPerfettaNesta&quot;</span><span class="p">,</span><span class="s2">&quot;followers&quot;</span><span class="o">:</span><span class="mi">361</span><span class="p">,</span><span class="s2">&quot;words&quot;</span><span class="o">:</span><span class="mi">13</span><span class="p">,</span><span class="s2">&quot;chars&quot;</span><span class="o">:</span><span class="mi">120</span><span class="p">,</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="mi">1369755806000</span><span class="p">,</span><span class="s2">&quot;hashtags&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;text&quot;</span><span class="o">:</span><span class="s2">&quot;TempestaPerfettaNesta&quot;</span><span class="p">,</span><span class="s2">&quot;indices&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">98</span><span class="p">,</span><span class="mi">120</span><span class="p">]}],</span><span class="s2">&quot;user_mentions&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;screen_name&quot;</span><span class="o">:</span><span class="s2">&quot;Milanello&quot;</span><span class="p">,</span><span class="s2">&quot;indices&quot;</span><span class="o">:</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">13</span><span class="p">]}],</span><span class="s2">&quot;urls&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;url&quot;</span><span class="o">:</span><span class="s2">&quot;http://t.co/heGrklYXo6&quot;</span><span class="p">,</span><span class="s2">&quot;expanded_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://sulia.com/milanello/f/43a24f3c-54e5-48ba-9653-508476c3fbc0/&quot;</span><span class="p">,</span><span class="s2">&quot;display_url&quot;</span><span class="o">:</span><span class="s2">&quot;sulia.com/milanello/f/43â€¦&quot;</span><span class="p">}],</span><span class="s2">&quot;timeAgo&quot;</span><span class="o">:</span><span class="s2">&quot;367 ms ago&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I already used a transforming Enumeratee before, for transforming Tweets in case class form into <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>. It is very simple to put another Enumeratee into this chain for filtering only those Tweets that contain the desired search words:</p>

<figure class='code'><figcaption><span>Enumerator | Enumeratees | Iteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/74fbdfa568bbcc3f4c6c14de45b70a8bd6e828dc/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Enumeratee: Tweet to JsValue adapter */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetToJson</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">t</span> <span class="k">=&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Tests if all comma-separated words in q are contained in Tweet.text  */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">containsAll</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">tokens</span> <span class="k">=</span> <span class="n">q</span><span class="o">.</span><span class="n">toLowerCase</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">matches</span> <span class="k">=</span> <span class="n">tokens</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">token</span><span class="o">)</span> <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">toLowerCase</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">token</span><span class="o">)</span> <span class="k">=&gt;</span>  <span class="n">acc</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">token</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">matches</span> <span class="o">==</span> <span class="n">tokens</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Filtering Enumeratee applying containsAll function*/</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">textFilter</span><span class="o">(</span><span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">filter</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=&gt;</span> <span class="n">containsAll</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">q</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Serves Tweets as Server Sent Events over HTTP connection */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">tweetFeed</span><span class="o">(</span><span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">RequestLogger</span><span class="o">.</span><span class="n">log</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="s">&quot;/tweetFeed&quot;</span><span class="o">,</span> <span class="mi">200</span><span class="o">)</span>
</span><span class='line'>      <span class="nc">Ok</span><span class="o">.</span><span class="n">stream</span><span class="o">(</span><span class="nc">TwitterClient</span><span class="o">.</span><span class="n">tweetsOut</span>
</span><span class='line'>        <span class="o">&amp;&gt;</span> <span class="n">textFilter</span><span class="o">(</span><span class="n">q</span><span class="o">)</span>
</span><span class='line'>        <span class="o">&amp;&gt;</span> <span class="n">tweetToJson</span>
</span><span class='line'>        <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The filtering Enumeratee above is nothing more than a convenient way to run a predicate function on every data item and pass data down the chain only when the predicate function evaluates to true.</p>

<h4>Queries as bookmarkable resources</h4>

<p>Queries against the system are now represented by a particular URL that encodes the query string. This URL represents the resource of that particular query within a stream of Tweets at the time of the request. Examples: <strong><a href="http://bit.ly/bw_dortmund_bayern">Dortmund AND Bayern</a></strong> or <strong><a href="http://bit.ly/wembley_soccer">Wembley AND soccer</a></strong>.</p>

<h4>No more image processing</h4>

<p>Initially I was playing around with image processing on the server side. But once that was working with a supervised actor hierarchy, it really wasn&#8217;t all that interesting any more. I know that I can easily process 4 million of the large Twitter profile images a day without putting substantial load on my quadcore server. That&#8217;s what I wanted to know. Other than that, the images were littering my harddrive space, without being useful enough for me to keep them. I removed that functionality from the application.</p>

<h4>Client-side Wordcount implementation in Coffeescript</h4>

<p>I wanted to move the Wordcount functionality into the client when I discovered that <strong><a href="http://www.playframework.com">Play Framework</a></strong> comes with nice features for <strong><a href="http://www.playframework.com/documentation/2.1.1/AssetsCoffeeScript">compiling CoffeeScript into JavaScript</a></strong>. I have done a little bit with <strong><a href="http://coffeescript.org">CoffeeScript</a></strong> in the past and I remembered finding it pleasant enough to give it another try. But that will be the topic for a future article.</p>

<h4>Performance of the current version</h4>

<p>Right before the Champions League final, I measured the performance for the search words I had selected for the game. At that time I was receiving about 4 Tweets per second, which I was then able to simultaneously stream to 10,000 clients (using <strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong>).</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/champions_league_10k.png" title="image" alt="images"></p>

<p>Not too bad, I&#8217;m very glad the <strong><a href="http://www.playframework.com">Play Framework</a></strong> does not spawn a thread for every single one of those connections. I have not filtered those Tweets but instead delivered all Tweets to all clients. It remains to be seen how much of a performance hit the matching algorithm will incur.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3.js and Play Framework: Getting Started]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/18/using-d3js-with-play/"/>
    <updated>2013-05-18T13:21:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/18/using-d3js-with-play</id>
    <content type="html"><![CDATA[<p>Data without visualization is dull. This is particularly true for changing data. We seem to be much better at noticing moving things than we are at noticing changes between spreadsheet cells or other text. That&#8217;s okay. I&#8217;m actually a big fan of that. Text does not usually threaten to run me over when I attempt to cross a street. So let&#8217;s create moving things with <strong><a href="http://d3js.org">D3.js</a></strong> and drive the animation reactively with data from a server written in <strong><a href="http://www.scala-lang.org">Scala</a></strong> using the <strong><a href="http://www.playframework.com">Play Framework</a></strong>.</p>

<!-- more -->


<p>In the <strong><a href="http://bit.ly/sse_load_testing">last article</a></strong> I have introduced <strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong>, a load testing tool for <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Event (SSE)</a></strong> streams. With that tool I gather data that I want to present in the browser using animated barcharts:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-perf-screenshot.png" title="image" alt="images"></p>

<p>Creating the animated barchart is a little more involved. Let us start with something really simple today. Luckily I have a problem to solve that calls for a simple animation:
<strong><a href="http://bit.ly/sse-perf">sse-perf</a></strong> when running might or might not have have established connections hitting a server. If it does, it becomes immediately obvious that the connection to the <strong><a href="http://bit.ly/sse-perf-live">sse-perf server</a></strong> is alive because the bars are animated. What if there are no client connections and thus there is nothing to report except zero values? I can have these zeros fly into the chart instead of the bars, but that looks really awful, I&#8217;ve tried it. But without anything moving, the connection looks dead. What do I do?</p>

<p>How about a visual heartbeat? Just a simple red dot that gets bigger when a new Server Sent Event is received and then shrinks to normal size again. This succeeds in convincing me that what I am looking at is still alive:</p>

<iframe width="40" height="40" src="http://matthiasnehlsen.com/iframes/heartbeat.html" frameborder="0" allowfullscreen></iframe>


<p>Let&#8217;s implement that and drive it by a Server Sent Event stream. First of all, we need a div that will hold our animation which we can style and position by css however we like:</p>

<figure class='code'><figcaption><span>heartbeat div</span><a href='https://github.com/matthiasn/sse-perf/blob/f0feae4d2a82c136eb351d2a99e18b12f8e2f953/app/views/metrics.scala.html'>from metrics.scala.html</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;heartbeat&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  @helper.requireJs(core = routes.Assets.at(&quot;javascripts/require.js&quot;).url,
</span><span class='line'>        module = routes.Assets.at(&quot;javascripts/main&quot;).url)
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>#heartbeat css</span><a href='https://github.com/matthiasn/sse-perf/blob/f0feae4d2a82c136eb351d2a99e18b12f8e2f953/public/stylesheets/main.css'>from main.css </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#heartbeat</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="m">530px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us put all JavaScript in modules conforming to the <strong><a href="http://requirejs.org/docs/whyamd.html">require.js / AMD pattern</a></strong>. This prevents global namespace pollution, potentially loads faster and makes for a cleaner design. <strong><a href="http://www.playframework.com/documentation/2.1.0/RequireJS-support">Play handles</a></strong> loading the JavaScript with require.js for us with @helper.requireJs.</p>

<p>The best thing with this approach is probably that Play will now run the closure compiler over our JavaScript code and show problems immediately by failing the build:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/closure_comp_err.png" title="image" alt="images"></p>

<p>Sweet! Here are the excerpts of the JavaScript code that we need for the heartbeat. Full code is available on <strong><a href="http://bit.ly/sse-perf">GitHub</a></strong> as usual.</p>

<figure class='code'><figcaption><span>main.js (require.js compatible)</span><a href='https://github.com/matthiasn/sse-perf/blob/f0feae4d2a82c136eb351d2a99e18b12f8e2f953/app/assets/javascripts/main.js'>from main.js</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s2">&quot;barchart&quot;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chart</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">heartbeat</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#heartbeat&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">feed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s2">&quot;/metricsFeed&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">heartbeat</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">700</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">feed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We draw the dot first. Using the global d3 object, we select our #heartbeat div, append an <strong><a href="https://de.wikipedia.org/wiki/Scalable_Vector_Graphics">svg</a></strong> of size 20px by 20px, append a circle at x=10px, y=10px, give it a radius of 3px and fill it red. Thanks to <strong><a href="http://bit.ly/chaining-methods">method chaining</a></strong>, the D3 code almost reads like prose.</p>

<p>We then establish an EventSource(&#8220;/metricsFeed&#8221;) connection to the metrics feed and assign a handler function as an event listener to the &#8220;message&#8221; event. <strong><a href="http://bit.ly/113clAb">See the stream for yourself</a></strong>.  We can use the handler function to trigger the animation.</p>

<p>Once again, the D3 code reads like a sentence: using the heartbeat object created above, we transition the radius from the initial 3px to 7px, to 3px, to 6px and back to 3px, all of these with a duration of 700ms each.</p>

<p>The stream I use as a trigger has data every 3 seconds. I found that it looks <strong><a href="http://en.wikipedia.org/wiki/Bradycardia">unhealthy</a></strong> if the heartbeat only animates 20 times a second, so I do the expansion / contraction cycle twice on each event. <strong><a href="http://d3js.org">D3.js</a></strong> is great; it has a bit of a learning curve but it is well worth it because it will give you full control over everything you could possibly want to tweak on your page.</p>

<p>This is it for today, check back for more elaborate examples in the future. If you haven&#8217;t already, how about you <strong><a href="http://matthiasnehlsen.us7.list-manage1.com/subscribe/post?u=798fd7b50a1d9cc58be41c2af&amp;id=eb7a7193c5">subscribe to the mailing list</a></strong> so you won&#8217;t miss anything?</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Testing Server Sent Event Streams]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/11/load-testing-server-sent-event-streams/"/>
    <updated>2013-05-11T22:07:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/11/load-testing-server-sent-event-streams</id>
    <content type="html"><![CDATA[<p><strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> turned out to be a great choice for what I am <strong><a href="http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets/">trying to achieve</a></strong>. Let&#8217;s review that quickly. I want to transmit information in the form of <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> containing information about Tweets to browsers, as fast as possible, with much less information flowing the other direction. Now I needed to benchmark the &#8220;as fast as possible&#8221; part so I would be more informed for future architectural decisions. For this I have started <strong><a href="https://github.com/matthiasn/sse-perf">sse-perf</a></strong>: a reactive web application that consumes many (like thousands) concurrent SSE streams and then animates the results (MB transferred, messages / chunks per second and such) using <strong><a href="http://d3js.org">D3.js</a></strong>.</p>

<!-- more -->


<p>In the current version of the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> the major part of the statistical reasoning is done on the server side, individually for each client. That is not a good idea, it just happened because I had some of the code lying around, and that was in Scala so the options were server side or re-write. I chose server-side, knowing that this technical debt would have to be addressed at some point. First of all I needed metrics on how bad the situation actually was. I found a search word that guarantees high traffic up to the &#8220;1% of all Tweets at the time&#8221; limit imposed by Twitter: &#8220;love&#8221;. At least at all times I have tested it, this cute word will saturate your <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> connection, unless you have a special agreement with them. This amounts to about 35 Tweets per second or approximately 3,000,000 Tweets per day. Any modern server should easily be able to process this number of messages and distribute them to a large number of clients, hundreds of them at the same time. Unlike <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connections, <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong> streams are easy to test; it is just an HTTP connection that delivers data not at once but one chunk at a time, like this:</p>

<figure class='code'><figcaption><span>One Tweet via SSE </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;tweet_id&quot;</span><span class="o">:</span><span class="mi">334409665431625728</span><span class="p">,</span><span class="s2">&quot;img_url_local&quot;</span><span class="o">:</span><span class="s2">&quot;/images/334409665431625728.png&quot;</span><span class="p">,</span><span class="s2">&quot;img_url&quot;</span><span class="o">:</span><span class="s2">&quot;http://a0.twimg.com/profile_images/3637039114/94d639a38a9040b32397642cddbf685f_normal.jpeg&quot;</span><span class="p">,</span><span class="s2">&quot;screen_name&quot;</span><span class="o">:</span><span class="s2">&quot;Official_TMC101&quot;</span><span class="p">,</span><span class="s2">&quot;text&quot;</span><span class="o">:</span><span class="s2">&quot;This week Daft Punk holds the number 1 spot with Get Lucky @DaftPunk_Online #getlucky&quot;</span><span class="p">,</span><span class="s2">&quot;followers&quot;</span><span class="o">:</span><span class="mi">34</span><span class="p">,</span><span class="s2">&quot;words&quot;</span><span class="o">:</span><span class="mi">14</span><span class="p">,</span><span class="s2">&quot;chars&quot;</span><span class="o">:</span><span class="mi">85</span><span class="p">,</span><span class="s2">&quot;timestamp&quot;</span><span class="o">:</span><span class="mi">1368564451000</span><span class="p">,</span><span class="s2">&quot;timeAgo&quot;</span><span class="o">:</span><span class="s2">&quot;1 sec 141 ms ago&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see this yourself by opening the Tweet stream on my <strong><a href="http://birdwatch.matthiasnehlsen.com/tweetFeedCF">BirdWatch server</a></strong>. This is one of the streams from a much-extended version of BirdWatch that I&#8217;ve been working on in the meantime, which allows interacting with the data in interesting ways on the client side. This version is not ready for publishing yet, but I expect to have something to show fairly soon. Pushing the Tweets to the client and reasoning about the data there was already decided on, and benchmarking confirmed how problematic the old solution was. At first I used wget in different terminal sessions with the URL of the link above, and I would max out the CPU with tens of concurrent connections already when consuming the full 1% of Tweets. That is orders of magnitude less than what I expect from a modern server, but completely makes sense when looking at what heavy work the server actually has to perform.</p>

<p>So I started working on delivering streams for client side reasoning. That fixed exactly what I expected it to fix, allowing orders of magnitude more concurrent connections. But now opening many terminal sessions was a much less appealing workaround. I looked around for testing tools a little and soon realized that writing a reactive web application for load testing myself would be a good learning exercise, and it would also give me the opportunity for some more experience in using <strong><a href="http://d3js.org">D3.js</a></strong> for animating the results. This it what it looks like (but with animated bar charts showing live data):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/sse-perf-screenshot.png" title="image" alt="images"></p>

<p>I have put the code on <strong><a href="https://github.com/matthiasn/sse-perf">GitHub</a></strong> and I also run it live, putting a load of 1,500 connections on the BirdWatch server, in production. The server is not processing the full 1% stream though, and with the current load the 1,500 connections only cause a CPU utilization of 40-60% in <strong><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/top.1.html">top</a></strong> (out of possible 800% on a quadcore machine with HyperThreading). With the full 1% stream from Twitter I can currently connect up to 700 to 800 concurrent connections without adding significant delay, thus delivering about 1.8 Billion messages a day. That sounds much more like what I was looking for. I have found that the messages per second max out at around 28,000. If these are reached then additional clients will still get the messages but they will queue up more and more. I have found that the server recovers after decreasing the number of concurrent connections, allowing all messages to be delivered to the connected clients eventually. This makes the server fail on overload very gracefully.</p>

<p><strong><a href="http://birdwatch.matthiasnehlsen.com:9001">Have a look for yourself</a></strong>. Changing the load on the server requires authentication, but you will surely find this out yourself.</p>

<p>In the next posts I will introduce animating live streaming data on the client and also share what I have learned when establishing thousands of connections at the same time, using <strong><a href="http://www.playframework.com/documentation/api/2.1.1/scala/index.html#play.api.libs.ws.WS$">WS</a></strong> from the <strong><a href="http://www.playframework.com">Play Framework</a></strong>. Let me know which one you would like to read first.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Sent Events vs. WebSockets]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets/"/>
    <updated>2013-05-01T14:59:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets</id>
    <content type="html"><![CDATA[<p>So far I have been using a <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connection to push data to the client in the <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong> application, with mixed feelings. <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> communication is a separate communication protocol from <strong><a href="http://tools.ietf.org/html/rfc2616">HTTP</a></strong>, introducing new problems in the network layer, as I should soon find out. But there is an alternative: <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>.</p>

<!-- more -->


<p>For <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>, I wanted to experiment with having a proxy between the outside world and the Play application:</p>

<ul>
<li><strong>Security</strong>: the application is not directly exposed to outside world, authentication and encryption could be done at proxy layer</li>
<li><strong>Caching</strong>: Play is designed for dynamic content, I&#8217;d rather let a proxy handle and cache static files</li>
<li><strong>Load-Balancing</strong>: the proxy can distribute load among many instances of Play, also providing failover automatically</li>
</ul>


<p>My choice for the proxy was <strong><a href="http://nginx.org/en/">Nginx</a></strong>, which as I should soon learn does not support WebSocket proxying in the current stable release. Supposedly newer <strong><a href="http://nginx.org/en/docs/http/websocket.html">development versions</a></strong> would support it, so I compiled the latest version from source and installed Nginx on my Ubuntu server. It did work when accessing the remote server from my devices, but for some reason whenever I asked other people to try the link I sent them, their WebSocket connection did not establish. I tried to find the problem for a short while but soon realized that I was more interested in developing my own application than in debugging my attempt at a WebSocket proxy configuration in a beta version of <strong><a href="http://nginx.org/en/">Nginx</a></strong>.</p>

<p>Why did I want to use WebSockets in the first place? The protocol promises fast, bi-directional communication between client and server. Looking at my application, that is not exactly the requirement though. I need the fastest possible way of delivering lots of <strong><a href="https://tools.ietf.org/html/rfc4627">JSON</a></strong> data from the server to the client. The opposite is not true though. In the other direction, there will only be occasional control messages, nothing that could not be handled by <strong><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">REST</a></strong> style web service calls. REST web service calls are actually much nicer semantically for interacting with the application, as there is a rich set of <strong><a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP verbs / methods</a></strong> with meaning (<strong>GET</strong>, <strong>PUT</strong>, <strong>POST</strong>, <strong>DELETE</strong>) and also a rich set of <strong><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">status codes</a></strong> (e.g. <strong>200</strong>, <strong>401</strong>, <strong>404</strong>, hopefully not <strong>500</strong>). With WebSockets, I would have to start from scratch with control messages from client to server and parse every single thing from <strong><a href="https://tools.ietf.org/html/rfc4627">JSON</a></strong>.</p>

<p>This realization, together with the frustration from my <strong><a href="http://nginx.org/en/">Nginx</a></strong> experience with the <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> protocol, made me reconsider <strong><a href="http://dev.w3.org/html5/eventsource/">Server Sent Events (SSE)</a></strong>. These are transmitted over a plain <strong><a href="http://tools.ietf.org/html/rfc2616">HTTP</a></strong> connection, which should just work with Nginx or any other proxy out there. Let&#8217;s find out.</p>

<p>The changes I needed to make are surprisingly simple:</p>

<figure class='code'><figcaption><span>Enumerating new Tweets into WebSocket connection</span><a href='https://github.com/matthiasn/BirdWatch/blob/466cce67a38265e311970466b3bf5529fda54f12/app/controllers/Twitter.scalaTwitter.scala'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Serves WebSocket connection updating the UI */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetFeed</span> <span class="k">=</span> <span class="nc">WebSocket</span><span class="o">.</span><span class="n">using</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="cm">/** Creates enumerator and channel for Strings through Concurrent factory object</span>
</span><span class='line'><span class="cm">     * for pushing data through the WebSocket */</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">wsOutChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="kt">...</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">)</span> <span class="c1">// in and out channels for WebSocket connection</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes:</p>

<figure class='code'><figcaption><span>Enumerating new Tweets into HTTP connection</span><a href='https://github.com/matthiasn/BirdWatch/blob/b193b18749b8c3bc2c7c6f78acfdb6e7adb24cc9/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Serves Server Sent Events over HTTP connection */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetFeed</span><span class="o">()</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="n">req</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Creates enumerator and channel for Strings through Concurrent factory object</span>
</span><span class='line'><span class="cm">     * for pushing data through the WebSocket */</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">wsOutChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="kt">...</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">.</span><span class="n">feed</span><span class="o">(</span><span class="n">out</span> <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before, any Tweet coming through the wsOutChannel would be enumerated into the WebSocket by returning the (in: Iteratee, out: Enumerator) whereas now we need to attach the <strong>out</strong> Enumerator to the Ok result feed. That is all on the server side.</p>

<p>The changes on the client side are just as simple:</p>

<figure class='code'><figcaption><span>WebSocket Event Handling</span><a href='https://github.com/matthiasn/BirdWatch/blob/466cce67a38265e311970466b3bf5529fda54f12/app/views/twitter/tweets.scala.html'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s2">&quot;@routes.Twitter.tweetFeed().webSocketURL()&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ws</span><span class="p">.</span><span class="nx">onMessage</span> <span class="o">=</span> <span class="nx">handler</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes:</p>

<figure class='code'><figcaption><span>EventSource Event Handling</span><a href='https://github.com/matthiasn/BirdWatch/blob/ac4d9488c46aeb96e6f01e09c13fcb4598e11039/app/views/twitter/tweets.scala.html'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">feed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s1">&#39;/tweetFeed&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">feed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I expected the SSE solution to on par with the previous WebSocket solution in terms of performance. Interestingly though, with nothing else changed, SSE is a little or a lot faster, depending on the browser. For pre-loading of 500 Tweets on loading the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> page in the browser, it took on average:</p>

<ul>
<li>Safari: <strong>7 seconds</strong> using SSE and <strong>16 seconds</strong> using WebSockets</li>
<li>Chrome: <strong>5 seconds</strong> using SSE and <strong>8 seconds</strong> using WebSockets</li>
<li>Firefox: <strong>6 seconds</strong> using SSE and <strong>8 seconds</strong> using WebSockets</li>
</ul>


<p>Server Sent Events win 3:0. The better performance is noticable in all browsers, especially in Safari though, which seems to have a less-than-ideal WebSocket implementation.</p>

<p>This was actually super simple to implement, it took much longer to write this blog post than to implement a working solution using Server Sent Events. <strong><a href="http://www.playframework.com">Play Framework</a></strong> really does make me much more productive.</p>

<p>With these changes implemented, a simple <strong><a href="http://nginx.org/en/">Nginx</a></strong> configuration inspired by the <strong><a href="http://www.playframework.com/documentation/2.1.1/HTTPServer">Play documentation</a></strong> works like a charm:</p>

<figure class='code'><figcaption><span>nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user www-data;
</span><span class='line'>worker_processes 4;
</span><span class='line'>pid /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>  worker_connections 768;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http {
</span><span class='line'>  proxy_buffering    off;
</span><span class='line'>  proxy_set_header   X-Real-IP $remote_addr;
</span><span class='line'>  proxy_set_header   X-Scheme $scheme;
</span><span class='line'>  proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>  proxy_set_header   Host $http_host;
</span><span class='line'>
</span><span class='line'>  upstream my-backend {
</span><span class='line'>    server 127.0.0.1:9000;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>    listen               80;
</span><span class='line'>    keepalive_timeout    70;
</span><span class='line'>    server_name birdwatch.matthiasnehlsen.com;
</span><span class='line'>    location / {
</span><span class='line'>      proxy_pass  http://my-backend;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p><strong>EDIT 07/03/2013:</strong> I am exploring the combination of Server Sent Events plus REST (for client to server communication) in <strong><a href="http://matthiasnehlsen.com/blog/2013/06/23/angularjs-and-play-framework/">this article</a></strong>.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveMongo 0.9 and Lossless Persistence]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/26/data-model-upgrade/"/>
    <updated>2013-04-26T13:48:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/26/data-model-upgrade</id>
    <content type="html"><![CDATA[<p>Initially I parsed the Tweets in the <strong><a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a></strong> application into instances of a Tweet case class upon ingestion and then used that case class representation throughout, including for database persistence. Then I realized that that was actually not a good idea. Using a case class for passing around information in the application is very convenient and useful. But for the persistence, I argue that we cannot afford to be opinionated about what to keep and what to throw away. I fixed this together with the planned migration to <strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong> version 0.9 in the latest commits, storing each  observable fact coming from the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> in its entirety.</p>

<!-- more -->


<p>Any data model will almost invariably be wrong in the future as we cannot predict what we will want to analyze later. We can always change the data model at a later point and from then on store a different interpretation of the observable fact, but then we would not have complete historic information when we want to test our hypotheses on retrospective data. The solution for this is to store the Tweets in their complete <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> representation. <strong><a href="http://www.mongodb.org">MongoDB</a></strong> is a great choice for this as it allows indexing our data while leaving the <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> structure intact. We get the best of two worlds. With this lossless persistence we can always reconstruct the observable fact from the database while at the same time being able to quickly search through a potentially large dataset.</p>

<p>I also wanted to upgrade <strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong> in order to fix a previous problem with Killcursors. Version 0.9 entails some changes in the API, so it was a good idea to tackle the upgrade and the Tweet persistence layer together. Let&#8217;s go through some of the changes:</p>

<figure class='code'><figcaption><span>Mongo Connection in Version 0.8</span><a href='https://github.com/matthiasn/BirdWatch/blob/53b79386ef49d80a1d4d1eae1086b9aff5485fa2/app/utils/Mongo.scala'>Mongo.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Mongo connection object */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Mongo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">connection</span> <span class="k">=</span> <span class="nc">MongoConnection</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;localhost:27017&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="n">connection</span><span class="o">(</span><span class="s">&quot;BirdWatch&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Mongo Connection in Version 0.9</span><a href='https://github.com/matthiasn/BirdWatch/blob/2738bfdafb2a2367a79177b615adb58ce5d51c5b/app/utils/Mongo.scala'>Mongo.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Mongo connection object */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Mongo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">driver</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MongoDriver</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">connection</span> <span class="k">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">connection</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;localhost:27017&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="n">connection</span><span class="o">(</span><span class="s">&quot;BirdWatch&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong> now uses an instance of the <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/driver/src/main/scala/api/api.scala">MongoDriver</a></strong> class and its connection method. The <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/driver/src/main/scala/api/api.scala">MongoConnection</a></strong> class still exists, but I couldn&#8217;t get it to work for some reason.</p>

<p>I have moved the Tweet collection and basic query and insert methods into a Tweet companion object, with the intention of turning this into a lightweight <strong><a href="http://en.wikipedia.org/wiki/Data_access_object">DAO (Data Access Object)</a></strong> for Tweets:</p>

<figure class='code'><figcaption><span>Tweet Companion Object</span><a href='https://github.com/matthiasn/BirdWatch/blob/290c609cccbf17076074e1eb2fa4e31bb350ca37/app/models/Tweet.scala'>Tweet.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Data Access Object for Tweets*/</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Tweet</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">rawTweets</span><span class="k">:</span> <span class="kt">JSONCollection</span> <span class="o">=</span> <span class="nc">Mongo</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">collection</span><span class="o">[</span><span class="kt">JSONCollection</span><span class="o">](</span><span class="s">&quot;rawTweets&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">insertJson</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span> <span class="k">=</span> <span class="n">rawTweets</span><span class="o">.</span><span class="n">insert</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">](</span><span class="n">json</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** get collection size from MongoDB (fast) */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">count</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Mongo</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">command</span><span class="o">(</span><span class="nc">Count</span><span class="o">(</span><span class="s">&quot;rawTweets&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Query latest tweets (lazily evaluated stream, result could be of arbitrary size) */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">jsonLatestN</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="n">rawTweets</span>
</span><span class='line'>      <span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$exists&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span>
</span><span class='line'>    <span class="n">cursor</span><span class="o">.</span><span class="n">toList</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Storing the <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> from Twitter not only prevents us from throwing away data we might need in the future, it is also much simpler than having to deal with implicit <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/bson/src/main/scala/handlers.scala">BSONReader</a></strong> and <strong><a href="https://github.com/zenexity/ReactiveMongo/blob/7d2328a337a9092d31801180b97e271a343abf29/bson/src/main/scala/handlers.scala">BSONWriter</a></strong> objects as was previously the case:</p>

<figure class='code'><figcaption><span>BSON implicits (with 0.8)</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/models/TweetImplicits.scala'>TweetImplicits.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">object</span> <span class="nc">TweetBSONWriter</span> <span class="k">extends</span> <span class="nc">BSONWriter</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toBSON</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">BSONDocument</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="nc">BSONObjectID</span><span class="o">.</span><span class="n">generate</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;tweet_id&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONLong</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">tweet_id</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;screen_name&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">screen_name</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;wordCount&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONInteger</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">wordCount</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;charCount&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONInteger</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">charCount</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;location&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">location</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;profile_image_url&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">profile_image_url</span><span class="o">),</span>
</span><span class='line'>        <span class="s">&quot;geo&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONString</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">geo</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)),</span>
</span><span class='line'>        <span class="s">&quot;created_at&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONDateTime</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">getMillis</span><span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">object</span> <span class="nc">TweetBSONReader</span> <span class="k">extends</span> <span class="nc">BSONReader</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">fromBSON</span><span class="o">(</span><span class="n">document</span><span class="k">:</span> <span class="kt">BSONDocument</span><span class="o">)</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">doc</span> <span class="k">=</span> <span class="n">document</span><span class="o">.</span><span class="n">toTraversable</span>
</span><span class='line'>      <span class="nc">Tweet</span><span class="o">(</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONLong</span><span class="o">](</span><span class="s">&quot;tweet_id&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;screen_name&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;text&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONInteger</span><span class="o">](</span><span class="s">&quot;wordCount&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONInteger</span><span class="o">](</span><span class="s">&quot;charCount&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;location&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONString</span><span class="o">](</span><span class="s">&quot;profile_image_url&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">,</span>
</span><span class='line'>        <span class="nc">None</span><span class="o">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="nc">DateTime</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONDateTime</span><span class="o">](</span><span class="s">&quot;created_at&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">.</span><span class="n">value</span><span class="o">),</span>
</span><span class='line'>        <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">BSONObjectID</span><span class="o">](</span><span class="s">&quot;_id&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead we just parse a <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> string from Twitter and insert the parsed <strong><a href="https://github.com/playframework/Play20/blob/2.1.1/framework/src/play/src/main/scala/play/api/libs/json/JsValue.scala">JsValue</a></strong> into the <strong><a href="https://github.com/zenexity/Play-ReactiveMongo/blob/a7164a1ac0832680ca0f4c3da0b6949ffea282b0/src/main/scala/play/modules/reactivemongo/jsoncollection.scala">JSONCollection</a></strong>:</p>

<figure class='code'><figcaption><span>Inserting into database</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** persist any valid JSON from Twitter Streaming API */</span>
</span><span class='line'>  <span class="nc">Tweet</span><span class="o">.</span><span class="n">insertJson</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is really all there is to storing <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong> into MongoDB now. I don&#8217;t have to worry about additional fields or other changes in the Twitter Streaming API. If it is valid <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>, it will find its way into the database. Major changes to the API might break parsing into Tweets, but they would not break database persistence.</p>

<p>Error and status messages from Twitter also come as <strong><a href="http://tools.ietf.org/html/rfc4627">JSON</a></strong>, so they are stored as well:</p>

<figure class='code'><figcaption><span>JavaScript query in MongoDB shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;…&quot;</span><span class="p">),</span> <span class="s2">&quot;disconnect&quot;</span> <span class="o">:</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;code&quot;</span> <span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&quot;stream_name&quot;</span> <span class="o">:</span> <span class="s2">&quot;_MNehlsen-statuses237381&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;reason&quot;</span> <span class="o">:</span> <span class="s2">&quot;admin logout&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Querying is more concise than before, making use of Json.obj instead of BSONDocuments:</p>

<figure class='code'><figcaption><span>OLD: Query for latest Tweets</span><a href='https://github.com/matthiasn/BirdWatch/blob/53b79386ef49d80a1d4d1eae1086b9aff5485fa2/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">latestTweetQuery</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">query</span> <span class="k">=</span> <span class="nc">QueryBuilder</span><span class="o">().</span><span class="n">query</span><span class="o">(</span><span class="nc">BSONDocument</span><span class="o">(</span><span class="s">&quot;created_at&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nc">BSONDocument</span><span class="o">(</span><span class="s">&quot;$lte&quot;</span> <span class="o">-&gt;</span> <span class="nc">BSONDateTime</span><span class="o">(</span><span class="nc">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">getMillis</span><span class="o">))))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="s">&quot;created_at&quot;</span> <span class="o">-&gt;</span> <span class="nc">SortOrder</span><span class="o">.</span><span class="nc">Descending</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">cursor</span> <span class="k">=</span> <span class="nc">Mongo</span><span class="o">.</span><span class="n">tweets</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
</span><span class='line'>  <span class="n">cursor</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>NEW: Query for latest Tweets</span><a href='https://github.com/matthiasn/BirdWatch/blob/4abf8f2fe50986b3dd695998a553b8a9888fce71/app/models/Tweet.scala'>Tweet.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">jsonLatestN</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="n">rawTweets</span>
</span><span class='line'>    <span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$exists&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span>
</span><span class='line'>  <span class="n">cursor</span><span class="o">.</span><span class="n">toList</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks much neater and is also close to the syntax in the MongoDB JavaScript shell:</p>

<figure class='code'><figcaption><span>JavaScript query in MongoDB shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">rawTweets</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;$exists&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">sort</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Curly braces get replaced by Json.obj() and the colon gets replaced by &#8220;->&#8221;. Other than that, the syntax is very close. Note the &#8220;$exists&#8221; part. This limits the results to only Tweets (and potentially error and status messages that have a &#8220;text&#8221; field, but I have not encountered those).</p>

<p>The usage above with generating a List from the cursor works fine for small n, but for larger results sets (say hundreds of thousands of items) it would be a bad idea to build the list in memory first. Luckily ReactiveMongo allows us to stream the results. That itself is not new, but since version 0.9 we can limit the number of results, making this much more useful for a latestN scenario:</p>

<figure class='code'><figcaption><span>Enumerating cursor of Tweets</span><a href='https://github.com/matthiasn/BirdWatch/blob/466cce67a38265e311970466b3bf5529fda54f12/app/models/Tweet.scala'>Tweet.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Enumerate latest Tweets (descending order) into specified Iteratee.</span>
</span><span class='line'><span class="cm"> * @param n number of results to enumerate over</span>
</span><span class='line'><span class="cm"> **/</span>
</span><span class='line'><span class="k">def</span> <span class="n">enumJsonLatestN</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="k">=</span> <span class="n">rawTweets</span>
</span><span class='line'>    <span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;text&quot;</span> <span class="o">-&gt;</span> <span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;$exists&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sort</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">obj</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">cursor</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span>
</span><span class='line'>  <span class="n">cursor</span><span class="o">.</span><span class="n">enumerate</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this we create an Enumerator of JsObjects that streams the results into an Iteratee. The usage of this is simple once we understand what this pattern means. Check out my previous <strong><a href="http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence/">Iteratee article</a></strong>, hope it helps a little bit.</p>

<p>This allows us to stream results into an Iteratee that will do whatever we need, in this case just doing a simple foreach:</p>

<figure class='code'><figcaption><span>Attaching Iteratee to Enumerator </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">dbTweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">JsObject</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">json</span> <span class="k">=&gt;</span> <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">WordCount</span><span class="o">.</span><span class="n">wordsChars</span><span class="o">(</span><span class="n">t</span><span class="o">))</span> <span class="c1">// word and char count for each t</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsError</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nc">Tweet</span><span class="o">.</span><span class="n">enumJsonLatestN</span><span class="o">(</span><span class="mi">500</span><span class="o">)(</span><span class="n">dbTweetIteratee</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I currently do not enumerate the results into an Iteratee because the Tweets would appear in the wrong order in the UI and I cannot easily reverse the direction in which the Tweets are enumerated without an auto-incrementing counter in MongoDB to determine from where to start enumerating in ascending order (from position [collectionsize - n]). But this is more a problem of the UI, the next versions will certainly make use of this pattern.</p>

<p>The only thing I was still missing is an easy way to get the size of a collection. In the shell we would write:</p>

<figure class='code'><figcaption><span>JavaScript query in MongoDB shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">rawTweets</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;text&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;$exists&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">}</span> <span class="p">).</span><span class="nx">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Turns out that in ReactiveMongo, we can use the Count command for this, which returns a Future[Int] with the result (see Tweet.scala above).
This allows us to do something upon return of the collection size in a non-blocking way:</p>

<figure class='code'><figcaption><span>Using Count Command</span><a href='https://github.com/matthiasn/BirdWatch/blob/fd44fe45163233746b8caacc0dbba5c815e3f964/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="nc">Tweet</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">c</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Tweets: &quot;</span> <span class="o">+</span> <span class="n">c</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great stuff, I really like <strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong>. The documentation has also gotten a lot better in 0.9, compared to previous versions. Nonetheless it takes some source code reading to find some of the good stuff. I&#8217;d be more than to happy help out here and contribute to the project documentation.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iteratee: can I have that in a sentence?]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence/"/>
    <updated>2013-04-23T22:08:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence</id>
    <content type="html"><![CDATA[<p>A couple of weeks back I was trying to wrap my head around <strong><a href="http://www.playframework.com/documentation/2.0.4/Iteratees">Iteratees</a></strong> so I read what I could find on Google. Afterwards, I had a very high level idea about Enumerators producing or emitting a stream of information and Iteratees consuming that information, potentially with aggregate state. At the same time, the Iteratee was supposed to be immutable. Okay, so I have this immutable thing aggregating state over time. That did not seem right.</p>

<!-- more -->


<p>I had to see this in action in order to understand how this Iteratee thing works. So I was looking for a stream of information that I could use. I found it in the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong>. A stream of Tweets can be interesting, even outright entertaining, having chosen the right topic(s), and Tweets being tweeted right now when watching the visualization is something that seems easy to relate to. I also wanted to try out a supervised actor hierarchy in this project, so I decided to download the original profile images from Twitter for every single Tweet, down convert them using a couple of actors doing image manipulation and storing an 80x80px PNG thumbnail in <strong><a href="http://www.mongodb.org">MongoDB</a></strong>. This supervised image manipulation will be the topic of another post though.</p>

<p>On the client side I wanted something flashy that makes it obvious that live information from the real world is flowing through the system and reasoned about. I had recently taken an interest in <strong><a href="http://d3js.org">D3.js</a></strong> and I had seen the <strong><a href="https://github.com/jasondavies/d3-cloud">d3-cloud</a></strong> wordcloud implementation by Jason Davies, which is nice to look at, so I wondered if it was difficult to drive it from data streaming to the client over a <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connection. The UI at this point was not supposed to be particularly useful, it was really only designed for the effect, as a visualization of something happening <strong>right now</strong>. I am fully aware that a wordcloud is not the best way for showing the frequency of words, and having it regenerate every 5 seconds makes it even less useful perceptually since whatever you look at will be gone before you can even fully focus on the smaller items. That being said, the focus of this project was learning how Iteratees work. The <strong><a href="http://d3js.org">D3.js</a></strong> I use for this project is very basic on my end, I will focus on doing more useful things with D3 later on.</p>

<p>So I started working on this reactive web application called <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>. In this article I will go through the parts of the application that are relevant for trying to understand Iteratees. I will do this iteratively in the  order in which my own understanding evolved.</p>

<p>Let&#8217;s look at my initial high-level architectural drawing (warning, it is inaccurate, read on to find out why):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/BirdWatch.svg" width="800" height="300" title="image" alt="images"></p>

<p>At first, this seems to make sense. The WS object (upper left box named Twitter) acts as our Enumerator, taking the chunks of Array[Byte] it is receiving from the open HTTP connection with the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> endpoint and passing them along into an Iteratee:</p>

<figure class='code'><figcaption><span>WS-Client</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="s">&quot;https://stream.twitter.com/1.1/statuses/filter.json?track=&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">topics</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;%2C&quot;</span><span class="o">).</span><span class="n">replace</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">,</span> <span class="s">&quot;%20&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">withTimeout</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sign</span><span class="o">(</span><span class="nc">OAuthCalculator</span><span class="o">(</span><span class="n">consumerKey</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">tweetIteratee</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Iteratee then performs some action (JSON parsing from String, Tweet parsing from JSON, sending the Tweet to the ImageConversion actor) for each chunk, without accumulating intermediate state.</p>

<figure class='code'><figcaption><span>tweetIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Iteratee for processing each chunk from Twitter stream of Tweets. Parses Json chunks </span>
</span><span class='line'><span class="cm">* as Tweet instances and publishes them to eventStream. */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span> <span class="n">chunk</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">chunk</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">ActorStage</span><span class="o">.</span><span class="n">imgSupervisor</span> <span class="o">!</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">wordsChars</span><span class="o">(</span><span class="n">stripImageUrl</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsError</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This at first seduced me into believing that the Iteratee for sending the tweets was one particular instance that performed these repeated actions as specified in the foreach part. But that is not the case. The Iteratee is immutable and every time we pass information to an Iteratee in a step, a new Iteratee is created in return. This does not seem terribly useful as long as we only want to perform a foreach without accumulated state. But bear with me.</p>

<p>Let&#8217;s have a look at the second Enumerator / Iteratee couple in the application next. Afterwards this will make much more sense.</p>

<p>For the wordcount, which feeds both the wordcloud and the bar chart in the UI, we analyze a rolling window of tweets. For this, we need to keep state over say the last 1000 tweets, as is the case here.</p>

<p>Let&#8217;s have a look at the implementation of the tweetListIteratee:</p>

<figure class='code'><figcaption><span>tweetListIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates Iteratee which holds a List[Tweet] of length up to n as its state in each step,  </span>
</span><span class='line'><span class="cm"> *  based on the provided tweetList. The newest element is found in the head of the list.</span>
</span><span class='line'><span class="cm"> *  Allows passing in a &quot;side-effecting&quot; function f, e.g. for testing or pushing data to </span>
</span><span class='line'><span class="cm"> *  WebSocket or EventStream. Having f return unit instead of modifying the accumulator </span>
</span><span class='line'><span class="cm"> *  guarantees that f cannot alter the accumulator newAcc in unintended ways.</span>
</span><span class='line'><span class="cm"> *  Attach to Channel[Tweet] for better decoupling within application.</span>
</span><span class='line'><span class="cm"> *  @param    f &quot;side-effecting&quot; function (List[Tweet] =&gt; Unit)</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to use as the accumulator</span>
</span><span class='line'><span class="cm"> *  @param    n max length of list to keep as iteratee state</span>
</span><span class='line'><span class="cm"> *  @return   Iteratee[Tweet, List[Tweet]], accumulating tweetList from tweetChannel</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">,</span> <span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span>
</span><span class='line'>  <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="o">(</span><span class="n">tweetList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">xs</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">newTweetList</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">::</span> <span class="n">xs</span><span class="o">)</span> <span class="n">take</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">f</span><span class="o">(</span><span class="n">newTweetList</span><span class="o">)</span>
</span><span class='line'>      <span class="n">newTweetList</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here we have constructed an Iteratee which takes as parameters a function f that takes a List[Tweet] and returns Unit, a TweetList which will be our accumulator in the fold and n, which is the maximum size of the list in the accumulator or in other words the maximum size of our rolling window that we will reason about. What happens here is that the Iteratee will receive the previous accumulator / state (a List[Tweet]) and a single Tweet, prepend the single Tweet as the new head of the accumulator, limited to a list of maximum size n and then return that new list as the state inside the partial function.</p>

<p>The tweetListIteratee also runs function f, which is by definition purely side-effecting as it returns Unit, so the only effects it can have are outside the tweetListIteratee. Normally we should probably shy away from side-effects, but here I would argue that this is a good thing. Any function passed in here could be defined to have side-effects, but the Unit return type guarantees that f will not be able to mess with the accumulator, it cannot have any effects on it, unlike functions transforming the accumulator or passing it along PLUS having side-effects. The side-effect f is used for is pushing immutable information into the WebSocket connection. In fact, there is no mutable state in scope for this function anyways that it could mess with.</p>

<p>Let&#8217;s look at that function we substitute for f before we wire the Iteratee into an Enumerator:</p>

<figure class='code'><figcaption><span>interceptTweetList</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** &quot;side-effecting&quot; function to do something with the accumulator without possibly mutating it</span>
</span><span class='line'><span class="cm"> * e.g. push some computation to a WebSocket enumerator or to log file</span>
</span><span class='line'><span class="cm"> * @param    tweetList accumulator inside the Iteratee</span>
</span><span class='line'><span class="cm"> * @return   Unit, cannot interfere with the accumulator inside the Iteratee </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">interceptTweetList</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">charCountMean</span><span class="o">,</span> <span class="n">charCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">charCount</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">wordCount</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetState</span> <span class="k">=</span> <span class="nc">TweetState</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="o">,</span> <span class="mi">250</span><span class="o">),</span> <span class="n">charCountMean</span><span class="o">,</span>
</span><span class='line'>    <span class="n">charCountStdDev</span><span class="o">,</span> <span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">,</span> <span class="n">tweetList</span><span class="o">.</span><span class="n">size</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">wsOutChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">stringify</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">tweetState</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function above calculates mean and standard deviation for character count and word count within the tweets inside the rolling window, which by now is the old state from the previous Iteratee plus the latest Tweet pushed into the Iteratee appended at the head of the list (limited to size n if larger):</p>

<figure class='code'><figcaption><span>stdDev</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/Calc.scala'>Calc.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Calculate standard deviation from TraversableOnce[Int]</span>
</span><span class='line'><span class="cm"> *  @param    xs collection of Int</span>
</span><span class='line'><span class="cm"> *  @return   (mean: Double, stdDev: Double)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">stdDev</span><span class="o">(</span><span class="n">xs</span><span class="k">:</span> <span class="kt">TraversableOnce</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="o">(</span><span class="kt">Double</span><span class="o">,</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">n</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">total</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">x</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">mean</span> <span class="k">=</span> <span class="n">total</span> <span class="o">/</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stdDev</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">}</span> <span class="o">/</span> <span class="n">n</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">mean</span><span class="o">,</span> <span class="n">stdDev</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and also the word frequency map:</p>

<figure class='code'><figcaption><span>countTweetWords & topN</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Counts words in List[Tweet], returning Map[String, Int] with wordMap filtered by </span>
</span><span class='line'><span class="cm"> *  regular expression and not containing any word from the stopWords set</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to count words in</span>
</span><span class='line'><span class="cm"> *  @return   Map[String, Int] with word counts</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">tweetList</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">tweet</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">splitTweet</span><span class="o">(</span><span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="o">).</span><span class="n">filter</span><span class="o">{</span> <span class="n">w</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">stopWords</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">w</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">wordMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">word</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">wordMap</span> <span class="o">+</span> <span class="o">((</span><span class="n">word</span><span class="o">,</span> <span class="n">wordMap</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Generates ListMap with Top n most popular words in a tweetList</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet]</span>
</span><span class='line'><span class="cm"> *  @param    n number highest ranking words to return</span>
</span><span class='line'><span class="cm"> *  @return   sorted ListMap with top n words in descending order of count </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">wordMap</span> <span class="k">=</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="o">)</span>
</span><span class='line'>  <span class="nc">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">](</span><span class="n">removeShortWords</span><span class="o">(</span><span class="n">wordMap</span><span class="o">).</span><span class="n">toList</span><span class="o">.</span><span class="n">sortBy</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">_2</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="o">)</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These calculations probably warrant a separate (and much shorter) article. For now let&#8217;s just assume they do what the description states. The results of these computations are then pushed into the WebSocket channel towards the browser as JSON (embedded in an immutable instance of Case Class <strong><a href="https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/models/Tweet.scala">TweetState</a></strong>). That step actually involves another Enumerator / Iteratee couple, but more about that later.</p>

<p>Let us now hook the Iteratee up with an Enumerator that will push data into it before dealing with the issue that the Iteratee is immutable and cannot be changed. In previous versions we probably would have used a <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.PushEnumerator">PushEnumerator</a></strong> to achieve this, but PushEnumerator is deprecated as of Play 2.10, we are supposed to use <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.Concurrent$">Concurrent.broadcast</a></strong> instead.</p>

<figure class='code'><figcaption><span>Enumerator for tweetIteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates enumerator and channel for Tweets through Concurrent factory object */</span>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">enumerator</span><span class="o">,</span> <span class="n">tweetChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Iteratee processing Tweets from tweetChannel, accumulating a rolling window of tweets */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetListIteratee</span> <span class="k">=</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">interceptTweetList</span><span class="o">,</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">](),</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'><span class="n">enumerator</span> <span class="o">|&gt;&gt;&gt;</span> <span class="n">tweetListIteratee</span> <span class="c1">// attach tweetListIteratee to enumerator</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Actor for subscribing to eventStream. Pushes received tweets into TweetChannel for</span>
</span><span class='line'><span class="cm"> * consumption through iteratee (and potentially other consumers, decoupled)  */</span>
</span><span class='line'><span class="k">val</span> <span class="n">subscriber</span> <span class="k">=</span> <span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=&gt;</span> <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}))</span>
</span><span class='line'><span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">eventStream</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">subscriber</span><span class="o">,</span> <span class="n">classOf</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="c1">// subscribe to incoming tweets</span>
</span></code></pre></td></tr></table></div></figure>


<p>We call Concurrent.broadcast[Tweet], which returns a tuple2 of an Enumerator (named accordingly) and a channel (tweetChannel) that we can use to push Tweets into. We then attach our tweetListIteratee to the enumerator using the |>>> operator. The Tweets pushed into tweetChannel will then be consumed by the tweetListIteratee attached to the enumerator. We will get those Tweets from the <strong><a href="http://doc.akka.io/docs/akka/2.1.2/scala/event-bus.html">Akka EventBus</a></strong> by creating an actor, which listens to events of type Tweet on the EventBus and pushes them into tweetChannel. We will look at the EventBus in more detail in the article dealing with the ImageProcessing actor hierarchy. For now it should be sufficient to know that we have a source of Tweets and push each individual occurence of a Tweet event into the tweetChannel, thus creating our own open-ended stream.</p>

<p>Now that we have wired our building blocks together, let&#8217;s see if we can visualize this in its initial state:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee1.svg" width="800" height="300" title="image" alt="images"></p>

<p>We have a systemwide EventBus to which we attach for every user connection an actor listening to Tweets and pushing them into the tweetChannel. Somehow, and we will get there, this Tweet will reach the tweetlistIteratee, which acts as the consumer or sink of this information. Once it has reached the tweetlistIteratee, we would expect to have the Tweet within the rolling window of Tweets and also to have the interceptor function run.</p>

<p>So far so good. But remember that the Iteratee is an immutable data type:</p>

<blockquote><p>An Iteratee consumes a stream of elements of type E, producing a result of type A. The stream itself is represented by the Input trait. An Iteratee is an immutable data type, so each step in consuming the stream generates a new Iteratee with a new state.</p><footer><strong>Iteratee</strong> <cite><a href='http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.Iteratee'>Play 2.10 API</a></cite></footer></blockquote>


<p>Let&#8217;s see what happens when we push a Tweet into the system:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee2.svg" width="800" height="300" title="image" alt="images"></p>

<p>The Tweet appears on the EventBus, is received by the subscribing actor, pushed into the tweetChannel and from there into the tweetlistIteratee by being applied to the <strong>Cont</strong> function inside that Iteratee, resulting in a new Iteratee with the Tweet prepended to the accumulator (and the tweetlistInterceptor function executed in the process, doing the statistic computations and pushing the result into the WebSocket connection to the client). This results in a brand new Iteratee.</p>

<p>This is what confused me initially. How does the Enumerator keep track of the current Iteratee it will have to feed with the next element in the stream? The Enumerator cannot call the initial Iteratee again and again, at least not of there is supposed to be aggregate state. Does this mean the enumerator has mutable internal state, holding the latest Iteratee? I wanted to know and did not find any answers, so I resorted to reading the source code.</p>

<p>It turns out it depends on the definition of mutable state and also on the kind of Enumerator. The <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/play/src/main/scala/play/api/libs/ws/WS.scala">WS</a></strong> object or the now-deprecated <a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Enumerator.scala">PushEnumerator</a> use plain old vars to achieve this. Let&#8217;s look at WS first because the construct is simpler than the one in <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.scala</a></strong>.</p>

<figure class='code'><figcaption><span>WS Enumerator excerpts</span><a href='https://github.com/playframework/Play20/blob/2.1.0/framework/src/play/src/main/scala/play/api/libs/ws/WS.scala'>WS.scala</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="c1">// line 236</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">iteratee</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span>, <span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// line 252 </span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onBodyPartReceived</span><span class="o">(</span><span class="n">bodyPart</span><span class="k">:</span> <span class="kt">HttpResponseBodyPart</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">doneOrError</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">iteratee</span> <span class="k">=</span> <span class="n">iteratee</span><span class="o">.</span><span class="n">pureFlatFold</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Step</span><span class="o">.</span><span class="nc">Done</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">doneOrError</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>            <span class="k">val</span> <span class="n">it</span> <span class="k">=</span> <span class="nc">Done</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>            <span class="n">iterateeP</span><span class="o">.</span><span class="n">success</span><span class="o">(</span><span class="n">it</span><span class="o">)</span>
</span><span class='line'>            <span class="n">it</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Step</span><span class="o">.</span><span class="nc">Cont</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">k</span><span class="o">(</span><span class="nc">El</span><span class="o">(</span><span class="n">bodyPart</span><span class="o">.</span><span class="n">getBodyPartBytes</span><span class="o">()))</span>
</span><span class='line'>          <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above we see that the WS object stores the Iteratee as a plain old var, which is replaced in the pureFlatFold step by the subsequent Iteratee returned by k in the case that the Iteratee is in the Cont state. Okay, now this makes sense, the Enumerator does keep track of the next Iteratee to push information into. But mutable state, a var? This is actually fine and safe because this mutable var is contained locally and the WS connection will only run in a single thread anyways.</p>

<p>Here we are not using this kind of Enumerator though, we are using Concurrent.broadcast. This one uses a much more interesting approach: STM (Software Transactional Memory) is used to store Refs to the next Iteratee. The <a href="http://doc.akka.io/docs/akka/2.1.0/scala/stm.html">Akka documentation</a> names Clojure&#8217;s approach as the motivation for the usage of STM within Akka, and it is a great and concise read, I recommend reading the whole thing.</p>

<blockquote><p>There is another way, and that is to separate identity and state (once again, indirection saves the day in programming). We need to move away from a notion of state as &#8220;the content of this memory block&#8221; to one of &#8220;the value currently associated with this identity&#8221;. Thus an identity can be in different states at different times, but the state itself doesn&#8217;t change. That is, an identity is not a state, an identity has a state. Exactly one state at any point in time. And that state is a true value, i.e. it never changes. If an identity appears to change, it is because it becomes associated with different state values over time. This is the Clojure model.</p><footer><strong>Clojure&#8217;s approach to Identity and State</strong> <cite><a href='http://clojure.org/state'>clojure.org/state</a></cite></footer></blockquote>


<p>Without wanting to go into too much detail, the difference when using STM is that references to immutable vals are stored, which are not manipulated in place but instead swapped against a new immutable val. Whatever is retrieved from the STM represents the state at the time of retrieval as an immutable fact. A later retrieval might return a different result, whatever is then the current state, but once the state is retrieved it stays the same throughout the lifecycle of that val, it cannot be changed elsewhere the way it could happen with a var (leading to odd behavior). This is one way to make shared state inside STM thread-safe, the other one is that every change to the shared state is transacted, with the ability to roll back when the state has been updated from elsewhere (e.g. another thread). Let&#8217;s have a quick look how this changes the previous drawing in my understanding:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee3.svg" width="800" height="300" title="image" alt="images"></p>

<p>The enumerator adds the Iteratee to a list of Iteratees. Then the enumerator is not directly involved in calling the Iteratee any longer, instead the push function looks up the Iterator, calls Cont on it like in the previous example and eventually swaps it against the next Iteratee:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee4.svg" width="800" height="300" title="image" alt="images"></p>

<p>I will have to study <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.scala</a></strong> some more in order to understand how exactly this happens.</p>

<p>Finally, we push the result of the computation in the previous step into the WebSocket connection towards the browser. Here once again we use Concurrent.broadcast to create the aforementioned enumerator / channel tuple, this time of type String. The channel is used to push String serialized JSON towards the client. We do not actually create the Iteratee here, instead we use the enumerator as part of the returned tuple in line 77 together with an Iteratee that we can use to process incoming information from the WebSocket connection. In this case, we use a very simple Iteratee which completely ignores all input:</p>

<figure class='code'><figcaption><span>Enumerator for tweetIteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="cm">/** Line 35: Iteratee for incoming messages on WebSocket connection, currently ignored */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">ignore</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'> <span class="cm">/** Creates enumerator and channel for Strings through Concurrent </span>
</span><span class='line'><span class="cm">  *  factory objectfor pushing data through the WebSocket */</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">wsOutChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// line 55: used inside interceptTweetList function                </span>
</span><span class='line'>  <span class="n">wsOutChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">stringify</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">tweetState</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// line 77: return value in tweetFeed function </span>
</span><span class='line'>  <span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">)</span> <span class="c1">// in and out channels for WebSocket connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of the Iteratee.ignore[String] we could define an Iteratee that processes information coming from the browser here, if so desired. This will be useful when allowing the client to send control commands towards the server through the WebSocket connection.</p>

<p>One comment regarding possible Iteratee states: An Iteratee can  be in one of three states, Cont, Done and Error. The Done state does not seem particularly useful when dealing with truly open-ended streams. When is a Twitter stream done? When Twitter ceases to exist? For this reason I also do not care about any result that could be computed on a Done state in this application. Results over a stream of Tweets as presented here are only meaningful incrementally. But a Done state could certainly be useful in other applications, such as when reading from a large file in smaller chunks or when streaming data from <a href="http://reactivemongo.org">ReactiveMongo</a> until the iterator runs out of data. Then a final computation makes sense.</p>

<p>Okay, this has been a lot. But I promised to share what I learned about Iteratees with this project so far. Let me know if this helped you in your understanding as well.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
</feed>
