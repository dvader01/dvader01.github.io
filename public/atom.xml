<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthias Nehlsen]]></title>
  <link href="http://matthiasnehlsen.com/atom.xml" rel="self"/>
  <link href="http://matthiasnehlsen.com/"/>
  <updated>2013-04-26T16:35:44+02:00</updated>
  <id>http://matthiasnehlsen.com/</id>
  <author>
    <name><![CDATA[Matthias Nehlsen]]></name>
    <email><![CDATA[matthias.nehlsen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactiveMongo 0.9-SNAPSHOT and Lossless Persistence]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/26/data-model-upgrade/"/>
    <updated>2013-04-26T13:48:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/26/data-model-upgrade</id>
    <content type="html"><![CDATA[<p>Initially I parsed the Tweets in the BirdWatch application into instances of a case class upon ingestion and then used that case class representation throughout, including for database persistence. Then I realized that that was actually not a good idea. Using a case class for passing around information in the application is very convenient and useful. But for the persistence, I argue that we cannot afford to be opinionated about what to keep and what to throw away. I fixed this together with the planned migration to <strong><a href="http://reactivemongo.org">ReactiveMongo</a></strong> 0.9-SNAPSHOT in the latest commits.</p>

<!-- more -->


<p>In the <strong><a href="https://github.com/matthiasn/BirdWatch/blob/6edda07bec721c61011aaef21f1ed4440130e48f/README.md">GitHub</a></strong> project description I had been ranting about how any data model will almost invariably be wrong in the future as we cannot know what we will want to analyze later. We can always change the data model at a later point and from then on store a different interpretation of the observable fact, but then we would not have complete historic information to test our hypotheses on retrospective data.</p>

<p>For this reason I decided that I wanted to store the Tweets in their complete JSON representation. <strong><a href="http://www.mongodb.org">MongoDB</a></strong> is a great choice for this as it allows indexing our data while leaving the JSON structure intact. We get the best of two worlds, we have a lossless persistence this way, meaning that we can reconstruct the observable fact from the database while at the same time being able to quickly search through a potentially really large dataset. The reconstructed observable fact might not be identical on a binary level as that would depend on the JSON to text serialization library and its configuration, but the restored facts will be semantically identical, which is good enough for our purpose.</p>

<p>Of course we could also store raw text in something like Hadoop or plain text files, but it would be much more effort to retrieve information later because we would have to deal with the indexing instead of leaving that to MongoDB.</p>

<p>I had already stored raw Tweets in the database for a little while, but I had also still stored the case class instances and used the latter for preloading tweets upon startup of the browser. That really was not very elegant. The main change I had to make there was querying the last n raw Tweets from the database for the preloading and then parse Tweets from the JsObjects the same way I already do when ingesting the</p>

<p>It turns out that it was a good idea to approach this problem</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iteratee: can I have that in a sentence?]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence/"/>
    <updated>2013-04-23T22:08:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/23/iteratee-can-i-have-that-in-a-sentence</id>
    <content type="html"><![CDATA[<p>A couple of weeks back I was trying to wrap my head around <strong><a href="http://www.playframework.com/documentation/2.0.4/Iteratees">Iteratees</a></strong> so I read what I could find on Google. Afterwards, I had a very high level idea about Enumerators producing or emitting a stream of information and Iteratees consuming that information, potentially with aggregate state. At the same time, the Iteratee was supposed to be immutable. Okay, so I have this immutable thing aggregating state over time. That did not seem right.</p>

<!-- more -->


<p>I had to see this in action in order to understand how this Iteratee thing works. So I was looking for a stream of information that I could use. I found it in the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong>. A stream of Tweets can be interesting, even outright entertaining, having chosen the right topic(s), and Tweets being tweeted right now when watching the visualization is something that seems easy to relate to. I also wanted to try out a supervised actor hierarchy in this project, so I decided to download the original profile images from Twitter for every single Tweet, down convert them using a couple of actors doing image manipulation and storing an 80x80px PNG thumbnail in <strong><a href="http://www.mongodb.org">MongoDB</a></strong>. This supervised image manipulation will be the topic of another post though.</p>

<p>On the client side I wanted something flashy that makes it obvious that live information from the real world is flowing through the system and reasoned about. I had recently taken an interest in <strong><a href="http://d3js.org">D3.js</a></strong> and I had seen the <strong><a href="https://github.com/jasondavies/d3-cloud">d3-cloud</a></strong> wordcloud implementation by Jason Davies, which is nice to look at, so I wondered if it was difficult to drive it from data streaming to the client over a <strong><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a></strong> connection. The UI at this point was not supposed to be particularly useful, it was really only designed for the effect, as a visualization of something happening <strong>right now</strong>. I am fully aware that a wordcloud is not the best way for showing the frequency of words, and having it regenerate every 5 seconds makes it even less useful perceptually since whatever you look at will be gone before you can even fully focus on the smaller items. That being said, the focus of this project was learning how Iteratees work. The <strong><a href="http://d3js.org">D3.js</a></strong> I use for this project is very basic on my end, I will focus on doing more useful things with D3 later on.</p>

<p>So I started working on this reactive web application called <strong><a href="https://github.com/matthiasn/BirdWatch">BirdWatch</a></strong>. In this article I will go through the parts of the application that are relevant for trying to understand Iteratees. I will do this iteratively in the  order in which my own understanding evolved.</p>

<p>Let&#8217;s look at my initial high-level architectural drawing (warning, it is inaccurate, read on to find out why):</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/BirdWatch.svg" width="800" height="300" title="image" alt="images"></p>

<p>At first, this seems to make sense. The WS object (upper left box named Twitter) acts as our Enumerator, taking the chunks of Array[Byte] it is receiving from the open HTTP connection with the <strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a></strong> endpoint and passing them along into an Iteratee:</p>

<figure class='code'><figcaption><span>WS-Client</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="s">&quot;https://stream.twitter.com/1.1/statuses/filter.json?track=&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">conn</span> <span class="k">=</span> <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span> <span class="o">+</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">topics</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;%2C&quot;</span><span class="o">).</span><span class="n">replace</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">,</span> <span class="s">&quot;%20&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">withTimeout</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">sign</span><span class="o">(</span><span class="nc">OAuthCalculator</span><span class="o">(</span><span class="n">consumerKey</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">TwitterClient</span><span class="o">.</span><span class="n">tweetIteratee</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Iteratee then performs some action (JSON parsing from String, Tweet parsing from JSON, sending the Tweet to the ImageConversion actor) for each chunk, without accumulating intermediate state.</p>

<figure class='code'><figcaption><span>tweetIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/e33ce62bb36b4a1228c2f1519de60ef3d65482bd/app/actors/TwitterClient.scala'>TwitterClient.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Iteratee for processing each chunk from Twitter stream of Tweets. Parses Json chunks </span>
</span><span class='line'><span class="cm">* as Tweet instances and publishes them to eventStream. */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetIteratee</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">foreach</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span> <span class="n">chunk</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">chunkString</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">chunk</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">TweetReads</span><span class="o">.</span><span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">ActorStage</span><span class="o">.</span><span class="n">imgSupervisor</span> <span class="o">!</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">wordsChars</span><span class="o">(</span><span class="n">stripImageUrl</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">JsError</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">chunkString</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This at first seduced me into believing that the Iteratee for sending the tweets was one particular instance that performed these repeated actions as specified in the foreach part. But that is not the case. The Iteratee is immutable and every time we pass information to an Iteratee in a step, a new Iteratee is created in return. This does not seem terribly useful as long as we only want to perform a foreach without accumulated state. But bear with me.</p>

<p>Let&#8217;s have a look at the second Enumerator / Iteratee couple in the application next. Afterwards this will make much more sense.</p>

<p>For the wordcount, which feeds both the wordcloud and the bar chart in the UI, we analyze a rolling window of tweets. For this, we need to keep state over say the last 1000 tweets, as is the case here.</p>

<p>Let&#8217;s have a look at the implementation of the tweetListIteratee:</p>

<figure class='code'><figcaption><span>tweetListIteratee (shortened)</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates Iteratee which holds a List[Tweet] of length up to n as its state in each step,  </span>
</span><span class='line'><span class="cm"> *  based on the provided tweetList. The newest element is found in the head of the list.</span>
</span><span class='line'><span class="cm"> *  Allows passing in a &quot;side-effecting&quot; function f, e.g. for testing or pushing data to </span>
</span><span class='line'><span class="cm"> *  WebSocket or EventStream. Having f return unit instead of modifying the accumulator </span>
</span><span class='line'><span class="cm"> *  guarantees that f cannot alter the accumulator newAcc in unintended ways.</span>
</span><span class='line'><span class="cm"> *  Attach to Channel[Tweet] for better decoupling within application.</span>
</span><span class='line'><span class="cm"> *  @param    f &quot;side-effecting&quot; function (List[Tweet] =&gt; Unit)</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to use as the accumulator</span>
</span><span class='line'><span class="cm"> *  @param    n max length of list to keep as iteratee state</span>
</span><span class='line'><span class="cm"> *  @return   Iteratee[Tweet, List[Tweet]], accumulating tweetList from tweetChannel</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">,</span> <span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span>
</span><span class='line'>  <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">fold</span><span class="o">[</span><span class="kt">Tweet</span>, <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]]</span> <span class="o">(</span><span class="n">tweetList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">xs</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">newTweetList</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">::</span> <span class="n">xs</span><span class="o">)</span> <span class="n">take</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">f</span><span class="o">(</span><span class="n">newTweetList</span><span class="o">)</span>
</span><span class='line'>      <span class="n">newTweetList</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here we have constructed an Iteratee which takes as parameters a function f that takes a List[Tweet] and returns Unit, a TweetList which will be our accumulator in the fold and n, which is the maximum size of the list in the accumulator or in other words the maximum size of our rolling window that we will reason about. What happens here is that the Iteratee will receive the previous accumulator / state (a List[Tweet]) and a single Tweet, prepend the single Tweet as the new head of the accumulator, limited to a list of maximum size n and then return that new list as the state inside the partial function.</p>

<p>The tweetListIteratee also runs function f, which is by definition purely side-effecting as it returns Unit, so the only effects it can have are outside the tweetListIteratee. Normally we should probably shy away from side-effects, but here I would argue that this is a good thing. Any function passed in here could be defined to have side-effects, but the Unit return type guarantees that f will not be able to mess with the accumulator, it cannot have any effects on it, unlike functions transforming the accumulator or passing it along PLUS having side-effects. The side-effect f is used for is pushing immutable information into the WebSocket connection. In fact, there is no mutable state in scope for this function anyways that it could mess with.</p>

<p>Let&#8217;s look at that function we substitute for f before we wire the Iteratee into an Enumerator:</p>

<figure class='code'><figcaption><span>interceptTweetList</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** &quot;side-effecting&quot; function to do something with the accumulator without possibly mutating it</span>
</span><span class='line'><span class="cm"> * e.g. push some computation to a WebSocket enumerator or to log file</span>
</span><span class='line'><span class="cm"> * @param    tweetList accumulator inside the Iteratee</span>
</span><span class='line'><span class="cm"> * @return   Unit, cannot interfere with the accumulator inside the Iteratee </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">interceptTweetList</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">charCountMean</span><span class="o">,</span> <span class="n">charCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">charCount</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Calc</span><span class="o">.</span><span class="n">stdDev</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">wordCount</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">tweetState</span> <span class="k">=</span> <span class="nc">TweetState</span><span class="o">(</span><span class="n">tweetList</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="o">,</span> <span class="mi">250</span><span class="o">),</span> <span class="n">charCountMean</span><span class="o">,</span>
</span><span class='line'>    <span class="n">charCountStdDev</span><span class="o">,</span> <span class="n">wordCountMean</span><span class="o">,</span> <span class="n">wordCountStdDev</span><span class="o">,</span> <span class="n">tweetList</span><span class="o">.</span><span class="n">size</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">wsOutChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">stringify</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">tweetState</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function above calculates mean and standard deviation for character count and word count within the tweets inside the rolling window, which by now is the old state from the previous Iteratee plus the latest Tweet pushed into the Iteratee appended at the head of the list (limited to size n if larger):</p>

<figure class='code'><figcaption><span>stdDev</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/Calc.scala'>Calc.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Calculate standard deviation from TraversableOnce[Int]</span>
</span><span class='line'><span class="cm"> *  @param    xs collection of Int</span>
</span><span class='line'><span class="cm"> *  @return   (mean: Double, stdDev: Double)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">stdDev</span><span class="o">(</span><span class="n">xs</span><span class="k">:</span> <span class="kt">TraversableOnce</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="o">(</span><span class="kt">Double</span><span class="o">,</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">n</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">total</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">x</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">mean</span> <span class="k">=</span> <span class="n">total</span> <span class="o">/</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">stdDev</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span> <span class="n">xs</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="o">)</span> <span class="o">}</span> <span class="o">/</span> <span class="n">n</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">mean</span><span class="o">,</span> <span class="n">stdDev</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and also the word frequency map:</p>

<figure class='code'><figcaption><span>countTweetWords & topN</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/utils/WordCount.scala'>WordCount.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Counts words in List[Tweet], returning Map[String, Int] with wordMap filtered by </span>
</span><span class='line'><span class="cm"> *  regular expression and not containing any word from the stopWords set</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet] to count words in</span>
</span><span class='line'><span class="cm"> *  @return   Map[String, Int] with word counts</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">tweetList</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">tweet</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">splitTweet</span><span class="o">(</span><span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="o">).</span><span class="n">filter</span><span class="o">{</span> <span class="n">w</span> <span class="k">=&gt;</span> <span class="o">!</span><span class="n">stopWords</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">w</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">wordMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">,</span> <span class="n">word</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">wordMap</span> <span class="o">+</span> <span class="o">((</span><span class="n">word</span><span class="o">,</span> <span class="n">wordMap</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Generates ListMap with Top n most popular words in a tweetList</span>
</span><span class='line'><span class="cm"> *  @param    tweetList List[Tweet]</span>
</span><span class='line'><span class="cm"> *  @param    n number highest ranking words to return</span>
</span><span class='line'><span class="cm"> *  @return   sorted ListMap with top n words in descending order of count </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">def</span> <span class="n">topN</span><span class="o">(</span><span class="n">tweetList</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">],</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">wordMap</span> <span class="k">=</span> <span class="n">countTweetWords</span><span class="o">(</span><span class="n">tweetList</span><span class="o">)</span>
</span><span class='line'>  <span class="nc">ListMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">](</span><span class="n">removeShortWords</span><span class="o">(</span><span class="n">wordMap</span><span class="o">).</span><span class="n">toList</span><span class="o">.</span><span class="n">sortBy</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">_2</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="o">)</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These calculations probably warrant a separate (and much shorter) article. For now let&#8217;s just assume they do what the description states. The results of these computations are then pushed into the WebSocket channel towards the browser as JSON (embedded in an immutable instance of Case Class <strong><a href="https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/models/Tweet.scala">TweetState</a></strong>). That step actually involves another Enumerator / Iteratee couple, but more about that later.</p>

<p>Let us now hook the Iteratee up with an Enumerator that will push data into it before dealing with the issue that the Iteratee is immutable and cannot be changed. In previous versions we probably would have used a <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.PushEnumerator">PushEnumerator</a></strong> to achieve this, but PushEnumerator is deprecated as of Play 2.10, we are supposed to use <strong><a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.Concurrent$">Concurrent.broadcast</a></strong> instead.</p>

<figure class='code'><figcaption><span>Enumerator for tweetIteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/** Creates enumerator and channel for Tweets through Concurrent factory object */</span>
</span><span class='line'><span class="k">val</span> <span class="o">(</span><span class="n">enumerator</span><span class="o">,</span> <span class="n">tweetChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Iteratee processing Tweets from tweetChannel, accumulating a rolling window of tweets */</span>
</span><span class='line'><span class="k">val</span> <span class="n">tweetListIteratee</span> <span class="k">=</span> <span class="nc">WordCount</span><span class="o">.</span><span class="n">tweetListIteratee</span><span class="o">(</span><span class="n">interceptTweetList</span><span class="o">,</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">](),</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'><span class="n">enumerator</span> <span class="o">|&gt;&gt;&gt;</span> <span class="n">tweetListIteratee</span> <span class="c1">// attach tweetListIteratee to enumerator</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Actor for subscribing to eventStream. Pushes received tweets into TweetChannel for</span>
</span><span class='line'><span class="cm"> * consumption through iteratee (and potentially other consumers, decoupled)  */</span>
</span><span class='line'><span class="k">val</span> <span class="n">subscriber</span> <span class="k">=</span> <span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Tweet</span> <span class="o">=&gt;</span> <span class="n">tweetChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}))</span>
</span><span class='line'><span class="nc">ActorStage</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">eventStream</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">subscriber</span><span class="o">,</span> <span class="n">classOf</span><span class="o">[</span><span class="kt">Tweet</span><span class="o">])</span> <span class="c1">// subscribe to incoming tweets</span>
</span></code></pre></td></tr></table></div></figure>


<p>We call Concurrent.broadcast[Tweet], which returns a tuple2 of an Enumerator (named accordingly) and a channel (tweetChannel) that we can use to push Tweets into. We then attach our tweetListIteratee to the enumerator using the |>>> operator. The Tweets pushed into tweetChannel will then be consumed by the tweetListIteratee attached to the enumerator. We will get those Tweets from the <strong><a href="http://doc.akka.io/docs/akka/2.1.2/scala/event-bus.html">Akka EventBus</a></strong> by creating an actor, which listens to events of type Tweet on the EventBus and pushes them into tweetChannel. We will look at the EventBus in more detail in the article dealing with the ImageProcessing actor hierarchy. For now it should be sufficient to know that we have a source of Tweets and push each individual occurence of a Tweet event into the tweetChannel, thus creating our own open-ended stream.</p>

<p>Now that we have wired our building blocks together, let&#8217;s see if we can visualize this in its initial state:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee1.svg" width="800" height="300" title="image" alt="images"></p>

<p>We have a systemwide EventBus to which we attach for every user connection an actor listening to Tweets and pushing them into the tweetChannel. Somehow, and we will get there, this Tweet will reach the tweetlistIteratee, which acts as the consumer or sink of this information. Once it has reached the reached the tweetlistIteratee, we would expect to have the Tweet within the rolling window of Tweets and also to have the interceptor function run.</p>

<p>So far so good. But remember that the Iteratee is an immutable data type:</p>

<blockquote><p>An Iteratee consumes a stream of elements of type E, producing a result of type A. The stream itself is represented by the Input trait. An Iteratee is an immutable data type, so each step in consuming the stream generates a new Iteratee with a new state.</p><footer><strong>Iteratee</strong> <cite><a href='http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.iteratee.Iteratee'>Play 2.10 API</a></cite></footer></blockquote>


<p>Let&#8217;s see what happens when we push a Tweet into the system:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee2.svg" width="800" height="300" title="image" alt="images"></p>

<p>The Tweet appears on the EventBus, is received by the subscribing actor, pushed into the tweetChannel and from there into the tweetlistIteratee by being applied to the <strong>Cont</strong> function inside that Iteratee, resulting in a new Iteratee with the Tweet prepended to the accumulator (and the tweetlistInterceptor function executed in the process, doing the statistic computations and pushing the result into the WebSocket connection to the client). This results in a brand new Iteratee.</p>

<p>This is what confused me initially. How does the Enumerator keep track of the current Iteratee it will have to feed with the next element in the stream? The Enumerator cannot call the initial Iteratee again and again, at least not of there is supposed to be aggregate state. Does this mean the enumerator has mutable internal state, holding the latest Iteratee? I wanted to know and did not find any answers, so I resorted to reading the source code.</p>

<p>It turns out it depends on the definition of mutable state and also on the kind of Enumerator. The <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/play/src/main/scala/play/api/libs/ws/WS.scala">WS</a></strong> object or the now-deprecated <a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Enumerator.scala">PushEnumerator</a> use plain old vars to achieve this. Let&#8217;s look at WS first because the construct is simpler than the one in <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.scala</a></strong>.</p>

<figure class='code'><figcaption><span>WS Enumerator excerpts</span><a href='https://github.com/playframework/Play20/blob/2.1.0/framework/src/play/src/main/scala/play/api/libs/ws/WS.scala'>WS.scala</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="c1">// line 236</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">iteratee</span><span class="k">:</span> <span class="kt">Iteratee</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span>, <span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// line 252 </span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onBodyPartReceived</span><span class="o">(</span><span class="n">bodyPart</span><span class="k">:</span> <span class="kt">HttpResponseBodyPart</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">doneOrError</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">iteratee</span> <span class="k">=</span> <span class="n">iteratee</span><span class="o">.</span><span class="n">pureFlatFold</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Step</span><span class="o">.</span><span class="nc">Done</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">doneOrError</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>            <span class="k">val</span> <span class="n">it</span> <span class="k">=</span> <span class="nc">Done</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>            <span class="n">iterateeP</span><span class="o">.</span><span class="n">success</span><span class="o">(</span><span class="n">it</span><span class="o">)</span>
</span><span class='line'>            <span class="n">it</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Step</span><span class="o">.</span><span class="nc">Cont</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">k</span><span class="o">(</span><span class="nc">El</span><span class="o">(</span><span class="n">bodyPart</span><span class="o">.</span><span class="n">getBodyPartBytes</span><span class="o">()))</span>
</span><span class='line'>          <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above we see that the WS object stores the Iteratee as a plain old var, which is replaced in the pureFlatFold step by the subsequent Iteratee returned by k in the case that the Iteratee is in the Cont state. Okay, now this makes sense, the Enumerator does keep track of the next Iteratee to push information into. But mutable state, a var? This is actually fine and safe because this mutable var is contained locally and the WS connection will only run in a single thread anyways.</p>

<p>Here we are not using this kind of Enumerator though, we are using Concurrent.broadcast. This one uses a much more interesting approach: STM (Software Transactional Memory) is used to store Refs to the next Iteratee. The <a href="http://doc.akka.io/docs/akka/2.1.0/scala/stm.html">Akka documentation</a> names Clojure&#8217;s approach as the motivation for the usage of STM within Akka, and it is a great and concise read, I recommend reading the whole thing.</p>

<blockquote><p>There is another way, and that is to separate identity and state (once again, indirection saves the day in programming). We need to move away from a notion of state as &#8220;the content of this memory block&#8221; to one of &#8220;the value currently associated with this identity&#8221;. Thus an identity can be in different states at different times, but the state itself doesn&#8217;t change. That is, an identity is not a state, an identity has a state. Exactly one state at any point in time. And that state is a true value, i.e. it never changes. If an identity appears to change, it is because it becomes associated with different state values over time. This is the Clojure model.</p><footer><strong>Clojure&#8217;s approach to Identity and State</strong> <cite><a href='http://clojure.org/state'>clojure.org/state</a></cite></footer></blockquote>


<p>Without wanting to go into too much detail, the difference when using STM is that references to immutable vals are stored, which are not manipulated in place but instead swapped against a new immutable val. Whatever is retrieved from the STM represents the state at the time of retrieval as an immutable fact. A later retrieval might return a different result, whatever is then the current state, but once the state is retrieved it stays the same throughout the lifecycle of that val, it cannot be changed elsewhere the way it could happen with a var (leading to odd behavior). This is one way to make shared state inside STM thread-safe, the other one is that every change to the shared state is transacted, with the ability to roll back when the state has been updated from elsewhere (e.g. another thread). Let&#8217;s have a quick look how this changes the previous drawing in my understanding:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee3.svg" width="800" height="300" title="image" alt="images"></p>

<p>The enumerator adds the Iteratee to a list of Iteratees. Then the enumerator is not directly involved in calling the Iteratee any longer, instead the push function looks up the Iterator, calls Cont on it like in the previous example and eventually swaps it against the next Iteratee:</p>

<p><img class="left" src="http://matthiasnehlsen.com/images/Iteratee4.svg" width="800" height="300" title="image" alt="images"></p>

<p>I will have to study <strong><a href="https://github.com/playframework/Play20/blob/2.1.0/framework/src/iteratees/src/main/scala/play/api/libs/iteratee/Concurrent.scala">Concurrent.scala</a></strong> some more in order to understand how exactly this happens.</p>

<p>Finally, we push the result of the computation in the previous step into the WebSocket connection towards the browser. Here once again we use Concurrent.broadcast to create the aforementioned enumerator / channel tuple, this time of type String. The channel is used to push String serialized JSON towards the client. We do not actually create the Iteratee here, instead we use the enumerator as part of the returned tuple in line 77 together with an Iteratee that we can use to process incoming information from the WebSocket connection. In this case, we use a very simple Iteratee which completely ignores all input:</p>

<figure class='code'><figcaption><span>Enumerator for tweetIteratee</span><a href='https://github.com/matthiasn/BirdWatch/blob/f51dac075a6d287b58e55771497b4fd6aa00f32a/app/controllers/Twitter.scala'>Twitter.scala </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="cm">/** Line 35: Iteratee for incoming messages on WebSocket connection, currently ignored */</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="nc">Iteratee</span><span class="o">.</span><span class="n">ignore</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'> <span class="cm">/** Creates enumerator and channel for Strings through Concurrent </span>
</span><span class='line'><span class="cm">  *  factory objectfor pushing data through the WebSocket */</span>
</span><span class='line'>  <span class="k">val</span> <span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">wsOutChannel</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Concurrent</span><span class="o">.</span><span class="n">broadcast</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// line 55: used inside interceptTweetList function                </span>
</span><span class='line'>  <span class="n">wsOutChannel</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">stringify</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">tweetState</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// line 77: return value in tweetFeed function </span>
</span><span class='line'>  <span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">)</span> <span class="c1">// in and out channels for WebSocket connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of the Iteratee.ignore[String] we could define an Iteratee that processes information coming from the browser here, if so desired. This will be useful when allowing the client to send control commands towards the server through the WebSocket connection.</p>

<p>One comment regarding possible Iteratee states: An Iteratee can  be in one of three states, Cont, Done and Error. The Done state does not seem particularly useful when dealing with truly open-ended streams. When is a Twitter stream done? When Twitter ceases to exist? For this reason I also do not care about any result that could be computed on a Done state in this application. Results over a stream of Tweets as presented here are only meaningful incrementally. But a Done state could certainly be useful in other applications, such as when reading from a large file in smaller chunks or when streaming data from <a href="http://reactivemongo.org">ReactiveMongo</a> until the iterator runs out of data. Then a final computation makes sense.</p>

<p>Okay, this has been a lot. But I promised to share what I learned about Iteratees with this project so far. Let me know if this helped you in your understanding as well.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://matthiasnehlsen.com/blog/2013/04/19/hello-world/"/>
    <updated>2013-04-19T21:19:00+02:00</updated>
    <id>http://matthiasnehlsen.com/blog/2013/04/19/hello-world</id>
    <content type="html"><![CDATA[<p><strong>Who am I?</strong>
My name is Matthias and I had my first computer before I had my first bike. I&#8217;ve spent most of my career working in IT project management and systems engineering, having run my own company for over a decade. I was doing well financially, but really wasn&#8217;t satisfying my own curiosity. Who wants to spend their time chasing bugs in systems they didn&#8217;t have any part in creating. I don’t.</p>

<p>After some wandering, I discovered what a delight it can be to write these amazing little things called &#8216;programs&#8217; that come to existence almost completely through the workings of the mind. A couple of years ago, I finally decided that it was time for a major change. I knew I really wanted to be spend my time and energy in the creative process of developing applications that elegantly solve problems, so I made the move, and I haven&#8217;t looked back since.</p>

<!-- more -->


<p><strong>Why am I blogging?</strong>
I am fascinated by the idea of reasoning over live data streams. There are quite a few things that I still need to learn in order to turn my ideas into working code. I find that I learn particularly well when explaining things to others, so writing this blog seems like an awesome idea.</p>

<p>Recently I started to work on a reactive web project for my portfolio, written in <a href="http://www.scala-lang.org">Scala</a> using the <a href="http://www.playframework.com">Play Framework</a>. It presented an ideal opportunity to make this project open source and use it as the first thing to write about. This has been tremendous fun and really exciting so far. I put that project called BirdWatch on <a href="https://github.com/matthiasn/BirdWatch">GitHub</a>, installed a demo on a <a href="http://birdwatch.matthiasnehlsen.com">web server</a> and showed it to a handful of people, not thinking that it was anywhere near being published in a broader sense.</p>

<p>Then it got mentioned on Twitter, retweeted 16 times and before I knew it, I had visitors from 272 cities in 48 countries on that web server. I know because out of curiosity I wrote a little logging routine that does GeoIP-lookup for every IP-address visiting that server on the fly, but that is the topic for a future post, potentially with a live visualization for the curious website owner.</p>

<p><strong>What will I be blogging about?</strong>
I will be blogging about functional programming, reactive data processing and data visualization. I am particularly interested in observable data from the real world moving through information systems, ideally for visualizations that are both useful and pleasant to look at.</p>

<p>For the time being, you can expect me to use <a href="http://www.scala-lang.org">Scala</a>, <a href="http://www.playframework.com">Play</a> and <a href="http://akka.io">Akka</a> on the server side, a beautiful technology stack that allows solving concurrent problems in surprisingly short amounts of time. For the client side I am just getting started with <a href="http://d3js.org">D3.js</a>, a JavaScript library for data-driven DOM manipulation. It allows for absolutely stunning visualizations, even though I am nowhere near that as of yet.</p>

<p>You can also expect me to continue getting live prototypes up and running for the things I write about, just like the one for <a href="http://birdwatch.matthiasnehlsen.com">BirdWatch</a>. I find code that is not executed to be a wasted effort, and there is no better proof for any code than running it. I already learned a lot regarding the architecture of BirdWatch and there are a few things that I would do differently in the future, but that is also a topic for a future post.</p>

<p><strong>How can you leave feedback?</strong>
I am starting this blog because I am hoping to learn a lot in the process, particularly from interaction with you, the reader. So please comment on the blog posts, correct me where I am wrong, and let me know where you think a more elegant solution could be found.</p>

<p>Most importantly, ask if there is anything that you find difficult to understand. My goal in all of this is to explain things as clearly as possible, so please let me know when I&#8217;ve failed to do that. Ask questions in the comments section if you think that others might benefit from the answers as well. Of course, you can also always contact me by email, though that may take longer for a response.</p>

<p>You can also follow me on Twitter <a href="https://twitter.com/_MNehlsen">@_MNehlsen</a>. I just launched my feed, so you&#8217;ll get to be among the first to follow me, and it will make keeping track of when I published a new post much easier for you, as well as other things I find interesting in general.</p>

<p>-Matthias</p>
]]></content>
  </entry>
  
</feed>
